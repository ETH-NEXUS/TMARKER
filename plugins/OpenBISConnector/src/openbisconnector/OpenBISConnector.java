/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package openbisconnector;

import TMARKERPluginInterface.PluginManager;
import ch.systemsx.cisd.openbis.dss.client.api.v1.IOpenbisServiceFacade;
import ch.systemsx.cisd.openbis.dss.client.api.v1.impl.OpenbisServiceFacade;
import ch.systemsx.cisd.openbis.dss.generic.shared.api.v1.NewDataSetDTO;
import ch.systemsx.cisd.openbis.dss.generic.shared.api.v1.NewDataSetDTOBuilder;
import ch.systemsx.cisd.openbis.dss.generic.shared.api.v1.NewDataSetMetadataDTO;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.SpaceWithProjectsAndRoleAssignments;
import com.boxysystems.jgoogleanalytics.FocusPoint;
import com.boxysystems.jgoogleanalytics.JGoogleAnalyticsTracker;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import common.config.Config;
import importer.common.ui.FileChooserTree;
import importer.common.ui.FileChooserTreeNode;
import importer.tmarker.TmarkerFacade;
import importer.tmarker.TmarkerFileChooserTree;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.Icon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.tree.TreePath;
import plugins.TMARKERPluginManager;
import thread.ThreadUtil;
import tmarker.TMAspot.TMApoint;
import tmarker.TMAspot.TMAspot;
import tmarker.tmarker;
import static tmarker.tmarker.logger;

/**
 *
 * @author Peter J. Sch√ºffler
 */
public class openBISConnector extends javax.swing.JFrame implements TMARKERPluginInterface.Pluggable {

    private PluginManager pluginmanager = null;
    private static final String PLUGINVERSION = "1.0";
    private Config inConfig = null;
    private TmarkerFacade facade = null;
    private FileChooserTree treeChooser = null;

    /**
     * Creates new form openBISConnector
     */
    public openBISConnector() {
        initComponents();
        try {
            setIconImage(ImageIO.read(getClass().getResource("/openbisconnector/openBIS.png")));
        } catch (IOException ex) {
            Logger.getLogger(openBISConnector.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose();
            }
        });
        
        // exit on close:
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                doClose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        okButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setTitle("openBIS Connector");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Please login to openBIS:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 3, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("User:");
        jLabel3.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Space:");
        jLabel5.setToolTipText("openBIS space (leave empty for all spaces)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        okButton.setText("Login");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 8, 0);
        jPanel1.add(okButton, gridBagConstraints);
        getRootPane().setDefaultButton(okButton);

        jPasswordField1.setToolTipText("openBIS password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jPasswordField1, gridBagConstraints);

        jTextField2.setText(System.getProperty("user.name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jTextField2, gridBagConstraints);

        jTextField1.setColumns(30);
        jTextField1.setText("https://nexus-openbis.ethz.ch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("Not Connected.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 8, 5);
        jPanel1.add(jButton2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jButton1.setText("Download Selected Dataset or Sample");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 8, 5);
        jPanel1.add(jButton1, gridBagConstraints);

        jLabel8.setText("Disease");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jTextField6, gridBagConstraints);

        jLabel10.setText("Staining Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jTextField7, gridBagConstraints);

        jLabel9.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(6);
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        okButton1.setText("Upload TMARKER Session to Selected Experiment");
        okButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 8, 5);
        jPanel1.add(okButton1, gridBagConstraints);
        getRootPane().setDefaultButton(okButton);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please login first..." }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 5);
        jPanel1.add(jComboBox1, gridBagConstraints);

        jLabel7.setText("<html>To upload the TMARKER session, please select an experiment as location<br>\nand provide the following information:</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel11.setText("<html>Please login and select a space and a dataset or sample for download.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doLogin();
    }//GEN-LAST:event_okButtonActionPerformed

    private void okButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton1ActionPerformed
        doUpload();
    }//GEN-LAST:event_okButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doDownload();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        doLogout();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            doListDatasetsAndSamples();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(openBISConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(openBISConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(openBISConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(openBISConnector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new openBISConnector().setVisible(true);
            }
        });
    }

    /**
     * Returns the URL to the openBIS server.
     *
     * @return The url to the openBIS server.
     */
    String getURL() {
        return jTextField1.getText();
    }

    /**
     * Returns the username to login with at openBIS.
     *
     * @return the username to login with at openBIS.
     */
    String getUsername() {
        return jTextField2.getText();
    }

    /**
     * Returns the password to login with at openBIS.
     *
     * @return The password to login with at openBIS.
     */
    String getPassword() {
        return jPasswordField1.getText();
    }

    /**
     * Returns the timeout to connect with at openBIS.
     *
     * @return The timeout to connect with at openBIS.
     */
    int getTimeoutMS() {
        return 1000;
    }

    /**
     * Returns the space to connect with at openBIS.
     *
     * @return The space to connect with at openBIS. Can be empty string for
     * "use all spaces".
     */
    String getSpace() {
        String space = ((String) jComboBox1.getSelectedItem()).replace("Please login first...", "").replace("All Spaces", "").replace("No Spaces Found.", "");
        if (treeChooser != null) {
            TreePath path = treeChooser.getSelectionPath();
            if (path != null) {
                int n = path.getPathCount();
                if (n>1) {
                    FileChooserTreeNode node = (FileChooserTreeNode) path.getPathComponent(1);
                    space = node.getDisplayName();
                }
            }
        }
        return space;
    }

    /**
     * Returns the selected project at openBIS.
     *
     * @return The selected project at openBIS.
     */
    String getProject() {
        String project = "";
        if (treeChooser != null) {
            TreePath path = treeChooser.getSelectionPath();
            if (path != null) {
                int n = path.getPathCount();
                if (n>2) {
                    FileChooserTreeNode node = (FileChooserTreeNode) path.getPathComponent(2);
                    project = node.getDisplayName();
                }
            }
        }
        return project;
    }

    /**
     * Returns the selected experiment at openBIS.
     *
     * @return The selected experiment at openBIS.
     */
    String getExperiment() {
        String exp = "";
        if (treeChooser != null) {
            TreePath path = treeChooser.getSelectionPath();
            if (path != null) {
                int n = path.getPathCount();
                if (n>3) {
                    FileChooserTreeNode node = (FileChooserTreeNode) path.getPathComponent(3);
                    exp = node.getDisplayName();
                }
            }
        }
        return exp;
    }

    /**
     * Returns the disease descriptor (Metadata).
     *
     * @return The disease descriptor (Metadata).
     */
    String getDisease() {
        return jTextField6.getText();
    }

    /**
     * Returns the staining type descriptor (Metadata).
     *
     * @return The staining type descriptor (Metadata).
     */
    String getStainingType() {
        return jTextField7.getText();
    }

    /**
     * Returns the descripton (Metadata).
     *
     * @return The descripton (Metadata).
     */
    String getDescription() {
        return jTextArea1.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getAuthor() {
        return "Peter J. Sch√ºffler";
    }

    @Override
    public String getVersion() {
        return PLUGINVERSION;
    }

    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        doLogout();
        return true;
    }

    @Override
    public void setPluginManager(PluginManager manager) {
        this.pluginmanager = manager;
    }

    @Override
    public Icon getIcon() {
        try {
            return new javax.swing.ImageIcon(getClass().getResource("/openbisconnector/openBIS.png"));
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public String getPluginName() {
        return "openBIS Connector";
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        this.setVisible(true);
    }

    @Override
    public void setParameterDefaults() {

    }

    @Override
    public void setParameters(Properties parameters) {

    }

    @Override
    public Properties getParameters() {
        return null;
    }

    @Override
    public String getHTMLReport(String HTMLFolderName) {
        String output = "<html>";
        char linebreak = '\n';

        if (inConfig != null) {
            output += "openBIS connection to " + inConfig.getUrl();
        }

        output += "</html>";
        return output;
    }

    @Override
    public void updateOptionsToTMAspot(TMAspot visible_TMAspot, List<TMAspot> selected_TMAspots) {

    }

    @Override
    public void drawInformationPreNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {

    }

    @Override
    public void drawInformationPostNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {

    }

    @Override
    public BufferedImage showAlternativeImage(TMAspot ts) {
        return null;
    }

    /**
     * Returns the PluginManager.
     *
     * @return The PluginManager.
     */
    public PluginManager getPluginManager() {
        return pluginmanager;
    }
    
    /**
     * Closes the plugin. An openBIS connection is logged out, if existing. The 
     * plugin window is hidden.
     * @return 0.
     */
    int doClose() {
        doLogout();
        setVisible(false);
        return 0;
    }

    /**
     * Tries to set up a connection to openBIS (facade). If there is an error, the user
     * is informed.
     */
    void doLogin() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        inConfig = new Config(String.class);

        inConfig.setUrl(getURL());
        inConfig.setUser(getUsername());
        inConfig.setPassword(getPassword());
        inConfig.setTimeout(getTimeoutMS());
        inConfig.setWorkspace(".");

        facade = new TmarkerFacade(inConfig, this, getSpace());

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        if (facade.getService() == null) {
            JOptionPane.showMessageDialog(this, "Could not login to openBIS.\n" + facade.loginException.getMessage(), "Error during login", JOptionPane.ERROR_MESSAGE);
            jLabel6.setText("Not Connected.");
            jLabel6.setForeground(Color.RED);
        } else {
            jLabel6.setText("Connected.");
            jLabel6.setForeground(Color.GREEN);

            JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker("TMARKER", "UA-61194283-1");
            FocusPoint focusPoint = new FocusPoint("OpenBISConnectorUsage");
            tracker.trackAsynchronously(focusPoint);

            doListSpaces();
        }
    }

    /**
     * Closes the connection to openBIS (if any) and removes the listed experiments.
     */
    void doLogout() {
        if (facade != null && facade.getService() != null) {
            facade.getService().logout();
        }
        jPanel2.removeAll();
        jLabel6.setText("Not Connected.");
        jLabel6.setForeground(Color.RED);
        treeChooser = null;
        facade = null;
    }
    
    /**
     * Lists all spaces found for the logged in user (existing connection facade).
     */
    void doListSpaces() {
        if (facade!=null && facade.getService()!=null) {
            jComboBox1.removeAllItems();
            jComboBox1.addItem("All Spaces");
            for (SpaceWithProjectsAndRoleAssignments space : facade.getService().getSpacesWithProjects()) {
                jComboBox1.addItem(space.getCode());
            }
            if (jComboBox1.getItemCount()>1) {
                jComboBox1.setSelectedIndex(1);
            } else {
                jComboBox1.addItem("No Spaces Found.");
            }
        }
    }

    /**
     * Lists all samples and datasets in the given space with the existing connection (facade).
     */
    void doListDatasetsAndSamples() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        String space = (String) jComboBox1.getSelectedItem();
        facade.setSpace(space.equals("All Spaces") || space.equals("No Spaces Found.") ? "" : space);

        //IOpenbisServiceFacade service = OpenbisServiceFacade.tryCreate(inConfig.getUser(), inConfig.getPassword(), inConfig.getUrl(), inConfig.getTimeout());
        treeChooser = new TmarkerFileChooserTree(inConfig, facade);
        treeChooser.init();

        final JScrollPane jScrollPanel = new JScrollPane(treeChooser);
        jPanel2.removeAll();
        jPanel2.add(jScrollPanel);
        
        pack();

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    /**
     * Downloads the selected dataset to local disk and opens the file with TMARKER.
     */
    void doDownload() {
        if (treeChooser != null) {
            final FileChooserTreeNode node = (FileChooserTreeNode) treeChooser.getLastSelectedPathComponent();

            if (node != null) {
                if (treeChooser.isDownloadable(node)) {
                    if (!facade.isDownloadDataSetFileAvailable()) {
                        ThreadUtil.bgRun(new Runnable() {
                            @Override
                            public void run() {
                                treeChooser.onDownload(node);
                            }
                        });
                    }
                }
            }
        }
    }

    /**
     * Opens a connection to openBIS, saves the current TMARKER session as XML and pushes the XML into the openBIS dropbox.
     */
    void doUpload() {
        if (pluginmanager.getTMAspots().isEmpty()) {
            JOptionPane.showMessageDialog(this, "There are no images to be uploaded.", "No images loaded", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (facade==null) {
            // Inform user
            JOptionPane.showMessageDialog(this, "Please login first.", "Please login first", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (getSpace().isEmpty()) {
            // Inform user
            JOptionPane.showMessageDialog(this, "Please provide a proper space to upload the dataset.", "Please provide a space", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (getProject().isEmpty()) {
            // Inform user
            JOptionPane.showMessageDialog(this, "Please provide a project to upload the dataset.", "Please provide a project", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (getExperiment().isEmpty()) {
            // Inform user
            JOptionPane.showMessageDialog(this, "Please provide an experiment to upload the dataset.", "Please provide an experiment", JOptionPane.ERROR_MESSAGE);
            return;
        }
        IOpenbisServiceFacade uploadFacade = null;
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            tmarker t = ((TMARKERPluginManager) pluginmanager).getTMARKER();
            Date date = new Date();

            // create a temp xml file
            File xmlFile = new File(pluginmanager.getTmpDir() + File.separator + "TMARKER_" + date.toString().replaceAll(" ", "-").replaceAll(":", "-") + ".xml");

            // Save TMARKER with the TMAspot to XML
            boolean success = pluginmanager.SaveAsXML(xmlFile);

            if (success) {
                uploadFacade = OpenbisServiceFacade.tryCreate(inConfig.getUser(), inConfig.getPassword(), inConfig.getUrl(), inConfig.getTimeout());

                // Upload the XML File
                uploadFile(xmlFile, t.getUID().toString(), xmlFile.getName(), getDisease(), getStainingType(), getDescription(), getSpace(), getProject(), getExperiment(), uploadFacade);

                // Delete the local XML File
                xmlFile.delete();

                // Inform user
                String message = "TMARKER settings and image files have been uploaded to OpenBIS:\n"
                        + getSpace() + "/" + getProject() + "/" + getExperiment() + ".";
                JOptionPane.showMessageDialog(this, message, "TMARKER successfully uploaded", JOptionPane.INFORMATION_MESSAGE);
                logger.log(java.util.logging.Level.INFO, message);
            }

        } catch (Exception e) {
            // Inform user
            String message = "An error occured during the OpenBIS upload:\n"
                    + e.getMessage();
            JOptionPane.showMessageDialog(this, message, "TMARKER successfully uploaded", JOptionPane.ERROR_MESSAGE);
            logger.log(java.util.logging.Level.WARNING, e.getMessage());
        } finally {
            if (uploadFacade != null) {
                uploadFacade.logout();
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    /**
     * Puts a file into openBIS. The file must have several Metadata
     * (Descriptors). Also the location in OpenBIS must be specified.
     *
     * @param file The file to be uploaded.
     * @param id Descriptor: The ID.
     * @param file_name Descriptor: File name.
     * @param disease Descripor: Disease.
     * @param stainingType Descriptor: Staining Type.
     * @param description Descriptor: Description.
     * @param space Location: The OpenBIS space.
     * @param project Location: The OpenBIS project.
     * @param experiment Location: The OpenBIS experiment.
     * @param facade The OpenBIS connection facade.
     *
     */
    public void uploadFile(File file, String id, String file_name, String disease, String stainingType, String description, String space, String project, String experiment, IOpenbisServiceFacade facade) {
        if (file != null) {

            NewDataSetDTOBuilder builder = new NewDataSetDTOBuilder();
            builder.setDataSetOwnerType(NewDataSetDTO.DataSetOwnerType.EXPERIMENT);
            builder.setDataSetOwnerIdentifier("/" + space + "/" + project + "/" + experiment);
            builder.setFile(file);

            NewDataSetMetadataDTO dataSetMetadata = builder.getDataSetMetadata();
            dataSetMetadata.setDataSetTypeOrNull("TMARKER");

            Map<String, String> map = new HashMap<String, String>();
            map.put("TMARKER_ID", id);
            map.put("TMARKER_FILE_NAME", file_name);
            map.put("TMARKER_DISEASE", disease);
            map.put("TMARKER_STAINING_TYPE", stainingType);
            map.put("TMARKER_DESCRIPTION", description);
            dataSetMetadata.setProperties(map);

            NewDataSetDTO dataSetDTO = builder.asNewDataSetDTO();

            try {
                facade.putDataSet(dataSetDTO, file);
            } catch (Exception e) {
                
            }
        }
    }

}
