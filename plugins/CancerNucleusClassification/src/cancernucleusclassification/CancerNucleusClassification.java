/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CancerNucleusClassification.java
 *
 * Created on 06.10.2011, 13:48:00
 */
package cancernucleusclassification;

import TMARKERPluginInterface.PluginManager;
import com.boxysystems.jgoogleanalytics.FocusPoint;
import com.boxysystems.jgoogleanalytics.JGoogleAnalyticsTracker;
import graphcut.ConnectComponent;
import graphcut.GraphCut;
import graphcut.Terminal;
import ij.ImagePlus;
import ij.plugin.filter.GaussianBlur;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.jai.ROI;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import plugins.TMARKERPluginManager;
import tmarker.FileChooser;
import tmarker.TMAspot.TMALabel;
import tmarker.TMAspot.TMApoint;
import tmarker.TMAspot.TMAspot;
import tmarker.misc.Misc;
import tmarker.misc.StringToIntConverter;
import tmarker.tmarker;
import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;


/**
 *
 * @author Peter J. Schueffler
 */
public class CancerNucleusClassification extends javax.swing.JFrame implements TMARKERPluginInterface.Pluggable {
    
    // For Plugin handling
    PluginManager manager = null;
    private static final String PLUGINNAME = "Cancer Nucleus Classification";
    private static final String PLUGINVERSION = "1.0";
    
    private CancerNucleusClassificationThread thread = null;
    private Thread onTheFlyLabeling = null;
    
    private final StringToIntConverter stic = new StringToIntConverter();
    
    /**
     * Segmentations after nucleus segmentation are drawn to the visible TMAspot.
     */
    private final List<LocalizedROI> segmentations = new ArrayList<>();
    
    /**
     * Foreground / Background classifier classifies samples into background or nuclei.
     * Only used if a 2-step classification is done. It might be null and not used if a 1-step classification is done.
     */
    private Classifier classifier_FG_BG = null;
    /**
     * Benign / Malignant classifier classifies samples into benign or malignant nuclei.
     * Always used (either in 1-step classification or in 2-step classification as second step).
     */
    private Classifier classifier_BEN_MAL = null;
    
    
    /** Creates new form CancerNucleusClassification Dialog */
    public CancerNucleusClassification() {
        initComponents();
        jScrollPane3.getHorizontalScrollBar().setUnitIncrement(10);
        jScrollPane3.getVerticalScrollBar().setUnitIncrement(10);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onClose();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jRadioButton13 = new javax.swing.JRadioButton();
        jRadioButton14 = new javax.swing.JRadioButton();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox30 = new javax.swing.JCheckBox();
        jCheckBox31 = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jCheckBox32 = new javax.swing.JCheckBox();
        jCheckBox33 = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField20 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jButton4 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        jLabel30 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jRadioButton7 = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jRadioButton10 = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jRadioButton15 = new javax.swing.JRadioButton();
        jRadioButton16 = new javax.swing.JRadioButton();
        jCheckBox34 = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jButton26 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton11 = new javax.swing.JRadioButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        jSeparator1.setName("jSeparator1"); // NOI18N

        setTitle("Nucleus Classification Options"); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel11.setName("jPanel11"); // NOI18N
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel12.setName("jPanel12"); // NOI18N
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jCheckBox8.setSelected(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cancernucleusclassification/Bundle"); // NOI18N
        jCheckBox8.setText(bundle.getString("CancerNucleusClassification.jCheckBox8.text")); // NOI18N
        jCheckBox8.setName("jCheckBox8"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jCheckBox8, gridBagConstraints);

        jCheckBox9.setSelected(true);
        jCheckBox9.setText(bundle.getString("CancerNucleusClassification.jCheckBox9.text")); // NOI18N
        jCheckBox9.setName("jCheckBox9"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox9, gridBagConstraints);

        jCheckBox11.setSelected(true);
        jCheckBox11.setText(bundle.getString("CancerNucleusClassification.jCheckBox11.text")); // NOI18N
        jCheckBox11.setName("jCheckBox11"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox11, gridBagConstraints);

        jCheckBox12.setSelected(true);
        jCheckBox12.setText(bundle.getString("CancerNucleusClassification.jCheckBox12.text")); // NOI18N
        jCheckBox12.setName("jCheckBox12"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox12, gridBagConstraints);

        jCheckBox13.setText(bundle.getString("CancerNucleusClassification.jCheckBox13.text")); // NOI18N
        jCheckBox13.setName("jCheckBox13"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox13, gridBagConstraints);

        jCheckBox14.setSelected(true);
        jCheckBox14.setText(bundle.getString("CancerNucleusClassification.jCheckBox14.text")); // NOI18N
        jCheckBox14.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox14.toolTipText")); // NOI18N
        jCheckBox14.setName("jCheckBox14"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox14, gridBagConstraints);

        jCheckBox15.setText(bundle.getString("CancerNucleusClassification.jCheckBox15.text")); // NOI18N
        jCheckBox15.setName("jCheckBox15"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox15, gridBagConstraints);

        jCheckBox16.setSelected(true);
        jCheckBox16.setText(bundle.getString("CancerNucleusClassification.jCheckBox16.text")); // NOI18N
        jCheckBox16.setName("jCheckBox16"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox16, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox16Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox16, gridBagConstraints);

        jCheckBox17.setText(bundle.getString("CancerNucleusClassification.jCheckBox17.text")); // NOI18N
        jCheckBox17.setName("jCheckBox17"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox17, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox17Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox17, gridBagConstraints);

        jCheckBox19.setText(bundle.getString("CancerNucleusClassification.jCheckBox19.text")); // NOI18N
        jCheckBox19.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox19.toolTipText")); // NOI18N
        jCheckBox19.setName("jCheckBox19"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox19, gridBagConstraints);

        jSeparator2.setName("jSeparator2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel12.add(jSeparator2, gridBagConstraints);

        buttonGroup5.add(jRadioButton13);
        jRadioButton13.setSelected(true);
        jRadioButton13.setText(bundle.getString("CancerNucleusClassification.jRadioButton13.text")); // NOI18N
        jRadioButton13.setName("jRadioButton13"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton13, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton13Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel12.add(jRadioButton13, gridBagConstraints);

        buttonGroup5.add(jRadioButton14);
        jRadioButton14.setText(bundle.getString("CancerNucleusClassification.jRadioButton14.text")); // NOI18N
        jRadioButton14.setName("jRadioButton14"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton14, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton14Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel12.add(jRadioButton14, gridBagConstraints);

        jCheckBox21.setSelected(true);
        jCheckBox21.setText(bundle.getString("CancerNucleusClassification.jCheckBox21.text")); // NOI18N
        jCheckBox21.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox21.toolTipText")); // NOI18N
        jCheckBox21.setName("jCheckBox21"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox21, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox21Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel12.add(jCheckBox21, gridBagConstraints);

        jCheckBox22.setSelected(true);
        jCheckBox22.setText(bundle.getString("CancerNucleusClassification.jCheckBox22.text")); // NOI18N
        jCheckBox22.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox22.toolTipText")); // NOI18N
        jCheckBox22.setName("jCheckBox22"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox22, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox22Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox22, gridBagConstraints);

        jCheckBox23.setText(bundle.getString("CancerNucleusClassification.jCheckBox23.text")); // NOI18N
        jCheckBox23.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox23.toolTipText")); // NOI18N
        jCheckBox23.setName("jCheckBox23"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox23, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox23Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox23, gridBagConstraints);

        jCheckBox30.setText(bundle.getString("CancerNucleusClassification.jCheckBox30.text")); // NOI18N
        jCheckBox30.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox30.toolTipText")); // NOI18N
        jCheckBox30.setName("jCheckBox30"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox30, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox30Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox30, gridBagConstraints);

        jCheckBox31.setText(bundle.getString("CancerNucleusClassification.jCheckBox31.text")); // NOI18N
        jCheckBox31.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox31.toolTipText")); // NOI18N
        jCheckBox31.setName("jCheckBox31"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox31, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox31Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox31, gridBagConstraints);

        jSeparator3.setName("jSeparator3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel12.add(jSeparator3, gridBagConstraints);

        jCheckBox32.setText(bundle.getString("CancerNucleusClassification.jCheckBox32.text")); // NOI18N
        jCheckBox32.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox32.toolTipText")); // NOI18N
        jCheckBox32.setName("jCheckBox32"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox32, gridBagConstraints);

        jCheckBox33.setSelected(true);
        jCheckBox33.setText(bundle.getString("CancerNucleusClassification.jCheckBox33.text")); // NOI18N
        jCheckBox33.setName("jCheckBox33"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox33, gridBagConstraints);

        jPanel20.setName("jPanel20"); // NOI18N
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jLabel18.setText(bundle.getString("CancerNucleusClassification.jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel18, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel18Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jLabel18);

        jTextField14.setColumns(2);
        jTextField14.setText(bundle.getString("CancerNucleusClassification.jTextField14.text")); // NOI18N
        jTextField14.setName("jTextField14"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField14, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField14Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jTextField14);

        jLabel25.setText(bundle.getString("CancerNucleusClassification.jLabel25.text")); // NOI18N
        jLabel25.setName("jLabel25"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel25, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel25Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jLabel25);

        jTextField20.setColumns(2);
        jTextField20.setText(bundle.getString("CancerNucleusClassification.jTextField20.text")); // NOI18N
        jTextField20.setName("jTextField20"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField20, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField20Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jTextField20);

        jLabel26.setText(bundle.getString("CancerNucleusClassification.jLabel26.text")); // NOI18N
        jLabel26.setName("jLabel26"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel26, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel26Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jLabel26);

        jTextField21.setColumns(2);
        jTextField21.setText(bundle.getString("CancerNucleusClassification.jTextField21.text")); // NOI18N
        jTextField21.setName("jTextField21"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField21, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField21Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jTextField21);

        jLabel27.setText(bundle.getString("CancerNucleusClassification.jLabel27.text")); // NOI18N
        jLabel27.setName("jLabel27"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel27, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel27Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jLabel27);

        jTextField22.setColumns(2);
        jTextField22.setText(bundle.getString("CancerNucleusClassification.jTextField22.text")); // NOI18N
        jTextField22.setName("jTextField22"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField22, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField22Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jTextField22);

        jLabel28.setText(bundle.getString("CancerNucleusClassification.jLabel28.text")); // NOI18N
        jLabel28.setName("jLabel28"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel28, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel28Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jLabel28);

        jTextField23.setColumns(2);
        jTextField23.setText(bundle.getString("CancerNucleusClassification.jTextField23.text")); // NOI18N
        jTextField23.setName("jTextField23"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox33, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField23, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField23Binding");
        bindingGroup.addBinding(binding);

        jPanel20.add(jTextField23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel12.add(jPanel20, gridBagConstraints);

        jLabel16.setText(bundle.getString("CancerNucleusClassification.jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel12.add(jLabel16, gridBagConstraints);

        jLabel17.setText(bundle.getString("CancerNucleusClassification.jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jLabel17, gridBagConstraints);

        jTextField1.setColumns(3);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText(bundle.getString("CancerNucleusClassification.jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jTextField1, gridBagConstraints);

        jSlider1.setMinimum(1);
        jSlider1.setSnapToTicks(true);
        jSlider1.setName("jSlider1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField1, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider1, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider1Binding");
        binding.setSourceNullValue(1);
        binding.setSourceUnreadableValue(1);
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jSlider1, gridBagConstraints);

        jButton4.setText(bundle.getString("CancerNucleusClassification.jButton4.text")); // NOI18N
        jButton4.setToolTipText(bundle.getString("CancerNucleusClassification.jButton4.toolTipText")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jButton4, gridBagConstraints);

        jLabel19.setText(bundle.getString("CancerNucleusClassification.jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jLabel19, gridBagConstraints);

        jTextField2.setColumns(3);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField2.setText(bundle.getString("CancerNucleusClassification.jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jTextField2, gridBagConstraints);

        jSlider2.setMaximum(10);
        jSlider2.setSnapToTicks(true);
        jSlider2.setName("jSlider2"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField2, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider2, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider2Binding");
        binding.setSourceNullValue(0);
        binding.setSourceUnreadableValue(0);
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel12.add(jSlider2, gridBagConstraints);

        jLabel30.setText(bundle.getString("CancerNucleusClassification.jLabel30.text")); // NOI18N
        jLabel30.setName("jLabel30"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 0;
        jPanel12.add(jLabel30, gridBagConstraints);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText(bundle.getString("CancerNucleusClassification.jCheckBox2.text")); // NOI18N
        jCheckBox2.setName("jCheckBox2"); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel12.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setSelected(true);
        jCheckBox3.setText(bundle.getString("CancerNucleusClassification.jCheckBox3.text")); // NOI18N
        jCheckBox3.setName("jCheckBox3"); // NOI18N
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel12.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setSelected(true);
        jCheckBox4.setText(bundle.getString("CancerNucleusClassification.jCheckBox4.text")); // NOI18N
        jCheckBox4.setName("jCheckBox4"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox4, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox4Binding");
        bindingGroup.addBinding(binding);

        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 14;
        jPanel12.add(jCheckBox4, gridBagConstraints);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setName("jSeparator5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel12.add(jSeparator5, gridBagConstraints);

        jButton1.setText(bundle.getString("CancerNucleusClassification.jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jButton1Binding");
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 5);
        jPanel12.add(jButton1, gridBagConstraints);

        jButton5.setText(bundle.getString("CancerNucleusClassification.jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton5, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jButton5Binding");
        bindingGroup.addBinding(binding);

        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.gridwidth = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel12.add(jButton5, gridBagConstraints);

        jCheckBox1.setText(bundle.getString("CancerNucleusClassification.jCheckBox1.text")); // NOI18N
        jCheckBox1.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox1.toolTipText")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jCheckBox19, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox1, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox1Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel12.add(jCheckBox1, gridBagConstraints);

        jPanel11.add(jPanel12);

        jTabbedPane1.addTab(bundle.getString("CancerNucleusClassification.jPanel11.TabConstraints.tabTitle"), jPanel11); // NOI18N

        jPanel8.setName("jPanel8"); // NOI18N
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText(bundle.getString("CancerNucleusClassification.jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jRadioButton1, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText(bundle.getString("CancerNucleusClassification.jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jRadioButton2, gridBagConstraints);

        jTextField4.setColumns(4);
        jTextField4.setText(bundle.getString("CancerNucleusClassification.jTextField4.text")); // NOI18N
        jTextField4.setToolTipText(bundle.getString("CancerNucleusClassification.jTextField4.toolTipText")); // NOI18N
        jTextField4.setName("jTextField4"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton1, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField4, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField4Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jTextField4, gridBagConstraints);

        jLabel6.setText(bundle.getString("CancerNucleusClassification.jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton1, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel6, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel6Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        jLabel7.setText(bundle.getString("CancerNucleusClassification.jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel7, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel7Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel7, gridBagConstraints);

        jLabel8.setText(bundle.getString("CancerNucleusClassification.jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel8, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel8Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jLabel8, gridBagConstraints);

        jCheckBox5.setSelected(true);
        jCheckBox5.setText(bundle.getString("CancerNucleusClassification.jCheckBox5.text")); // NOI18N
        jCheckBox5.setName("jCheckBox5"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox5, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jCheckBox5Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        jPanel3.add(jCheckBox5, gridBagConstraints);

        jTextField5.setColumns(4);
        jTextField5.setText(bundle.getString("CancerNucleusClassification.jTextField5.text")); // NOI18N
        jTextField5.setName("jTextField5"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField5, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField5Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jTextField5, gridBagConstraints);

        jTextField6.setColumns(4);
        jTextField6.setText(bundle.getString("CancerNucleusClassification.jTextField6.text")); // NOI18N
        jTextField6.setName("jTextField6"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField6, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField6Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jTextField6, gridBagConstraints);

        buttonGroup3.add(jRadioButton3);
        jRadioButton3.setText(bundle.getString("CancerNucleusClassification.jRadioButton3.text")); // NOI18N
        jRadioButton3.setName("jRadioButton3"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton3, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton3Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton3, gridBagConstraints);

        buttonGroup3.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText(bundle.getString("CancerNucleusClassification.jRadioButton4.text")); // NOI18N
        jRadioButton4.setName("jRadioButton4"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton4, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton4Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton4, gridBagConstraints);

        buttonGroup3.add(jRadioButton5);
        jRadioButton5.setText(bundle.getString("CancerNucleusClassification.jRadioButton5.text")); // NOI18N
        jRadioButton5.setName("jRadioButton5"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton5, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton5Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton5, gridBagConstraints);

        buttonGroup3.add(jRadioButton6);
        jRadioButton6.setText(bundle.getString("CancerNucleusClassification.jRadioButton6.text")); // NOI18N
        jRadioButton6.setName("jRadioButton6"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton6, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton6Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton6, gridBagConstraints);

        jLabel9.setText(bundle.getString("CancerNucleusClassification.jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel9, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel9Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jLabel9, gridBagConstraints);

        jTextField7.setColumns(4);
        jTextField7.setText(bundle.getString("CancerNucleusClassification.jTextField7.text")); // NOI18N
        jTextField7.setName("jTextField7"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField7, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField7Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jTextField7, gridBagConstraints);

        jLabel10.setText(bundle.getString("CancerNucleusClassification.jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel10, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel10Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jLabel10, gridBagConstraints);

        jTextField8.setColumns(4);
        jTextField8.setText(bundle.getString("CancerNucleusClassification.jTextField8.text")); // NOI18N
        jTextField8.setName("jTextField8"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField8, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField8Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 11;
        jPanel3.add(jTextField8, gridBagConstraints);

        jLabel11.setText(bundle.getString("CancerNucleusClassification.jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel11, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel11Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        jPanel3.add(jLabel11, gridBagConstraints);

        jTextField9.setColumns(4);
        jTextField9.setText(bundle.getString("CancerNucleusClassification.jTextField9.text")); // NOI18N
        jTextField9.setName("jTextField9"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField9, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField9Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 12;
        jPanel3.add(jTextField9, gridBagConstraints);

        jLabel12.setText(bundle.getString("CancerNucleusClassification.jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel12, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel12Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        jPanel3.add(jLabel12, gridBagConstraints);

        jTextField10.setColumns(4);
        jTextField10.setText(bundle.getString("CancerNucleusClassification.jTextField10.text")); // NOI18N
        jTextField10.setName("jTextField10"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField10, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField10Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        jPanel3.add(jTextField10, gridBagConstraints);

        jLabel13.setText(bundle.getString("CancerNucleusClassification.jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel13, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel13Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 13;
        jPanel3.add(jLabel13, gridBagConstraints);

        jTextField11.setColumns(4);
        jTextField11.setText(bundle.getString("CancerNucleusClassification.jTextField11.text")); // NOI18N
        jTextField11.setName("jTextField11"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField11, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField11Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 13;
        jPanel3.add(jTextField11, gridBagConstraints);

        buttonGroup1.add(jRadioButton7);
        jRadioButton7.setText(bundle.getString("CancerNucleusClassification.jRadioButton7.text")); // NOI18N
        jRadioButton7.setName("jRadioButton7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jRadioButton7, gridBagConstraints);

        jLabel14.setText(bundle.getString("CancerNucleusClassification.jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel14, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel14Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel14, gridBagConstraints);

        buttonGroup2.add(jRadioButton8);
        jRadioButton8.setText(bundle.getString("CancerNucleusClassification.jRadioButton8.text")); // NOI18N
        jRadioButton8.setName("jRadioButton8"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton8, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton8Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton8, gridBagConstraints);

        buttonGroup2.add(jRadioButton9);
        jRadioButton9.setSelected(true);
        jRadioButton9.setText(bundle.getString("CancerNucleusClassification.jRadioButton9.text")); // NOI18N
        jRadioButton9.setName("jRadioButton9"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRadioButton9, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jRadioButton9Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jRadioButton9, gridBagConstraints);

        jLabel15.setText(bundle.getString("CancerNucleusClassification.jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel15, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel015Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel15, gridBagConstraints);

        buttonGroup1.add(jRadioButton10);
        jRadioButton10.setText(bundle.getString("CancerNucleusClassification.jRadioButton10.text")); // NOI18N
        jRadioButton10.setName("jRadioButton10"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jRadioButton10, gridBagConstraints);

        jLabel21.setText(bundle.getString("CancerNucleusClassification.jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton10, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel21, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jLabel21Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel21, gridBagConstraints);

        jTextField16.setColumns(4);
        jTextField16.setText(bundle.getString("CancerNucleusClassification.jTextField16.text")); // NOI18N
        jTextField16.setName("jTextField16"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton10, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField16, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "jTextField16Binding");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jTextField16, gridBagConstraints);

        buttonGroup1.add(jRadioButton15);
        jRadioButton15.setText(bundle.getString("CancerNucleusClassification.jRadioButton15.text")); // NOI18N
        jRadioButton15.setName("jRadioButton15"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jRadioButton15, gridBagConstraints);

        buttonGroup1.add(jRadioButton16);
        jRadioButton16.setText(bundle.getString("CancerNucleusClassification.jRadioButton16.text")); // NOI18N
        jRadioButton16.setName("jRadioButton16"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jRadioButton16, gridBagConstraints);

        jCheckBox34.setText(bundle.getString("CancerNucleusClassification.jCheckBox34.text")); // NOI18N
        jCheckBox34.setToolTipText(bundle.getString("CancerNucleusClassification.jCheckBox34.toolTipText")); // NOI18N
        jCheckBox34.setName("jCheckBox34"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel3.add(jCheckBox34, gridBagConstraints);

        jSeparator4.setName("jSeparator4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel3.add(jSeparator4, gridBagConstraints);

        jPanel8.add(jPanel3);

        jTabbedPane1.addTab(bundle.getString("CancerNucleusClassification.jPanel8.TabConstraints.tabTitle"), jPanel8); // NOI18N

        jPanel16.setName("jPanel16"); // NOI18N
        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel18.setName("jPanel18"); // NOI18N
        jPanel18.setLayout(new java.awt.GridBagLayout());

        jButton26.setText(bundle.getString("CancerNucleusClassification.jButton26.text")); // NOI18N
        jButton26.setName("jButton26"); // NOI18N
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 0, 0);
        jPanel18.add(jButton26, gridBagConstraints);

        jButton30.setText(bundle.getString("CancerNucleusClassification.jButton30.text")); // NOI18N
        jButton30.setToolTipText(bundle.getString("CancerNucleusClassification.jButton30.toolTipText")); // NOI18N
        jButton30.setActionCommand(bundle.getString("CancerNucleusClassification.jButton30.actionCommand")); // NOI18N
        jButton30.setEnabled(false);
        jButton30.setName("jButton30"); // NOI18N
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 22, 0, 0);
        jPanel18.add(jButton30, gridBagConstraints);

        jLabel1.setText(bundle.getString("CancerNucleusClassification.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel18.add(jLabel1, gridBagConstraints);

        jLabel2.setText(bundle.getString("CancerNucleusClassification.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel18.add(jLabel2, gridBagConstraints);

        jLabel3.setText(bundle.getString("CancerNucleusClassification.jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel18.add(jLabel3, gridBagConstraints);

        jLabel4.setText(bundle.getString("CancerNucleusClassification.jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel18.add(jLabel4, gridBagConstraints);

        jButton2.setText(bundle.getString("CancerNucleusClassification.jButton2.text")); // NOI18N
        jButton2.setToolTipText(bundle.getString("CancerNucleusClassification.jButton2.toolTipText")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 0, 0);
        jPanel18.add(jButton2, gridBagConstraints);

        jButton3.setText(bundle.getString("CancerNucleusClassification.jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 0, 0);
        jPanel18.add(jButton3, gridBagConstraints);

        jLabel5.setText(bundle.getString("CancerNucleusClassification.jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 42, 0, 0);
        jPanel18.add(jLabel5, gridBagConstraints);

        buttonGroup4.add(jRadioButton11);
        jRadioButton11.setSelected(true);
        jRadioButton11.setText(bundle.getString("CancerNucleusClassification.jRadioButton11.text")); // NOI18N
        jRadioButton11.setToolTipText(bundle.getString("CancerNucleusClassification.jRadioButton11.toolTipText")); // NOI18N
        jRadioButton11.setName("jRadioButton11"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 0, 0);
        jPanel18.add(jRadioButton11, gridBagConstraints);

        buttonGroup4.add(jRadioButton12);
        jRadioButton12.setText(bundle.getString("CancerNucleusClassification.jRadioButton12.text")); // NOI18N
        jRadioButton12.setToolTipText(bundle.getString("CancerNucleusClassification.jRadioButton12.toolTipText")); // NOI18N
        jRadioButton12.setName("jRadioButton12"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel18.add(jRadioButton12, gridBagConstraints);

        jLabel20.setFont(jLabel20.getFont().deriveFont(jLabel20.getFont().getStyle() | java.awt.Font.BOLD, jLabel20.getFont().getSize()+2));
        jLabel20.setForeground(new java.awt.Color(255, 0, 0));
        jLabel20.setText(bundle.getString("CancerNucleusClassification.jLabel20.text")); // NOI18N
        jLabel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel20.setName("jLabel20"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 22, 0, 0);
        jPanel18.add(jLabel20, gridBagConstraints);

        jLabel22.setText(bundle.getString("CancerNucleusClassification.jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 42, 0, 0);
        jPanel18.add(jLabel22, gridBagConstraints);

        jLabel23.setText(bundle.getString("CancerNucleusClassification.jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 42, 0, 0);
        jPanel18.add(jLabel23, gridBagConstraints);

        jLabel24.setText(bundle.getString("CancerNucleusClassification.jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 42, 0, 0);
        jPanel18.add(jLabel24, gridBagConstraints);

        jLabel29.setText(bundle.getString("CancerNucleusClassification.jLabel29.text")); // NOI18N
        jLabel29.setName("jLabel29"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 42, 0, 0);
        jPanel18.add(jLabel29, gridBagConstraints);

        jLabel31.setText(bundle.getString("CancerNucleusClassification.jLabel31.text")); // NOI18N
        jLabel31.setName("jLabel31"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 0, 0);
        jPanel18.add(jLabel31, gridBagConstraints);

        jToggleButton1.setText(bundle.getString("CancerNucleusClassification.jToggleButton1.text")); // NOI18N
        jToggleButton1.setToolTipText(bundle.getString("CancerNucleusClassification.jToggleButton1.toolTipText")); // NOI18N
        jToggleButton1.setName("jToggleButton1"); // NOI18N
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(25, 22, 0, 0);
        jPanel18.add(jToggleButton1, gridBagConstraints);

        jPanel16.add(jPanel18);

        jTabbedPane1.addTab(bundle.getString("CancerNucleusClassification.jPanel16.TabConstraints.tabTitle"), jPanel16); // NOI18N

        jScrollPane3.setViewportView(jTabbedPane1);

        jPanel1.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jScrollPane7.setViewportView(jPanel1);

        getContentPane().add(jScrollPane7, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        performNucleusClassification(manager.getSelectedTMAspots(), true);
        manager.repaintVisibleTMAspot();
        JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker("TMARKER","UA-61194283-1");
        FocusPoint focusPoint = new FocusPoint("CancerNucleusClassificationTestinglUsage");
        tracker.trackAsynchronously(focusPoint);
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        performClassifierCreation(manager.getSelectedTMAspots());
        if (getParam_useFeature_Segmentation()) {
            manager.repaintVisibleTMAspot();
        }
        JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker("TMARKER","UA-61194283-1");
        FocusPoint focusPoint = new FocusPoint("CancerNucleusClassificationTraininglUsage");
        tracker.trackAsynchronously(focusPoint);
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (classifier_BEN_MAL != null) {
            List<String> extensions = new ArrayList<>();
            List<String> descriptions = new ArrayList<>();
            extensions.add("tma");
            descriptions.add("TMARKER Classifier File");
            File file = FileChooser.chooseSavingFile(this, "", "Classifier.tma", extensions, descriptions);
            saveClassifier(file);
        } else {
            JOptionPane.showMessageDialog(this, "Please create a classifier, first.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        List<String> extensions = new ArrayList<>();
        List<String> descriptions = new ArrayList<>();
        extensions.add("tma");
        descriptions.add("TMARKER Classifier File");
        File file = FileChooser.chooseLoadingFile(this, "", extensions, descriptions);
        if (file!=null) {
            openClassifier(file);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jSlider1.setValue(4*manager.getLabelRadius());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider2StateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        performSegmentation();
        if (getParam_useFeature_Segmentation()) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        saveSegmentationMask();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) {
            if (onTheFlyLabeling == null || !onTheFlyLabeling.isAlive()) {
                onTheFlyLabeling = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        while (jToggleButton1.isSelected()) {
                            try {
                                
                                // Classifier Creation
                                performClassifierCreation(manager.getTMAspots());
                                
                                // Nucleus classification
                                List<TMAspot> tss = new ArrayList<>();
                                tss.add(manager.getVisibleTMAspot());
                                performNucleusClassification(tss, false);
                                manager.repaintVisibleTMAspot();
                                
                                Thread.sleep(5000);
                            } catch (InterruptedException ex) {
                                if (tmarker.DEBUG>0) {
                                    Logger.getLogger(CancerNucleusClassification.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }
                });
                onTheFlyLabeling.start();
            }
        } else {
            if (onTheFlyLabeling != null && onTheFlyLabeling.isAlive()) {
                onTheFlyLabeling.interrupt();
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CancerNucleusClassification().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox30;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox32;
    private javax.swing.JCheckBox jCheckBox33;
    private javax.swing.JCheckBox jCheckBox34;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton12;
    private javax.swing.JRadioButton jRadioButton13;
    private javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToggleButton jToggleButton1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getAuthor() {
        return "Peter J. Schüffler";
    }
    
    @Override
    public String getVersion() {
        return PLUGINVERSION;
    }
    
    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        setVisible(false);
        return true;
    }

    @Override
    public void setPluginManager(PluginManager manager) {
        this.manager = manager;
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public String getPluginName() {
        return PLUGINNAME;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        this.setVisible(true);
        updateOptionsToTMAspot(manager.getVisibleTMAspot(), manager.getSelectedTMAspots());
    }

    @Override
    public void setParameterDefaults() {
        setParam_patchsize(10);
        setParam_blur(2);
        setParam_useFeature_ColorHist(true);
        setParam_useFeature_IMGMoments(true);
        setParam_useFeature_LBP(true);
        setParam_useFeature_LBP2(true);
        setParam_useFeature_LBP2_Radius(12);
        setParam_useFeature_LBP2_NumPoints(6);
        setParam_useFeature_LBP2_NumBins(8);
        setParam_useFeature_LBP2_Offset(3);
        setParam_useFeature_LBP2_NeighborhoodSize(2);
        setParam_useFeature_PHOG(true);
        setParam_useFeature_SURF(false);
        setParam_useFeature_Entropy(true);
        setParam_useFeature_Gabor(false);
        setParam_useFeature_1DSignature(true);
        setParam_useFeature_1DSignature_scaleInvariant(true);
        setParam_useFeature_1DSignature_rotationInvariant(true);
        setParam_useFeature_1DSignature_derivative(false);
        setParam_useFeature_PathSegmentCode(false);
        setParam_useFeature_Segmentation(false);
        setParam_useFeature_Segmentation_Graphcut(false);
        setParam_useFeature_FGBGColor(false);
        setParam_useFeature_Circularity(false);
        setParam_useFeature_Roundness(false);
        setParam_useFeature_RotatedPatches(false);
        setParam_2StepClassification(false);
        setParam_ShowPatches(true);
        setParam_ShowBlur(false);
        setParam_ShowSegmentations(true);
    }

    @Override
    public void setParameters(Properties parameters) {
        String value;
        value = parameters.getProperty("patchsize"); if (value!=null) { setParam_patchsize(Integer.parseInt(value)); }
        value = parameters.getProperty("blur"); if (value!=null) { setParam_blur(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_ColorHist"); if (value!=null) { setParam_useFeature_ColorHist(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_IMGMoments"); if (value!=null) { setParam_useFeature_IMGMoments(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_LBP"); if (value!=null) { setParam_useFeature_LBP(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_LBP2"); if (value!=null) { setParam_useFeature_LBP2(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_LBP2_Radius"); if (value!=null) { setParam_useFeature_LBP2_Radius(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_LBP2_NumPoints"); if (value!=null) { setParam_useFeature_LBP2_NumPoints(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_LBP2_NumBins"); if (value!=null) { setParam_useFeature_LBP2_NumBins(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_LBP2_Offset"); if (value!=null) { setParam_useFeature_LBP2_Offset(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_LBP2_NeighborhoodSize"); if (value!=null) { setParam_useFeature_LBP2_NeighborhoodSize(Integer.parseInt(value)); }
        value = parameters.getProperty("useFeature_PHOG"); if (value!=null) { setParam_useFeature_PHOG(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_SURF"); if (value!=null) { setParam_useFeature_SURF(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Entropy"); if (value!=null) { setParam_useFeature_Entropy(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Gabor"); if (value!=null) { setParam_useFeature_Gabor(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_1DSignature"); if (value!=null) { setParam_useFeature_1DSignature(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_1DSignature_scaleInvariant"); if (value!=null) { setParam_useFeature_1DSignature_scaleInvariant(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_1DSignature_rotationInvariant"); if (value!=null) { setParam_useFeature_1DSignature_rotationInvariant(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_1DSignature_derivative"); if (value!=null) { setParam_useFeature_1DSignature_derivative(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_PathSegmentCode"); if (value!=null) { setParam_useFeature_PathSegmentCode(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Segmentation"); if (value!=null) { setParam_useFeature_Segmentation(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Segmentation_Graphcut"); if (value!=null) { setParam_useFeature_Segmentation_Graphcut(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_FGBGColor"); if (value!=null) { setParam_useFeature_FGBGColor(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Circularity"); if (value!=null) { setParam_useFeature_Circularity(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_Roundness"); if (value!=null) { setParam_useFeature_Roundness(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useFeature_RotatedPatches"); if (value!=null) { setParam_useFeature_RotatedPatches(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("2StepClassification"); if (value!=null) { setParam_2StepClassification(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowPatches"); if (value!=null) { setParam_ShowPatches(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowBlur"); if (value!=null) { setParam_ShowBlur(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowSegmentations"); if (value!=null) { setParam_ShowSegmentations(Boolean.parseBoolean(value)); }
    }

    @Override
    public Properties getParameters() {
        Properties parameters = new Properties();
        parameters.setProperty("patchsize", Integer.toString(getParam_patchsize()));
        parameters.setProperty("blur", Integer.toString(getParam_blur()));
        parameters.setProperty("useFeature_ColorHist", Boolean.toString(getParam_useFeature_ColorHist()));
        parameters.setProperty("useFeature_IMGMoments", Boolean.toString(getParam_useFeature_IMGStatistics()));
        parameters.setProperty("useFeature_LBP", Boolean.toString(getParam_useFeature_LBP()));
        parameters.setProperty("useFeature_LBP2", Boolean.toString(getParam_useFeature_LBP2()));
        parameters.setProperty("useFeature_LBP2_Radius", Integer.toString(getParam_useFeature_LBP2_Radius()));
        parameters.setProperty("useFeature_LBP2_NumPoints", Integer.toString(getParam_useFeature_LBP2_NumPoints()));
        parameters.setProperty("useFeature_LBP2_NumBins", Integer.toString(getParam_useFeature_LBP2_NumBins()));
        parameters.setProperty("useFeature_LBP2_Offset", Integer.toString(getParam_useFeature_LBP2_Offset()));
        parameters.setProperty("useFeature_LBP2_NeighborhoodSize", Integer.toString(getParam_useFeature_LBP2_NeighborhoodSize()));
        parameters.setProperty("useFeature_PHOG", Boolean.toString(getParam_useFeature_PHOG()));
        parameters.setProperty("useFeature_SURF", Boolean.toString(getParam_useFeature_SURF()));
        parameters.setProperty("useFeature_Entropy", Boolean.toString(getParam_useFeature_Entropy()));
        parameters.setProperty("useFeature_Gabor", Boolean.toString(getParam_useFeature_Gabor()));
        parameters.setProperty("useFeature_1DSignature", Boolean.toString(getParam_useFeature_1DSignature()));
        parameters.setProperty("useFeature_1DSignature_scaleInvariant", Boolean.toString(getParam_useFeature_1DSignature_scaleInvariant()));
        parameters.setProperty("useFeature_1DSignature_rotationInvariant", Boolean.toString(getParam_useFeature_1DSignature_rotationInvariant()));
        parameters.setProperty("useFeature_1DSignature_derivative", Boolean.toString(getParam_useFeature_1DSignature_derivative()));
        parameters.setProperty("useFeature_PathSegmentCode", Boolean.toString(getParam_useFeature_PathSegmentCode())); 
        parameters.setProperty("useFeature_Segmentation", Boolean.toString(getParam_useFeature_Segmentation())); 
        parameters.setProperty("useFeature_Segmentation_Graphcut", Boolean.toString(getParam_useFeature_Segmentation_Graphcut())); 
        parameters.setProperty("useFeature_FGBGColor", Boolean.toString(getParam_useFeature_FGBGColor())); 
        parameters.setProperty("useFeature_Circularity", Boolean.toString(getParam_useFeature_Circularity())); 
        parameters.setProperty("useFeature_Roundness", Boolean.toString(getParam_useFeature_Roundness()));
        parameters.setProperty("useFeature_RotatedPatches", Boolean.toString(getParam_useFeature_RotatedPatches()));
        parameters.setProperty("2StepClassification", Boolean.toString(getParam_2StepClassification()));
        parameters.setProperty("ShowPatches", Boolean.toString(getParam_ShowPatches()));
        parameters.setProperty("ShowBlur", Boolean.toString(getParam_ShowBlur()));
        parameters.setProperty("ShowSegmentations", Boolean.toString(getParam_ShowSegmentations()));
        
        return parameters;
    }

    @Override
    public String getHTMLReport(String HTMLFolderName) {
        return "";
    }

    @Override
    public void updateOptionsToTMAspot(TMAspot visible_TMAspot, List<TMAspot> selected_TMAspots) {
        if (onTheFlyLabeling != null && onTheFlyLabeling.isAlive()) {
            // Nucleus classification
            List<TMAspot> tss = new ArrayList<>();
            tss.add(manager.getVisibleTMAspot());
            performNucleusClassification(tss, false);
        }
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.updateTMAspot(manager.getVisibleTMAspot());
            manager.repaintVisibleTMAspot();
        }
    }

    @Override
    public void drawInformationPreNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
        if (isVisible()) {
            int r = getParam_patchsize()/2;
            
            // blur the image
            if (getParam_ShowBlur() && getParam_blur()>0) {
                GaussianBlur gb = new GaussianBlur();
                BufferedImage bi = ts.getBufferedImage();
                for (TMALabel tp: ts.getPoints_GoldStandard()) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        try {
                            BufferedImage patch = new BufferedImage(getParam_patchsize(), getParam_patchsize(), BufferedImage.TYPE_INT_ARGB);
                            patch.getGraphics().drawImage(bi.getSubimage((int)(tp.getX()-r), (int)(tp.getY()-r), getParam_patchsize(), getParam_patchsize()), 0, 0, null);
                            ImagePlus ip = new ImagePlus("Patch", patch);
                            gb.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
                            if ((int)(getParam_patchsize()*z)>0 && (int)(getParam_patchsize()*z)>0) {
                                g.drawImage(ip.getImage().getScaledInstance((int)(getParam_patchsize()*z), (int)(getParam_patchsize()*z), Image.SCALE_SMOOTH) , (int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), null);
                            }
                        } catch (Exception e) {

                        }
                    }
                }
            }
            
            // Draw the patches around the gold standard nuclei
            if (getParam_ShowPatches()) {
                g.setColor(Color.BLUE);
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(3);
                ((Graphics2D)g).setStroke(bs);
                for (TMALabel tp: ts.getPoints_GoldStandard()) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        double f=0.6;
                        g.drawLine((int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), (int)((tp.getX()-r+f*r)*z), (int)((tp.getY()-r)*z));
                        g.drawLine((int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), (int)((tp.getX()-r)*z), (int)((tp.getY()-r+f*r)*z));
                        g.drawLine((int)((tp.getX()-r)*z), (int)((tp.getY()+r)*z), (int)((tp.getX()-r)*z), (int)((tp.getY()+r-f*r)*z));
                        g.drawLine((int)((tp.getX()-r)*z), (int)((tp.getY()+r)*z), (int)((tp.getX()-r+f*r)*z), (int)((tp.getY()+r)*z));
                        g.drawLine((int)((tp.getX()+r)*z), (int)((tp.getY()+r)*z), (int)((tp.getX()+r-f*r)*z), (int)((tp.getY()+r)*z));
                        g.drawLine((int)((tp.getX()+r)*z), (int)((tp.getY()+r)*z), (int)((tp.getX()+r)*z), (int)((tp.getY()+r-f*r)*z));
                        g.drawLine((int)((tp.getX()+r)*z), (int)((tp.getY()-r)*z), (int)((tp.getX()+r)*z), (int)((tp.getY()-r+f*r)*z));
                        g.drawLine((int)((tp.getX()+r)*z), (int)((tp.getY()-r)*z), (int)((tp.getX()+r-f*r)*z), (int)((tp.getY()-r)*z));
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);
            }
            
            // draw the segmentations
            if (getParam_ShowSegmentations()) {
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(2);
                ((Graphics2D)g).setStroke(bs);
                AffineTransform scaling = AffineTransform.getScaleInstance(z, z);
                for (LocalizedROI lroi: segmentations) {
                    if (lroi.tp.x >= x_min && lroi.tp.y >= y_min && lroi.tp.x < x_max && lroi.tp.y < y_max) {
                        if (lroi.ts==ts) {
                            // draw the actual segmentation
                            /*g.setColor(Color.YELLOW);
                            for (int i=lroi.tp.x-r; i<lroi.tp.x+r; i++) {
                                for (int j=lroi.tp.y-r; j<lroi.tp.y+r; j++) {
                                    if (lroi.roi.contains(i-lroi.tp.x+r, j-lroi.tp.y+r)) {
                                        ((Graphics2D)g).fillRect((int)(z*i), (int)(z*j), (int)Math.max(1,z), (int)Math.max(1, z));
                                    }
                                }
                            }*/
                            // Draw the boundary
                            g.setColor(Color.RED);
                            Shape s = (Shape) scaling.createTransformedShape(lroi.p);
                            ((Graphics2D)g).draw(s);
                        }
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);
            }
        }
    }
    
    @Override
    public void drawInformationPostNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
    }
    
    @Override
    public BufferedImage showAlternativeImage(TMAspot ts) {
        return null;
    }
    
    @Override
    public void TMAspotMouseClicked(TMAspot ts, TMApoint tp, MouseEvent evt) {
        
    }
    
    /**
     * Defines what happens when the user clicks on the cross. This plugin is hidden
     * and the visible TMAspot is repainted (to remove the patch windows around the
     * training samples).
     * @return 0.
     */
    private int onClose() {
        setVisible(false);
        if (manager!=null) {
           manager.repaintVisibleTMAspot();
        }
        return 0;
    }
    
    String getClassifierAcronym() {
        if (jRadioButton1.isSelected()) {
            return "rf";
        } else if (jRadioButton2.isSelected()){
            return "libsvm";
        } else if (jRadioButton10.isSelected()){
            return "cf";
        } else if (jRadioButton15.isSelected()){
            return "linreg";
        } else if (jRadioButton16.isSelected()){
            return "logreg";
        } else {
            return "bn";
        }
    }
    
    String[] getClassifierOptions() {
        List<String> opts = new ArrayList<>();
        
        if (jRadioButton1.isSelected()) {
            //Random Forest Options
            if (!jTextField4.getText().equals("-1")) {
                opts.add("-I");
                opts.add(jTextField4.getText());
            }
        } else if (jRadioButton2.isSelected()) {
            // LIBSVM options
            opts.add("-S");
            if (jRadioButton8.isSelected()) {
                opts.add("2");
            } else {
                opts.add("0");
            }
            opts.add("-K");
            if (jRadioButton3.isSelected()) {
                opts.add("0");
            }
            else if (jRadioButton4.isSelected()) {
                opts.add("1");
                if (!jTextField5.getText().equals("-1")) {
                   opts.add("-G");
                   opts.add(jTextField5.getText());
                } else {
                   opts.add("-G");
                   opts.add("0.5");
                }  
                if (!jTextField7.getText().equals("-1")) {
                   opts.add("-R");
                   opts.add(jTextField7.getText());
                }
                if (!jTextField8.getText().equals("-1")) {
                   opts.add("-D");
                   opts.add(jTextField8.getText());
                }
            }
            else if (jRadioButton5.isSelected()) {
                opts.add("2");
                if (!jTextField9.getText().equals("-1")) {
                   opts.add("-G");
                   opts.add(jTextField9.getText());
                } else {
                   opts.add("-G");
                   opts.add("0.5");
                }    
            }
            else if (jRadioButton6.isSelected()) {
                opts.add("3");
                if (!jTextField10.getText().equals("-1")) {
                   opts.add("-G");
                   opts.add(jTextField10.getText());
                } else {
                   opts.add("-G");
                   opts.add("0.5");
                }  
                if (!jTextField11.getText().equals("-1")) {
                   opts.add("-R");
                   opts.add(jTextField11.getText());
                }
            }
            
            if (!jTextField6.getText().equals("-1")) {
                opts.add("-C");
                opts.add(jTextField6.getText());
            }
            if (jCheckBox5.isSelected()) {
                opts.add("-Z");
            }
        } else if (jRadioButton10.isSelected()) {
            // CoForest options
            if (!jTextField16.getText().equals("-1")) {
                opts.add("-I");
                opts.add(jTextField16.getText());
            }          
        }
        
        return opts.toArray(new String[opts.size()]);
    }
    
    public boolean getParam_classifierRemoveUseless() {
        return jCheckBox34.isSelected();
    }
    
    public boolean getParam_useFeature_ColorHist() {
        return jCheckBox8.isSelected();
    }
    
    public void setParam_useFeature_ColorHist(boolean b) {
        jCheckBox8.setSelected(b);
    }
    
    public boolean getParam_useFeature_IMGStatistics() {
        return jCheckBox12.isSelected();
    }
    
    public void setParam_useFeature_IMGMoments(boolean b) {
        jCheckBox12.setSelected(b);
    }
    
    public boolean getParam_useFeature_LBP() {
        return jCheckBox9.isSelected();
    }
    
    public void setParam_useFeature_LBP(boolean b) {
        jCheckBox9.setSelected(b);
    }
    
    public boolean getParam_useFeature_LBP2() {
        return jCheckBox33.isSelected();
    }
    
    public void setParam_useFeature_LBP2(boolean b) {
        jCheckBox33.setSelected(b);
    }
    
    public int getParam_useFeature_LBP2_Radius() {
        return Integer.parseInt(jTextField14.getText());
    }
    
    public void setParam_useFeature_LBP2_Radius(int b) {
        jTextField14.setText(Integer.toString(b));
    }
    
    public int getParam_useFeature_LBP2_NumPoints() {
        // 32 is the max value for NumPoints
        int value = Integer.parseInt(jTextField20.getText());
        if (value > 32) {
            value = 32;
            setParam_useFeature_LBP2_NumPoints(value);
        }
        return value;
    }
    
    public void setParam_useFeature_LBP2_NumPoints(int b) {
        // 32 is the max value for NumPoints
        jTextField20.setText(Integer.toString(Math.min(b, 32)));
    }
    
    public int getParam_useFeature_LBP2_NeighborhoodSize() {
        // 1 is the min value for NumPoints
        int value = Integer.parseInt(jTextField21.getText());
        if (value < 1) {
            value = 1;
            setParam_useFeature_LBP2_NeighborhoodSize(value);
        }
        return value;
    }
    
    public void setParam_useFeature_LBP2_NeighborhoodSize(int b) {
        // 1 is the min value for NumPoints
        jTextField21.setText(Integer.toString(Math.max(b, 1)));
    }
    
    public int getParam_useFeature_LBP2_Offset() {
        return Integer.parseInt(jTextField22.getText());
    }
    
    public void setParam_useFeature_LBP2_Offset(int b) {
        jTextField22.setText(Integer.toString(b));
    }
    
    public int getParam_useFeature_LBP2_NumBins() {
        return Integer.parseInt(jTextField23.getText());
    }
    
    public void setParam_useFeature_LBP2_NumBins(int b) {
        jTextField23.setText(Integer.toString(b));
    }
    
    public boolean getParam_useFeature_PHOG() {
        return jCheckBox11.isSelected();
    }
    
    public void setParam_useFeature_PHOG(boolean b) {
        jCheckBox11.setSelected(b);
    }
    
    public boolean getParam_useFeature_SURF() {
        return jCheckBox13.isSelected();
    }
    
    public void setParam_useFeature_SURF(boolean b) {
        jCheckBox13.setSelected(b);
    }
    
    public boolean getParam_useFeature_Entropy() {
        return jCheckBox14.isSelected();
    }
    
    public void setParam_useFeature_Entropy(boolean b) {
        jCheckBox14.setSelected(b);
    }
    
    public boolean getParam_useFeature_Gabor() {
        return jCheckBox15.isSelected();
    }
    
    public void setParam_useFeature_Gabor(boolean b) {
        jCheckBox15.setSelected(b);
    }
    
    public boolean getParam_useFeature_1DSignature() {
        return jCheckBox16.isSelected();
    }
    
    public void setParam_useFeature_1DSignature(boolean b) {
        jCheckBox16.setSelected(b);
    }

    public boolean getParam_useFeature_1DSignature_scaleInvariant() {
        return jCheckBox21.isSelected();
    }
    
    public void setParam_useFeature_1DSignature_scaleInvariant(boolean b) {
        jCheckBox21.setSelected(b);
    }
    
    public boolean getParam_useFeature_1DSignature_rotationInvariant() {
        return jCheckBox22.isSelected();
    }
    
    public void setParam_useFeature_1DSignature_rotationInvariant(boolean b) {
        jCheckBox22.setSelected(b);
    }
    
    public boolean getParam_useFeature_1DSignature_derivative() {
        return jCheckBox23.isSelected();
    }
    
    public void setParam_useFeature_1DSignature_derivative(boolean b) {
        jCheckBox23.setSelected(b);
    }
    
    public boolean getParam_useFeature_PathSegmentCode() {
        return jCheckBox17.isSelected();
    }
    
    public void setParam_useFeature_PathSegmentCode(boolean b) {
        jCheckBox17.setSelected(b);
    }
    
    public boolean getParam_useFeature_Segmentation() {
        return jCheckBox19.isSelected();
    }
    
    public void setParam_useFeature_Segmentation(boolean b) {
        jCheckBox19.setSelected(b);
    }
    
    public boolean getParam_useFeature_Segmentation_Graphcut() {
        return jRadioButton13.isSelected();
    }
    
    public void setParam_useFeature_Segmentation_Graphcut(boolean b) {
        if (b) {
            jRadioButton13.setSelected(true);
        } else {
            jRadioButton14.setSelected(true);
        }
    }
    
    public boolean getParam_useFeature_FGBGColor() {
        return jCheckBox1.isSelected();
    }
    
    public void setParam_useFeature_FGBGColor(boolean b) {
        jCheckBox1.setSelected(b);
    }
    
    public boolean getParam_useFeature_Circularity() {
        return jCheckBox30.isSelected();
    }
    
    public void setParam_useFeature_Circularity(boolean b) {
        jCheckBox30.setSelected(b);
    }
    
    public boolean getParam_useFeature_Roundness() {
        return jCheckBox31.isSelected();
    }
    
    public void setParam_useFeature_Roundness(boolean b) {
        jCheckBox31.setSelected(b);
    }
    
    public boolean getParam_useFeature_RotatedPatches() {
        return jCheckBox32.isSelected();
    }
    
    public void setParam_useFeature_RotatedPatches(boolean b) {
        jCheckBox32.setSelected(b);
    }
    
    /**
     * Returns whether or not the segmentations should be drawn in TMARKER main window.
     * @return True, if the segmentations should be drawn in TMARKER main window.
     */
    boolean getParam_ShowSegmentations() {
        return jCheckBox4.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the segmentations should be drawn in TMARKER main window.
     * @param b True, if the segmentations should be drawn in TMARKER main window.
     */
    void setParam_ShowSegmentations(boolean b) {
        jCheckBox4.setSelected(b);
    }
    
    /**
     * Returns the blurring radius for smoothing the images before feature creation.
     * @return The blurring radius for smoothing the images before feature creation.
     */
    int getParam_blur() {
        return jSlider2.getValue();
    }
    
    /**
     * Sets the blurring radius for smoothing the images before feature creation.
     * @param blur The blurring radius for smoothing the images before feature creation.
     */
    void setParam_blur(int blur) {
        jSlider2.setValue(blur);
    }
    
    /**
     * Returns whether or not the blurring should be drawn in TMARKER main window.
     * This might be slow if there are a lot of labels.
     * @return True, if the blurring should be drawn in TMARKER main window.
     */
    boolean getParam_ShowBlur() {
        return jCheckBox3.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the blurring should be drawn in TMARKER main window.
     * Showing blurring might be slow if there are a lot of labels.
     * @param b True, if the blurring should be drawn in TMARKER main window.
     */
    void setParam_ShowBlur(boolean b) {
        jCheckBox3.setSelected(b);
    }
    
    /**
     * Returns the patch size of the nucleus patches for feature creation.
     * @return The patch size of the nucleus patches for feature creation.
     */
    int getParam_patchsize() {
        return jSlider1.getValue();
    }
    
    /**
     * Sets the patch size of the nucleus patches for feature creation.
     * @param s The patch size of the nucleus patches for feature creation.
     */
    void setParam_patchsize(int s) {
        jSlider1.setValue(s);
    }
    
    /**
     * Returns whether or not the patches should be drawn in TMARKER main window.
     * @return True, if the patches should be drawn in TMARKER main window.
     */
    boolean getParam_ShowPatches() {
        return jCheckBox2.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the patches should be drawn in TMARKER main window.
     * @param b True, if the patches should be drawn in TMARKER main window.
     */
    void setParam_ShowPatches(boolean b) {
        jCheckBox2.setSelected(b);
    }
    
    /**
     * Returns true if a 2-Step classification (1. FG/BG, 2. BEN/MAL) is performed.
     * Otherwise, a 1-Step classification (BEN/MAL) is performed.
     * @return True if a 2-Step classification (1. FG/BG, 2. BEN/MAL) is performed.
     */
    boolean getParam_2StepClassification() {
        return jRadioButton12.isSelected();
    }
    
    /**
     * Sets the parameter if a 2-Step classification (1. FG/BG, 2. BEN/MAL) is performed.
     * @param b True if a 2-Step classification (1. FG/BG, 2. BEN/MAL) is performed. False, if a 1-Step classification (BEN/MAL) is performed.
     */
    void setParam_2StepClassification(boolean b) {
        jRadioButton11.setSelected(!b);
        jRadioButton12.setSelected(b);
    }
    
    /**
     * Learns the two classifiers classifier_FG_BG and classifier_BEN_MAL on all selected TMAspots.
     * If a 1-Step classification is selected by the user, the first classifier will be null.
     * There has to be at least one trainings point for each relevant class on the selected TMAspots.
     * Otherwise, nothing will be created and a popup window will appear to inform the user.
     * @param tss The TMAspots which provide training labels.
     */
    void performClassifierCreation(List<TMAspot> tss) {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        boolean withDetector = getParam_2StepClassification();
        
        Instances inst_detect = null;
        Instances inst_class = null;
        for (int i=0; i<tss.size(); i++) {
            TMAspot ts = tss.get(i);
            List<Instances> insts = getTrainingInstances(ts);
            if (i==0) {
                if (withDetector) {
                    inst_detect = new Instances(insts.get(0));
                }
                inst_class = new Instances(insts.get(1));
            } else {
                if (withDetector) {
                    for (int j=0;
                        j<insts.get(0).numInstances(); j++) {
                        Instance inst = insts.get(0).instance(j);
                        inst.setDataset(inst_detect);
                        inst_detect.add(inst);
                    }
                }
                for (int j=0; j<insts.get(1).numInstances(); j++) {
                    Instance inst = insts.get(1).instance(j);
                    inst.setDataset(inst_class);
                    inst_class.add(inst);
                }
            }
        }
        try {
            manager.setProgressbar(85);
            if (withDetector) {
                manager.setStatusMessageLabel("Train FG / BG Classifier (with " + inst_detect.numInstances() + " samples, " + inst_detect.numAttributes() + " attributes and " + inst_detect.numClasses() + " classes)...");
                classifier_FG_BG = SLICsuperpixels.trainClassifier(inst_detect, getClassifierAcronym(), getClassifierOptions(), getParam_classifierRemoveUseless());
            } 
            manager.setStatusMessageLabel("Train BEN / MAL Classifier (with " + inst_class.numInstances() + " samples, " + inst_class.numAttributes() + " attributes and " + inst_class.numClasses() + " classes)..."); manager.setProgressbar(95);
            classifier_BEN_MAL = SLICsuperpixels.trainClassifier(inst_class, getClassifierAcronym(), getClassifierOptions(), getParam_classifierRemoveUseless());
            manager.setStatusMessageLabel(""); manager.setProgressbar(0);
            jButton30.setEnabled(true);
            setClassifierDescription(classifier_BEN_MAL);
        } catch (Exception e) {
            manager.setStatusMessageLabel(e.getMessage()); manager.setProgressbar(0);
            if (withDetector) {
                classifier_FG_BG = null;
            }
            classifier_BEN_MAL = null;
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    /**
     * Returns the training samples of a given TMAspot in ARFF format (for weka processing).
     * Two instances are returned: First, the instances for foreground/background classification (might only
     * consist of foreground samples, if no background is annotated). Second, the instances for benign and malignant
     * nucleus classification.
     * @param ts The TMAspot on which the annotated gold-standard labels are collected.
     * @return Two ARFF format instances. First for foreground/background classification (can be ignored if a
     * 1-step classification is selected). Second for benign/malignant nucleus classification.
     */
    private List<Instances> getTrainingInstances(TMAspot ts) {
        // I_col
        BufferedImage I = ts.getBufferedImage();
        BufferedImage I_col = new BufferedImage(I.getWidth(), I.getHeight(), BufferedImage.TYPE_INT_ARGB);  
        Graphics g = I_col.getGraphics();  
        g.drawImage(I, 0, 0, null);  
        g.dispose();

        //Blur the image for smoother features
        ImagePlus ip = new ImagePlus(" ", I_col);
        GaussianBlur blur = new GaussianBlur();
        blur.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
        I_col = ip.getBufferedImage();

        // I_gray
        BufferedImage I_gray = new BufferedImage(I_col.getWidth(), I_col.getHeight(), BufferedImage.TYPE_BYTE_GRAY);  
        g = I_gray.getGraphics();  
        g.drawImage(I_col, 0, 0, null);  
        g.dispose();
        
        // create arff data
        FastVector atts_detect = new FastVector();
        FastVector atts_class = new FastVector();
        FastVector attVals_detect = new FastVector();
        FastVector attVals_class = new FastVector();
        attVals_detect.addElement(TMALabel.LABEL_BG_STRING);
        attVals_detect.addElement(TMALabel.LABEL_FG_STRING);
        attVals_class.addElement(TMALabel.LABEL_NEG_STRING);
        attVals_class.addElement(TMALabel.LABEL_POS_STRING);
        atts_detect.addElement(new Attribute("class", attVals_detect));
        atts_class.addElement(new Attribute("class", attVals_class));

        double[] f = Superpixel.getFeaturevectorWithLabel(this, null, null);
        for (int i=1; i<f.length; i++) {
            atts_detect.addElement(new Attribute(Integer.toString(i)));
            atts_class.addElement(new Attribute(Integer.toString(i)));
        }
        
        List<TMApoint> tps = ts.getPoints_GoldStandard();
        
        Instances detection_data = new Instances("Nucleus Detection", atts_detect, tps.size());
        detection_data.setClassIndex(0);
        Instances classifiction_data = new Instances("Nucleus Classification", atts_class, tps.size());
        classifiction_data.setClassIndex(0);
        
        int n_rotatedFeatures = 1;
        int n_flippedFeatures = 1;
        if (getParam_useFeature_RotatedPatches()) {
            n_rotatedFeatures = 4;
            n_flippedFeatures = 3;
        }
        segmentations.clear();
        for (int i = 0; i < tps.size(); i++) {
            if (i%10==0) {
                manager.setStatusMessageLabel(getName() + ": Transform Labels (" + Integer.toString(i) + "/" + Integer.toString(tps.size()) + ") ...");
                manager.setProgressbar(10 + (int)((1.0*i/tps.size())*70));
            }
            Rectangle rect = PatchRectangle(tps.get(i), getParam_patchsize());
            if (rect.x>=0 && rect.y>=0 && rect.x + rect.width<I_col.getWidth() && rect.y + rect.height<I_col.getHeight()) {
                List<Object> patches = new ArrayList<>(3);
                BufferedImage bi_col = I_col.getSubimage(rect.x, rect.y, rect.width, rect.height);
                BufferedImage bi_gray = I_gray.getSubimage(rect.x, rect.y, rect.width, rect.height);
                ROI roi; 
                if (getParam_useFeature_Segmentation()) {
                    roi = PatchToShape(bi_gray, ts, getParam_useFeature_Segmentation_Graphcut(), 0);
                    segmentations.add(new LocalizedROI(ts, tps.get(i), roi, getParam_patchsize()/2));
                } else {
                    roi = null;
                }
                
                for (int k = 0; k < n_rotatedFeatures; k++) { // for (int k = 0; k < 4; k++) { // for 4 rotations of the patch
                    AffineTransform tx_rot = AffineTransform.getRotateInstance(k * Math.PI / 2.0, bi_col.getWidth()/2, bi_col.getHeight()/2);
                    AffineTransformOp op_rot = new AffineTransformOp(tx_rot, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
                    BufferedImage bi_col_rot = op_rot.filter(bi_col, null);
                    BufferedImage bi_gray_rot = op_rot.filter(bi_gray, null);
                    ROI roi_rot = roi!=null ? roi.transform(tx_rot) : null;

                    for (int m = 0; m < n_flippedFeatures; m++) { //for (int m = 0; m < 3; m++) { // for 3 flips (normal, horizontal flip, vertical flip) of the patch
                        if (k<2 || m==0) { // not every combination is needed of rotation and horizontal or vertical flip.
                            patches.clear();
                            AffineTransform tx_flip;
                            if (m == 0) {
                                tx_flip = AffineTransform.getScaleInstance(1, 1);
                            } else if (m == 1) {
                                tx_flip = AffineTransform.getScaleInstance(1, -1);
                                tx_flip.translate(0, -bi_col_rot.getHeight(null));
                            } else {
                                tx_flip = AffineTransform.getScaleInstance(-1, 1);
                                tx_flip.translate(-bi_col_rot.getWidth(null), 0);
                            }
                            AffineTransformOp op_flip = new AffineTransformOp(tx_flip, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
                            BufferedImage bi_col_rot_flip = op_flip.filter(bi_col_rot, null);
                            BufferedImage bi_gray_rot_flip = op_flip.filter(bi_gray_rot, null);
                            ROI roi_rot_flip = roi_rot!=null ? roi_rot.transform(tx_flip) : null;

                            patches.add(bi_col_rot_flip);
                            patches.add(bi_gray_rot_flip);
                            patches.add(roi_rot_flip);
                            double[] vals = Superpixel.getFeaturevectorWithLabel(this, patches, null);
                            if (tmarker.DEBUG > 4) {
                                System.out.println("Feature vector:");
                                for (double d : vals) {
                                    System.out.print(d + " ");
                                }
                                System.out.println();
                            }
                            
                            if (tmarker.DEBUG > 5) {
                                String classString = (tps.get(i).getLabel() == TMALabel.LABEL_BG ? TMALabel.LABEL_BG_STRING : (tps.get(i).getLabel() == TMALabel.LABEL_UNK ? TMALabel.LABEL_FG_STRING : (tps.get(i).getLabel() == TMALabel.LABEL_POS ? TMALabel.LABEL_POS_STRING : TMALabel.LABEL_NEG_STRING)));
                                Misc.writeImage(bi_col_rot_flip, manager.getTmpDir() + File.separator + classString + "_" + i + "_" + k + "_" + m + "_img.PNG");
                                if (roi_rot_flip!=null) Misc.writeROI(roi_rot_flip, manager.getTmpDir() + File.separator + classString + "_" + i + "_" + k + "_" + m + "_roi.PNG");
                            }
                            Instance inst_detect = new Instance(1, vals);
                            inst_detect.setDataset(detection_data);
                            inst_detect.setClassValue((tps.get(i).getLabel() == TMALabel.LABEL_BG ? detection_data.classAttribute().indexOfValue(TMALabel.LABEL_BG_STRING) : detection_data.classAttribute().indexOfValue(TMALabel.LABEL_FG_STRING)));
                            detection_data.add(inst_detect);
                            if (tps.get(i).getLabel() == TMALabel.LABEL_NEG || tps.get(i).getLabel() == TMALabel.LABEL_POS) {
                                Instance inst_class = new Instance(1.0, vals);
                                inst_class.setDataset(classifiction_data);
                                inst_class.setClassValue((tps.get(i).getLabel() == TMALabel.LABEL_NEG ? classifiction_data.classAttribute().indexOfValue(TMALabel.LABEL_NEG_STRING) : classifiction_data.classAttribute().indexOfValue(TMALabel.LABEL_POS_STRING)));
                                classifiction_data.add(inst_class);
                            }
                        }
                    }
                }
            }
        }
        List<Instances> patch_instances = new ArrayList<>(2);
        patch_instances.add(detection_data);
        patch_instances.add(classifiction_data);
        manager.setStatusMessageLabel(""); manager.setProgressbar(0);
        return patch_instances;
    }
    
    /**
     * Segments the object in the middle of the patch and returns its shape.
     * @param bi The image patch. The object (i.e. nucleus) is expected to be in the middle.
     * @param ts The TMAspot to which the patch belongs (only used for superpixel based segmentation and for accessing the temp directory if DEBUG>5).
     * @param graphcut If true, a graphcut based segmentation is used, otherwise a superpixel based.
     * @param blurring Blurring radius before processing for smoothing.
     * @return A ROI with same shape as the segmented shape. The ROI has the same bounding box size as bi.
     */
    private static ROI PatchToShape(BufferedImage bi, TMAspot ts, boolean graphcut, int blurring) {
        try {
            //// CREATE BLACK WHITE IMAGE
            BufferedImage BW = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
            
            // SEGMENTATION WITH GRAPHCUT
            if (graphcut) {
                /*
                Maxflow mf = new Maxflow();
                mf.inputImageCapacity(bi, blurring);
                int[] foreground = mf.runMF();
                if (foreground!=null) {
                    int[] sub = new int[2];
                    for (int i=1; i<foreground.length-1; i++) {
                        Misc.Ind2sub(sub, foreground[i]-1, bi.getWidth());
                        if (tmarker.DEBUG > 5) { System.out.println(sub[0] + " " + Integer.toString(sub[1])); }
                        BW.setRGB(sub[0], sub[1], 0xFFFFFFFF);
                    }
                /*/
                // Grayscale the image
                BufferedImage bi_bw = Misc.convertToGrayscale(bi);
                ImagePlus ip = new ImagePlus(" ", bi_bw);
                // blur the image
                if (blurring>0) {
                    GaussianBlur gb = new GaussianBlur();
                    gb.blurGaussian(ip.getProcessor(), blurring, blurring, 0.02);
                }
                // normalize
                ip.getProcessor().setMinAndMax(ip.getStatistics().min, ip.getStatistics().max);
                int w = bi_bw.getWidth();
                int h = bi_bw.getHeight();

                GraphCut gc = new GraphCut(w*h, (w-1)*(h-1)*2+w+h-2);
                // set the terminal weights
                int i=0;
                float factor; // The factor for roundish shape: the more in the middle of the patch, the higher the factor
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        factor = Math.min(1,(float) Math.pow(Math.sqrt(Math.pow(w / 2 - x, 2) + Math.pow(h / 2 - y, 2)) / ((w + h) / 4), 2));
                        gc.setTerminalWeights(i++, (1-factor)*(255-ip.getPixel(x, y)[0]), factor*ip.getPixel(x, y)[0]);
                        //int rgb = 0x000000FF & (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //BW.setRGB(x, y, rgb);
                    }
                }
                //Misc.writeImage(BW, ts.getTmpDir() + File.separator + "PatchROItmp.PNG");
                
                // set the internal weights. Nodes are incrementally counted column by column.
                i=0;
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        if (x<w-1) {
                            gc.setEdgeWeight(i, i+h, Math.abs(ip.getPixel(x, y)[0]-ip.getPixel(x+1, y)[0]));
                        }
                        if (y<h-1) {
                            gc.setEdgeWeight(i, i+1, Math.abs(ip.getPixel(x, y)[0]-ip.getPixel(x, y+1)[0]));
                        }
                        i++;
                    }
                }
                
                gc.computeMaximumFlow(graphcut, null);
                
                int[] sub = new int[2];
                for (i=0; i<gc.getNumNodes(); i++) {
                    if (gc.getTerminal(i) == Terminal.FOREGROUND) {
                        Misc.Ind2sub(sub, i, bi.getHeight());
                        BW.setRGB(sub[1], sub[0], 0xFFFFFFFF);
                    }
                }
                //*/
                
                ConnectComponent cc = new ConnectComponent();
                int[] img = new int[w*h];
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        img[Misc.Sub2ind(x, y, w)] = BW.getRGB(x, y);
                    }
                }
                int[] labels = cc.labeling(img, new Dimension(w, h), true);
                int label_center = labels[Misc.Sub2ind(w/2, h/2, w)];
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        if (labels[Misc.Sub2ind(x, y, w)]!=label_center) {
                            BW.setRGB(x, y, 0x0);
                        }
                    }
                }
            } else {
                // SEGMENTATION WITH SUPERPIXELS
                SLICsuperpixels slicspx = new SLICsuperpixels();
                slicspx.verbose = false;
                slicspx.setTMASpot(ts);
                SLICsuperpixels.run(slicspx, bi, 9, 40, true, blurring);
                Rectangle rect = new Rectangle(bi.getWidth(), bi.getHeight());
                int mid = Misc.Sub2ind(bi.getWidth()/2, bi.getHeight()/2, bi.getWidth());
                for (Superpixel sp : slicspx.getSuperpixels()) {
                    if (!sp.touchesRectangleBorder(rect) || sp.contains(mid)) {
                        sp.setLabel(TMALabel.LABEL_POS);
                        sp.setProbability(1);
                    }
                }
                SLIC.DrawContoursAroundSegments(BW.getGraphics(), bi, slicspx.getSuperpixels(), false, Color.BLACK, true, Color.WHITE, false, Color.BLACK, false, Color.BLACK, 1, new Rectangle(0, 0, BW.getWidth(), BW.getHeight()));
            }
            
            // Black White Image to ROI
            ROI roi = new ROI(BW, 1);
            System.setProperty("com.sun.media.jai.disableMediaLib", "true");
            // run this otherwise roi.contains() returns true always.
            for (int i=0; i<BW.getWidth(); i++) {
                for (int j=0; j<BW.getHeight(); j++) {
                    if (roi.contains(i,j)) {
                    }
                }            
            }
            // END run this
            
            if (tmarker.DEBUG>5) {
                for (int j=0; j<bi.getHeight(); j++) {
                    System.out.println("");
                    for (int i=0; i<bi.getWidth(); i++) {
                        if (roi.contains(i,j)) {
                                System.out.print("1");
                            } else {
                                System.out.print(".");
                            }
                    }
                }
                Misc.writeImage(BW, ts.getTmpDir() + File.separator + "PatchROI.PNG");
                Misc.writeImage(bi, ts.getTmpDir() + File.separator + "Patch.PNG");
            }
            
            return roi;
        } catch (Exception ex) {
            if (tmarker.DEBUG>0) {
                Logger.getLogger(TMAspot.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;
        }
    }
    
    /**
     * Returns a new Rectangle with center on the middle of tp and with and height of patchsize.
     * @param tp The nucleus over which a patch should be created.
     * @param patchsize The size of the patch.
     * @return A new quadratic Rectangle.
     */
    private static Rectangle PatchRectangle(TMALabel tp, int patchsize) {
        int p_half = patchsize/2;
        return (new Rectangle(tp.x-p_half, tp.y-p_half, patchsize, patchsize));
    }
    
    /**
     * Creates a set of patches over the TMAspot image.
     * @param ts The TMAspot of which patches should be extracted.
     * @param patchsize The patch size in pixels.
     * @param delta The distance between the overlapping patches. Use 1 for every pixel.
     * @return A list of patches (Rectangle coordinates). Note that patches which would go beyond the image borders are not included.
     */
    private static List<Rectangle> PatchizeImage(TMAspot ts, int patchsize, int delta) {
        List<Rectangle> patches = new ArrayList<>();
        int p_half = patchsize/2;
        BufferedImage I = ts.getBufferedImage();
        int w = I.getWidth();
        int h = I.getHeight();
        for (int i=delta-1; i<w; i+=delta) {
            if (i-p_half>=0 && i-p_half+patchsize<w) {
                for (int j=delta-1; j<h; j+=delta) {
                    if (j-p_half>=0 && j-p_half+patchsize<h) {
                        patches.add(new Rectangle(i-p_half, j-p_half, patchsize, patchsize));
                    }
                }
            }
        }
        if (tmarker.DEBUG>5) {
            for (int i=0; i<patches.size(); i++) {
                try {
                    Logger.getLogger(TMAspot.class.getName()).log(Level.INFO, "Writing Patch Image " + ts.getTmpDir() + File.separator + "Patch_" + i + ".png");
                    File file = new File(ts.getTmpDir() + File.separator + "Patch_" + i + ".png");
                    file.deleteOnExit();
                    ImageIO.write(I.getSubimage(patches.get(i).x, patches.get(i).y, patches.get(i).width, patches.get(i).height), "PNG", file);
                } catch (IOException ex) {
                    Logger.getLogger(TMAspot.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return patches;
    }
    
    /**
     * Creates a set of patches over all nuclei with given label.
     * @param ts The TMAspot of which patches should be extracted.
     * @param patchsize The patch size in pixels.
     * @param label The label of the considered nuclei (e.g. TMAspot.POS).
     * @return A list of patches (Rectangle coordinates). Note that patches which would go beyond the image borders are not included.
     */
    private static List<Rectangle> PatchizeNuclei(TMAspot ts, int patchsize, byte label) {
        List<Rectangle> patches = new ArrayList<>();
        List<TMApoint> tps = ts.getPoints(label);
        int w = ts.getWidth();
        int h = ts.getHeight();
        int p_half = patchsize/2;
        for (TMApoint p : tps) {
            if (p.x-p_half>=0 && p.x-p_half+patchsize<w) {
                if (p.y-p_half>=0 && p.y-p_half+patchsize<h) {
                    patches.add(new Rectangle(p.x-p_half, p.y-p_half, patchsize, patchsize));
                }
            }
        }
        if (tmarker.DEBUG>5) {
            BufferedImage I = ts.getBufferedImage();
            for (int i=0; i<patches.size(); i++) {
                try {
                    Logger.getLogger(TMAspot.class.getName()).log(Level.INFO, "Writing Patch Image " + ts.getTmpDir() + File.separator + "Patch_" + i + ".png");
                    File file = new File(ts.getTmpDir() + File.separator + "Patch_" + i + ".png");
                    file.deleteOnExit();
                    ImageIO.write(I.getSubimage(patches.get(i).x, patches.get(i).y, patches.get(i).width, patches.get(i).height), "PNG", file);
                } catch (IOException ex) {
                    Logger.getLogger(TMAspot.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return patches;
    }
    
    /**
     * Saves the nuclei as patches on hard disk for all selected TMAspots.
     * Patches are saved in a temporary folder (experimantal use).
     * @param patchsize The patchsize around the nuclei.
     */
    private void performSaveAsPatches(int patchsize) {
        List<TMAspot> tss = manager.getSelectedTMAspots();
        for (TMAspot tp : tss) {
            PatchizeNuclei(tp, patchsize, TMALabel.LABEL_POS);
            PatchizeNuclei(tp, patchsize, TMALabel.LABEL_NEG);
            PatchizeNuclei(tp, patchsize, TMALabel.LABEL_UNK);
            PatchizeNuclei(tp, patchsize, TMALabel.LABEL_BG);
        }
    }
    
    /**
     * Saves a reguular grid as patches on hard disk for all selected TMAspots.
     * Patches are saved in a temporary folder (experimantal use).
     * @param patchsize The patchsize around the grid points.
     * @param delta The grid size.
     */
    private void performSaveAsGridPatches(int patchsize, int delta) {
        List<TMAspot> tss = manager.getSelectedTMAspots();
        for (TMAspot tp : tss) {
            PatchizeImage(tp, patchsize, delta);
        }
    }

    /**
     * Saves the current foreground / background classifier and the current 
     * benign / malignant classifier on hard drive.
     * @param file The file to be written.
     */
    private void saveClassifier(File file) {
        String oldStatusText = manager.getStatusMessageLabelText();
        int oldProgress = manager.getProgressbarValue();
        manager.setStatusMessageLabel("Saving File " + file.getName());
        try {
            OutputStream os = new BufferedOutputStream(new FileOutputStream(file));
            ObjectOutput ii = new ObjectOutputStream( os );
            ArrayList<Object> classifiers = new ArrayList<>(3);
            classifiers.add(getParameters());
            classifiers.add(classifier_FG_BG);
            classifiers.add(classifier_BEN_MAL);
            ii.writeObject(classifiers);
            ii.close();
            os.close();
        } catch (Exception ex) {
            if (tmarker.DEBUG>0) {
                Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.WARNING, ex.getMessage());
            }
            Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.WARNING, "Error Saving File " + file.getName());
        } finally {
            manager.setStatusMessageLabel(oldStatusText);
            manager.setProgressbar(oldProgress);
        }
    }

    /**
     * Loads a foreground / background classifier and a 
     * benign / malignant classifier from hard drive.
     * @param file The file to be loaded.
     */
    private void openClassifier(File file) {
        if (file!=null) {
            String oldStatusText = manager.getStatusMessageLabelText();
            int oldProgress = manager.getProgressbarValue();
            manager.setStatusMessageLabel("Reading File " + file.getName());
            try {
                InputStream is = new BufferedInputStream(new FileInputStream(file));
                ObjectInput ii = new ObjectInputStream( is );
                ArrayList<Object> classifiers = (ArrayList<Object>) ii.readObject();
                ii.close();
                is.close();

                Properties params = (Properties) classifiers.get(0);
                setParameters(params);
                classifier_FG_BG = (Classifier) classifiers.get(1);
                classifier_BEN_MAL = (Classifier) classifiers.get(2);

                if (classifier_BEN_MAL != null) {
                    jButton30.setEnabled(true);
                }
                setClassifierDescription(classifier_BEN_MAL);
            } catch (Exception ex) {
                if (tmarker.DEBUG>0) {
                    Logger.getLogger(CancerNucleusClassification.class.getName()).log(java.util.logging.Level.WARNING, ex.getMessage());
                }
                JOptionPane.showMessageDialog(this, "Could not open file " + file.getName(), "Error Loading File", JOptionPane.ERROR_MESSAGE);
            } finally {
                manager.setStatusMessageLabel(oldStatusText);
                manager.setProgressbar(oldProgress);
            }
        }
    }
    
    /**
     * Performs the nucleus classification on detected (non-goldstandard) TMALabels.
     * If 1-step is selected, only the classifier benign/malignant is used.
     * If 2-step is selected, the classifier foreground/background is used beforehand.
     * @param tss The TMAspots to be processed.
     */
     private void performNucleusClassification(List<TMAspot> tss, boolean asParallelThread) {
        if (asParallelThread) {
            if (thread!=null) {
                if (thread.isAlive()) {
                    thread.interrupt();
                }
            }
            thread = new CancerNucleusClassificationThread((TMARKERPluginManager) manager, this, tss, classifier_FG_BG, classifier_BEN_MAL, getParam_2StepClassification());
            thread.start();
        } else {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            for (TMAspot ts: tss) {
               if (getParam_2StepClassification()) {
                   classifyNuclei(this, ts, classifier_FG_BG, true, manager, asParallelThread);
               }
               classifyNuclei(this, ts, classifier_BEN_MAL, false, manager, asParallelThread);
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    /**
     * Classifies the estimated (non-goldstandard) TMALabels on a given TMAspot with a given classifer.
     * @param ts The TMAspot whose TMApoints (nuclei) are to be classified.
     * @param classifier The classifier to be used.
     * @param foregroundDetection If true, the classifer is interpreted as foreground / background classifier. Nuclei are classified as TMALabel.LABEL_BG or LABEL_UNK.
     * Otherwise, the classifier is used as benign / malignant classifier and nuclei will have the label LABEL_NEG and LABEL_POS.
     * @param asParallelThread If true, the progressbar is not updated (it is updated in the thread).
     */
    static void classifyNuclei(CancerNucleusClassification cnc, TMAspot ts, Classifier classifier, boolean foregroundDetection, PluginManager manager, boolean asParallelThread) {
        if (classifier != null && ts != null) {
            List<TMApoint> tps;
            if (foregroundDetection) {
                tps = ts.getPoints_Estimated(); // all estimated points for foreground background classification.
            } else {
                tps = ts.getPoints_Estimated(TMALabel.LABEL_POS); // omit BG points for benign / malignant classification.
                tps.addAll(ts.getPoints_Estimated(TMALabel.LABEL_NEG));
                tps.addAll(ts.getPoints_Estimated(TMALabel.LABEL_UNK));
            }
            if (!tps.isEmpty()) {
                if (!asParallelThread) {
                    if (foregroundDetection) {
                        manager.setStatusMessageLabel(cnc.getName() + ": Classify Foreground / Background ...");
                    } else {
                        manager.setStatusMessageLabel(cnc.getName() + ": Classify Malignant / Benign Nuclei ...");
                    }
                    manager.setProgressbar(10);
                }

                // create arff data
                FastVector atts = new FastVector();
                FastVector attVals = new FastVector();
                if (foregroundDetection) {
                    attVals.addElement(TMALabel.LABEL_BG_STRING);
                    attVals.addElement(TMALabel.LABEL_FG_STRING);
                } else {
                    attVals.addElement(TMALabel.LABEL_NEG_STRING);
                    attVals.addElement(TMALabel.LABEL_POS_STRING);
                }
                atts.addElement(new Attribute("class", attVals));

                double[] f = Superpixel.getFeaturevectorWithLabel(cnc, null, null);
                for (int i=1; i<f.length; i++) {
                    atts.addElement(new Attribute(Integer.toString(i)));
                }

                Instances dataset = new Instances("Nucleus", atts, tps.size());
                dataset.setClassIndex(0);

                // I_col
                BufferedImage I = ts.getBufferedImage();
                BufferedImage I_col = new BufferedImage(I.getWidth(), I.getHeight(), BufferedImage.TYPE_INT_ARGB);  
                Graphics g = I_col.getGraphics();  
                g.drawImage(I, 0, 0, null);  
                g.dispose();

                //Blur the image for smoother features
                ImagePlus ip = new ImagePlus(" ", I_col);
                GaussianBlur blur = new GaussianBlur();
                blur.blurGaussian(ip.getProcessor(), cnc.getParam_blur(), cnc.getParam_blur(), 0.02);
                I_col = ip.getBufferedImage();

                // I_gray
                BufferedImage I_gray = new BufferedImage(I_col.getWidth(), I_col.getHeight(), BufferedImage.TYPE_BYTE_GRAY);  
                g = I_gray.getGraphics();  
                g.drawImage(I_col, 0, 0, null);  
                g.dispose();
                try {
                    for (int i=0; i<tps.size(); i++) {
                        if (!asParallelThread && i%10==0) {
                            if (foregroundDetection) {
                                manager.setStatusMessageLabel(cnc.getName() + ": Classify Classify Foreground / Background (" + Integer.toString(i) + "/" + Integer.toString(tps.size()) + ") ...");
                            } else {
                                manager.setStatusMessageLabel(cnc.getName() + ": Classify Classify Malignant / Benign Nuclei (" + Integer.toString(i) + "/" + Integer.toString(tps.size()) + ") ...");
                            }
                            manager.setProgressbar((int)(10 + (1.0*i/tps.size())*90));
                        }
                        TMApoint tp = tps.get(i);
                        Rectangle rect = PatchRectangle(tp, cnc.getParam_patchsize());
                        if (rect.x>=0 && rect.y>=0 && rect.x + rect.width<I_col.getWidth() && rect.y + rect.height<I_col.getHeight()) {
                            List<Object> patches = new ArrayList<>(3);
                            BufferedImage patch_col = I_col.getSubimage(rect.x, rect.y, rect.width, rect.height);
                            BufferedImage patch_gray = I_gray.getSubimage(rect.x, rect.y, rect.width, rect.height);
                            ROI roi; 
                            if (cnc.getParam_useFeature_Segmentation()) {
                                roi = PatchToShape(patch_col, ts, cnc.getParam_useFeature_Segmentation_Graphcut(), 0);
                            } else {
                                roi = null;
                            }

                            // Trick to get better BufferedImages with own data. Otherwise, image Histogram might not work properly
                            AffineTransform tx_rot = AffineTransform.getRotateInstance(0, patch_col.getWidth()/2, patch_col.getHeight()/2);
                            AffineTransformOp op_rot = new AffineTransformOp(tx_rot, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
                            patch_col = op_rot.filter(patch_col, null);
                            patch_gray = op_rot.filter(patch_gray, null);
                            roi = roi!=null ? roi.transform(tx_rot) : null;

                            patches.add(patch_col);
                            patches.add(patch_gray);
                            patches.add(roi);
                            double[] vals = Superpixel.getFeaturevectorWithLabel(cnc, patches, null);
                            if (tmarker.DEBUG > 4) {
                                System.out.println("Feature vector:");
                                for (double d: vals) {
                                    System.out.print(d + " ");
                                }
                                System.out.println();
                            }
                            Instance inst = new Instance(1.0, vals);
                            inst.setDataset(dataset);
                            inst.setClassValue(classifier.classifyInstance(inst));
                            if (foregroundDetection) {
                                if (inst.classValue()==dataset.classAttribute().indexOfValue(TMALabel.LABEL_BG_STRING)) {
                                    tp.setLabel(TMALabel.LABEL_BG);
                                } else if (inst.classValue()==dataset.classAttribute().indexOfValue(TMALabel.LABEL_FG_STRING)) {
                                    tp.setLabel(TMALabel.LABEL_UNK);
                                }
                            } else {
                                if (inst.classValue()==dataset.classAttribute().indexOfValue(TMALabel.LABEL_NEG_STRING)) {
                                    tp.setLabel(TMALabel.LABEL_NEG);
                                } else if (inst.classValue()==dataset.classAttribute().indexOfValue(TMALabel.LABEL_POS_STRING)) {
                                    tp.setLabel(TMALabel.LABEL_POS);
                                }
                            }
                        }
                    }
                    if (!asParallelThread) {
                        manager.setStatusMessageLabel(cnc.getName() + ": Done.");
                        manager.setProgressbar(100);
                    } 
                    if (foregroundDetection) {
                        ts.deleteAllPoints(TMALabel.LABEL_BG, false);
                    }
                    
                    manager.updateTMAspot(ts, ts == ts.getCenter().getVisibleTMAspot());
                    
                    ts.addProperty("TMARKERStainingEstimation", Integer.toString(ts.getStainingEstimation()));
                    
                } catch (Exception ex) {
                    if (tmarker.DEBUG>3) {
                        Logger.getLogger(TMAspot.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (!asParallelThread) {
                    manager.setStatusMessageLabel("");
                    manager.setProgressbar(0);
                }
            }
        }
    }
    
    /**
     * Sets the user readable classifier description on jLabel20. Writes " - No Classifier - " if 
     * cl is null.
     * @param cl The classifier whose parameters are written.
     */
    private void setClassifierDescription(Classifier cl) {
        if (cl==null) {
            jLabel20.setForeground(Color.RED);
            jLabel20.setText(" - No Classifier - ");
        } else {
            jLabel20.setForeground(Color.GREEN.darker());
            String text;
            if (classifier_FG_BG == null) {
                text = " 1-Step";
            } else {
                text = " 2-Step";
            }
            text += ", " + cl.getClass().getSimpleName();
            for (String s: cl.getOptions()) {
                text += ", " + s;
            }
            jLabel20.setText(text);
        }
    }
    
    /**
     * Returns the user readable classifier description on jLabel20. " - No Classifier - " if 
     * there is no classifier currently.
     * @return The classifier description.
     */
    private String getClassifierDescription() {
        return jLabel20.getText();
    }

    private void performSegmentation() {
        List<TMAspot> tss = manager.getSelectedTMAspots();
        segmentations.clear();
        for (TMAspot ts: tss) {
            // I_col
            BufferedImage I = ts.getBufferedImage();
            BufferedImage I_col = new BufferedImage(I.getWidth(), I.getHeight(), BufferedImage.TYPE_INT_ARGB);  
            Graphics g = I_col.getGraphics();  
            g.drawImage(I, 0, 0, null);  
            g.dispose();

            //Blur the image for smoother features
            ImagePlus ip = new ImagePlus(" ", I_col);
            GaussianBlur blur = new GaussianBlur();
            blur.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
            I_col = ip.getBufferedImage();

            // I_gray
            BufferedImage I_gray = new BufferedImage(I_col.getWidth(), I_col.getHeight(), BufferedImage.TYPE_BYTE_GRAY);  
            g = I_gray.getGraphics();  
            g.drawImage(I_col, 0, 0, null);  
            g.dispose();

            List<TMApoint> tps = ts.getPoints();
            for (int i = 0; i < tps.size(); i++) {
                if (i%10==0) {
                    manager.setStatusMessageLabel(getName() + ": Transform Labels (" + Integer.toString(i) + "/" + Integer.toString(tps.size()) + ") ...");
                    manager.setProgressbar(10 + (int)((1.0*i/tps.size())*70));
                }
                Rectangle rect = PatchRectangle(tps.get(i), getParam_patchsize());
                if (rect.x>=0 && rect.y>=0 && rect.x + rect.width<I_col.getWidth() && rect.y + rect.height<I_col.getHeight()) {
                    BufferedImage bi_gray = I_gray.getSubimage(rect.x, rect.y, rect.width, rect.height);
                    ROI roi; 
                    if (getParam_useFeature_Segmentation()) {
                        roi = PatchToShape(bi_gray, ts, getParam_useFeature_Segmentation_Graphcut(), 0);
                        segmentations.add(new LocalizedROI(ts, tps.get(i), roi, getParam_patchsize()/2));
                    }
                }
            }
        }
    }

    /**
     * Saves the black white mask of nucleus segmentation as PNG File. The file can be chosen
     * with the FileChooser (pops up).
     */
    private void saveSegmentationMask() {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose a Folder to Save the Masks");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String foldername = chooser.getSelectedFile().getPath() + File.separator;
            
            List<TMAspot> tss = manager.getSelectedTMAspots();
            for (TMAspot ts: tss) {
                BufferedImage bi = new BufferedImage(ts.getWidth(), ts.getHeight(), BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = bi.createGraphics();

                // draw the segmentations
                g.setColor(Color.RED);
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(2);
                ((Graphics2D)g).setStroke(bs);
                AffineTransform scaling = AffineTransform.getScaleInstance(1, 1);
                for (LocalizedROI lroi: segmentations) {
                    if (lroi.ts==ts) {
                        Shape s = (Shape) scaling.createTransformedShape(lroi.p);
                        ((Graphics2D)g).draw(s);
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);

                // Write the image file
                try {
                    File outputfile = new File(foldername + ts.getName() + "_SegmentationMask.png");
                    ImageIO.write(bi, "PNG", outputfile);
                } catch (IOException e) {
                    Logger.getLogger(CancerNucleusClassification.class.getName()).log(Level.SEVERE, e.getMessage(), e);
                }
            }
        }
    }
    
    /**
     * Writes the progress numbers and estimated time according to total number 
     * of instances, already processed number of instances and process start time
     * to a JLabel. If total is 0, " " is written (making the progress inforamtion
     * invisible). If startTimeMillis > 0, the estimated time for the remaining
     * instances is added.
     * @param processed Processed number of instances.
     * @param total Total number of instances (if 0, " " will be written).
     * @param startTimeMillis The starting time of the process.
     */
    void setProgressNumber(int processed, int total, long startTimeMillis) {
        if (processed<=0 || total <=0) {
            jLabel31.setText("");
        } else {
            String text = "Processed  " + processed + "/" + total + "  (" + 100*processed/total + " %)";
            if (startTimeMillis>0) {
                long time = (total-processed) * (System.currentTimeMillis() - startTimeMillis) / processed;
                text += "    (est. " + String.format("%d min, %d sec", 
                TimeUnit.MILLISECONDS.toMinutes(time),
                TimeUnit.MILLISECONDS.toSeconds(time) - 
                TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time))) + ")";
            }
            jLabel31.setText(text);
        }
    }
    
}
