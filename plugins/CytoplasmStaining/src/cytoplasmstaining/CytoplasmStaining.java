package cytoplasmstaining;

import TMARKERPluginInterface.Pluggable;
import TMARKERPluginInterface.PluginManager;
import static cytoplasmstaining.HierarchicalClassifier.AVERAGE_LINKAGE;
import ij.ImagePlus;
import ij.plugin.filter.GaussianBlur;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import stainingestimation.StainingEstimation;
import tmarker.FileChooser;
import tmarker.TMAspot.TMALabel;
import tmarker.TMAspot.TMApoint;
import tmarker.TMAspot.TMAspot;
import tmarker.misc.Misc;
import tmarker.misc.StringToIntConverter;
import tmarker.tmarker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Peter J. Schueffler
 */
public class CytoplasmStaining extends javax.swing.JFrame implements TMARKERPluginInterface.Pluggable {

    // For Plugin handling
    PluginManager manager = null;
    private static final String PLUGINNAME = "Cytoplasm Staining Clustering";
    private static final String PLUGINVERSION = "1.0";
    
    private final StringToIntConverter stic = new StringToIntConverter();
    
    JFrame clusterVisualizer = null; // for visualization of the hierarchical clusterer.
    
    /**
     * Creates new form CytoplasmStaining
     */
    public CytoplasmStaining() {
        initComponents();
        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(10);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(10);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onClose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jButton4 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jButton3 = new javax.swing.JButton();

        setTitle("Cytoplasm Staining Options");

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cancernucleusclassification/Bundle"); // NOI18N
        jLabel17.setText(bundle.getString("CancerNucleusClassification.jLabel17.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jLabel17, gridBagConstraints);

        jTextField1.setColumns(3);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText(bundle.getString("CancerNucleusClassification.jTextField1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jTextField1, gridBagConstraints);

        jSlider1.setMinimum(1);
        jSlider1.setSnapToTicks(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField1, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider1, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider1Binding");
        binding.setSourceNullValue(1);
        binding.setSourceUnreadableValue(1);
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jSlider1, gridBagConstraints);

        jButton4.setText(bundle.getString("CancerNucleusClassification.jButton4.text")); // NOI18N
        jButton4.setToolTipText(bundle.getString("CancerNucleusClassification.jButton4.toolTipText")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jButton4, gridBagConstraints);

        jLabel19.setText(bundle.getString("CancerNucleusClassification.jLabel19.text")); // NOI18N
        jLabel19.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jLabel19, gridBagConstraints);

        jTextField2.setColumns(3);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField2.setText(bundle.getString("CancerNucleusClassification.jTextField2.text")); // NOI18N
        jTextField2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jTextField2, gridBagConstraints);

        jSlider2.setMaximum(10);
        jSlider2.setSnapToTicks(true);
        jSlider2.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField2, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider2, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider2Binding");
        binding.setSourceNullValue(0);
        binding.setSourceUnreadableValue(0);
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jSlider2, gridBagConstraints);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText(bundle.getString("CancerNucleusClassification.jCheckBox2.text")); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText(bundle.getString("CancerNucleusClassification.jCheckBox3.text")); // NOI18N
        jCheckBox3.setEnabled(false);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox3, gridBagConstraints);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jSeparator5, gridBagConstraints);

        jLabel16.setText(bundle.getString("CancerNucleusClassification.jLabel16.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jLabel16, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("use gold standard cells");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("use automatically detected cells");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jCheckBox4, gridBagConstraints);

        jButton1.setText("Compute Cytoplasm Staining");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButton1, gridBagConstraints);

        jButton2.setText("Save as CSV...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButton2, gridBagConstraints);

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Avg R", "Avg G", "Avg B", "% 0+ cells", "% 1+ cells", "% 2+ cells", "% 3+ cells", "Avg Gray", "Avg Channel 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setColumnSelectionAllowed(true);
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jXTable1);
        jXTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jScrollPane3, gridBagConstraints);

        jButton3.setText("Cluster Images");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel2.add(jButton3, gridBagConstraints);

        jPanel1.add(jPanel2);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jSlider1.setValue(4*manager.getLabelRadius());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider2StateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        saveTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ComputeCytoplasmStaining();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clusterImages();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if (jXTable1.getSelectedColumn()==0) {
            String name = (String) (jXTable1.getValueAt(jXTable1.getSelectedRow(), jXTable1.getSelectedColumn()));
            TMAspot ts = manager.getTMAspot(name);
            if (ts!=null) {
                manager.selectAndShowTMAspot(ts);
            }
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CytoplasmStaining().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getAuthor() {
        return "Peter J. Schüffler";
    }
    
    @Override
    public String getVersion() {
        return PLUGINVERSION;
    }
    
    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        setVisible(false);
        return true;
    }

    @Override
    public void setPluginManager(PluginManager manager) {
        this.manager = manager;
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public String getPluginName() {
        return PLUGINNAME;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        this.setVisible(true);
        updateOptionsToTMAspot(manager.getVisibleTMAspot(), manager.getSelectedTMAspots());
    }

    @Override
    public void setParameterDefaults() {
        setParam_patchsize(10);
        setParam_blur(0);
        setParam_ShowPatches(true);
        setParam_ShowBlur(false);
    }

    @Override
    public void setParameters(Properties parameters) {
        String value;
        value = parameters.getProperty("patchsize"); if (value!=null) { setParam_patchsize(Integer.parseInt(value)); }
        value = parameters.getProperty("blur"); if (value!=null) { setParam_blur(Integer.parseInt(value)); }
        value = parameters.getProperty("ShowPatches"); if (value!=null) { setParam_ShowPatches(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowBlur"); if (value!=null) { setParam_ShowBlur(Boolean.parseBoolean(value)); }
    }

    @Override
    public Properties getParameters() {
        Properties parameters = new Properties();
        parameters.setProperty("patchsize", Integer.toString(getParam_patchsize()));
        parameters.setProperty("blur", Integer.toString(getParam_blur()));
        parameters.setProperty("ShowBlur", Boolean.toString(getParam_ShowBlur()));
        
        return parameters;
    }

    @Override
    public String getHTMLReport(String HTMLFolderName) {
        return "";
    }

    @Override
    public void updateOptionsToTMAspot(TMAspot visible_TMAspot, List<TMAspot> selected_TMAspots) {
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.updateTMAspot(manager.getVisibleTMAspot());
            manager.repaintVisibleTMAspot();
        }
    }

    @Override
    public void drawInformationPreNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
        if (isVisible()) {
            int r = getParam_patchsize()/2;
            
            // blur the image
            if (getParam_ShowBlur() && getParam_blur()>0) {
                GaussianBlur gb = new GaussianBlur();
                BufferedImage bi = ts.getBufferedImage();
                for (TMALabel tp: ts.getPoints_GoldStandard()) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        try {
                            BufferedImage patch = new BufferedImage(getParam_patchsize(), getParam_patchsize(), BufferedImage.TYPE_INT_ARGB);
                            patch.getGraphics().drawImage(bi.getSubimage((int)(tp.getX()-r), (int)(tp.getY()-r), getParam_patchsize(), getParam_patchsize()), 0, 0, null);
                            ImagePlus ip = new ImagePlus("Patch", patch);
                            gb.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
                            if ((int)(getParam_patchsize()*z)>0 && (int)(getParam_patchsize()*z)>0) {
                                g.drawImage(ip.getImage().getScaledInstance((int)(getParam_patchsize()*z), (int)(getParam_patchsize()*z), Image.SCALE_SMOOTH) , (int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), null);
                            }
                        } catch (Exception e) {

                        }
                    }
                }
            }
            
            // Draw the patches around the gold standard nuclei
            if (getParam_ShowPatches()) {
                g.setColor(Color.BLUE);
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(3);
                ((Graphics2D)g).setStroke(bs);
                List<TMApoint> points = new ArrayList<>();
                if (getParam_useGSTPoints()) {
                    points.addAll(ts.getPoints_GoldStandard());
                }
                if (getParam_useESTPoints()) {
                    points.addAll(ts.getPoints_Estimated());
                }
                for (TMALabel tp: points) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        g.drawOval((int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), (int)(2*r*z), (int)(2*r*z));
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);
            }
            
        }
    }
    
    @Override
    public void drawInformationPostNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
    }
    
    @Override
    public BufferedImage showAlternativeImage(TMAspot ts) {
        return null;
    }
    
    /**
     * Defines what happens when the user clicks on the cross. This plugin is hidden
     * and the visible TMAspot is repainted (to remove the patch windows around the
     * training samples).
     * @return 0.
     */
    private int onClose() {
        setVisible(false);
        if (manager!=null) {
           manager.repaintVisibleTMAspot();
        }
        return 0;
    }
    
    /**
     * Returns the blurring radius for smoothing the images before feature creation.
     * @return The blurring radius for smoothing the images before feature creation.
     */
    int getParam_blur() {
        return jSlider2.getValue();
    }
    
    /**
     * Sets the blurring radius for smoothing the images before feature creation.
     * @param blur The blurring radius for smoothing the images before feature creation.
     */
    void setParam_blur(int blur) {
        jSlider2.setValue(blur);
    }
    
    /**
     * Returns whether or not the blurring should be drawn in TMARKER main window.
     * This might be slow if there are a lot of labels.
     * @return True, if the blurring should be drawn in TMARKER main window.
     */
    boolean getParam_ShowBlur() {
        return jCheckBox3.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the blurring should be drawn in TMARKER main window.
     * Showing blurring might be slow if there are a lot of labels.
     * @param b True, if the blurring should be drawn in TMARKER main window.
     */
    void setParam_ShowBlur(boolean b) {
        jCheckBox3.setSelected(b);
    }
    
    /**
     * Returns the patch size of the nucleus patches for feature creation.
     * @return The patch size of the nucleus patches for feature creation.
     */
    int getParam_patchsize() {
        return jSlider1.getValue();
    }
    
    /**
     * Sets the patch size of the nucleus patches for feature creation.
     * @param s The patch size of the nucleus patches for feature creation.
     */
    void setParam_patchsize(int s) {
        jSlider1.setValue(s);
    }
    
    /**
     * Returns whether or not the patches should be drawn in TMARKER main window.
     * @return True, if the patches should be drawn in TMARKER main window.
     */
    boolean getParam_ShowPatches() {
        return jCheckBox2.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the patches should be drawn in TMARKER main window.
     * @param b True, if the patches should be drawn in TMARKER main window.
     */
    void setParam_ShowPatches(boolean b) {
        jCheckBox2.setSelected(b);
    }
    
    /**
     * Return whether or not the user labeled gold-standard points should be used for calculation.
     * @return True, if the user labeled gold-standard points should be used for calculation.
     */
    boolean getParam_useGSTPoints() {
        return jCheckBox1.isSelected();
    }
    
    /**
     * Sets whether or not the user labeled gold-standard points should be used for calculation.
     * @param b True, if the user labeled gold-standard points should be used for calculation.
     */
    void setParam_useGSTPoints(boolean b) {
        jCheckBox1.setSelected(b);
    }
    
    /**
     * Return whether or not the computer estimated points (cells) should be used for calculation.
     * @return True, if the computer estimated points (cells) should be used for calculation.
     */
    boolean getParam_useESTPoints() {
        return jCheckBox4.isSelected();
    }
    
    /**
     * Sets whether or not the computer estimated points (cells) should be used for calculation.
     * @param b True, if the computer estimated points (cells) should be used for calculation.
     */
    void setParam_useESTPoints(boolean b) {
        jCheckBox4.setSelected(b);
    }
    
    void ComputeCytoplasmStaining() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        int w = getParam_patchsize();
        int h = getParam_patchsize();
        int[] col = new int[4];
        int c, r, g, b;
        
        ((DefaultTableModel) jXTable1.getModel()).setRowCount(0);
        
        for (TMAspot ts: manager.getSelectedTMAspots()) {
            double average_r = 0;
            double average_g = 0;
            double average_b = 0;
            double average_gray = 0;
            double average_ch2 = 0;
            BufferedImage img = ts.getBufferedImage();
            BufferedImage ch2 = getChannel2Image(ts);
            List<TMApoint> points = new ArrayList<>();
            if (getParam_useGSTPoints()) {
                points.addAll(ts.getPoints_GoldStandard());
            }
            if (getParam_useESTPoints()) {
                points.addAll(ts.getPoints_Estimated());
            }
            int n = points.size();
            for (TMApoint tp: points) {
                double local_avg_r = 0;
                double local_avg_g = 0;
                double local_avg_b = 0;
                double local_avg_gray = 0;
                double local_avg_ch2 = 0;
                int j = 0;
                // go through the point environment
                for (int x=tp.x-w/2; x<tp.x+w/2; x++) {
                    for (int y=tp.y-h/2; y<tp.y+h/2; y++) {
                        // if the coordinates are within the image...
                        if (x>=0 && y>=0 && x<img.getWidth() && y<img.getHeight()) {
                            //... and the coordinates are within a circle...
                            if (Math.sqrt(Math.pow(tp.x-x, 2) + Math.pow(tp.y-y, 2)) < w/2) {
                                c = img.getRGB(x, y);
                                r = (c & 0x00FF0000) >> 16;
                                g = (c & 0x0000FF00) >>  8;
                                b = (c & 0x000000FF);
                                local_avg_r += r;
                                local_avg_g += g;
                                local_avg_b += b;
                                local_avg_gray += 0.2989 * r + 0.5870 * g + 0.1140 * b; ;
                                local_avg_ch2 += (ch2 == null)? 0 : (ch2.getRGB(x, y) & 0x000000FF);
                                j++;
                            }
                        }
                    }
                }
                local_avg_r /= j;
                local_avg_g /= j;
                local_avg_b /= j;
                local_avg_gray /= j;
                local_avg_ch2 /= j;
                average_r += local_avg_r;
                average_g += local_avg_g;
                average_b += local_avg_b;
                average_gray += local_avg_gray;
                average_ch2 += local_avg_ch2;
            }
            if (n!=0) {
                average_r /= 255*n;
                average_g /= 255*n;
                average_b /= 255*n;
                average_gray /= 255*n;
                average_ch2 /= 255*n;
            } else {
                average_r = Double.NaN;
                average_g = Double.NaN;
                average_b = Double.NaN;
                average_gray = Double.NaN;
                average_ch2 = Double.NaN;
            }
            
            double perc_0cells = 0;
            double perc_1cells = 0;
            double perc_2cells = 0;
            double perc_3cells = 0;
            
            if (n>0) {
                for (TMApoint tp: points) {
                    switch (tp.getStaining()) {
                        case TMALabel.STAINING_0: perc_0cells++; break;
                        case TMALabel.STAINING_1: perc_1cells++; break;
                        case TMALabel.STAINING_2: perc_2cells++; break;
                        default: perc_3cells++; break;
                    }
                }
                perc_0cells /= n;
                perc_1cells /= n;
                perc_2cells /= n;
                perc_3cells /= n;
            }
            
            // add the average of this TMAspot to the table
            ((DefaultTableModel) jXTable1.getModel()).addRow(new Object[]{ts.getName(), average_r, average_g, average_b, perc_0cells, perc_1cells, perc_2cells, perc_3cells, average_gray, average_ch2});
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    /**
     * Opens a dialog to let the user choose a file in which the table of the cytoplasm staining is saved.
     */
    private void saveTable() {
        if (jXTable1.getRowCount()>0) {
            String sep = manager.getColumnSeparator();
            String currentDir = manager.getCurrentDir();
            File file;
            List<String> exts = new ArrayList<>(1); exts.add("csv");
            List<String> descrs = new ArrayList<>(1); descrs.add("Semicolon separated file");
            String filename = null;
            if (manager.getVisibleTMAspot()!=null) {
                filename = Misc.FilePathStringtoFilenameWOExtension(manager.getVisibleTMAspot().getName())+".csv";
            } 
            file = FileChooser.chooseSavingFile(this, currentDir, filename, exts, descrs);

            if (file != null) {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                // Save csv
                try {
                    BufferedWriter bfw = new BufferedWriter(new FileWriter(file));
                    for(int i=0 ; i<jXTable1.getModel().getColumnCount(); i++) {
                        bfw.write("\"" + jXTable1.getModel().getColumnName(i) + "\"");
                        if (i<jXTable1.getModel().getColumnCount()-1) bfw.write(sep);
                    }
                    for (int i=0 ; i<jXTable1.getRowCount(); i++) {
                        bfw.newLine();
                        for(int j=0 ; j<jXTable1.getModel().getColumnCount(); j++) {
                            Object o = jXTable1.getModel().getValueAt(i,j);
                            if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == Double.class) {
                                bfw.write((Double.toString((Double) o)));
                            } else if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == Integer.class) {
                                bfw.write((Integer.toString((Integer) o)));
                            } else if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == String.class) {
                                bfw.write("\"" + (String) o + "\"");
                            } else {
                                bfw.write(jXTable1.getModel().getValueAt(i,j).toString());
                            }
                            if (j<jXTable1.getModel().getColumnCount()-1) bfw.write(sep);
                        }
                    }
                    bfw.close();
                } catch (Exception e) {
                    Logger.getLogger(CytoplasmStaining.class.getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, "Could not save file " + file.getName() + "\n(Maybe it is in use?)", "Error writing file", JOptionPane.ERROR_MESSAGE);
                }
            
                manager.setCurrentDir(file.getAbsolutePath());
                setCursor(Cursor.getDefaultCursor());
            }
            
        }
    }
    
    public void clusterImages() {
        if (jXTable1.getRowCount() > 0) {
            try {
                // First, let the user select which features to use...
                List<String> avail_features = new ArrayList<>();
                for (int i=1; i<jXTable1.getColumnCount(); i++) {
                    avail_features.add(jXTable1.getModel().getColumnName(i));
                }
                List<String> selected_features = FeatureSelectionDialog.showDialog(this, true, avail_features);
                
                if (!selected_features.isEmpty()) {
                    // ... then do the clustering
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    List<Sample> samples = new ArrayList<>();
                    // fill with data
                    for (int i=0; i<jXTable1.getRowCount(); i++) {
                        double[] features = new double[selected_features.size()];
                        int k=0;
                        for (int j=1; j<jXTable1.getColumnCount(); j++) {
                            if (selected_features.contains(jXTable1.getModel().getColumnName(j))) {
                                features[k++] = (Double) (jXTable1.getValueAt(i, j));
                            }
                        }
                        // add the instance
                        samples.add(new Sample(manager.getTMAspot(jXTable1.getStringAt(i, 0)), features));
                    }

                    HierarchicalClassifier hc = new HierarchicalClassifier(samples);
                    hc.doClustering(AVERAGE_LINKAGE, true);
                }
            } catch (Exception | OutOfMemoryError e) {
                java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "The clustering could not be performed.\n\n"
                        + "A possible reasons is:\n"
                        + "- Not enough memory (too many points), \n\n"
                        + "You might want to try a different clustering method or less TMAspots.\n\n"
                        + "The error message is: \n"
                        + e.getMessage(), "Error at Nucleus clustering", JOptionPane.WARNING_MESSAGE);
            } finally {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }
    
    /**
     * Returns the channel 2 image of a given TMAspot. The channel 2 images has to be
     * created by the Color Deconvolution plugin.
     * @param ts The TMAspot to be searched for.
     * @return The channel 2 image of ts. null if the plugin "Color Deconvolution" 
     * is not loaded or the channel 2 image has not been created.
     */
    BufferedImage getChannel2Image(TMAspot ts) {
        Pluggable p = manager.getPlugin("Color Deconvolution");
        if (p==null) {
            return null;
        } else {
            try {
                return ((StainingEstimation) p).getBufferedImage(ts, StainingEstimation.SHOW_CHANNEL2_IMAGE);
            } catch (Exception e) {
                return null;
            }
        }
    }
    
}
