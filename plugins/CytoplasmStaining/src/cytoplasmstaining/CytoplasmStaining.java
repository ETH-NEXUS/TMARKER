package cytoplasmstaining;

import TMARKERPluginInterface.Pluggable;
import TMARKERPluginInterface.PluginManager;
import static cytoplasmstaining.HierarchicalClassifier.AVERAGE_LINKAGE;
import graphcut.ConnectComponent;
import graphcut.GraphCut;
import graphcut.Terminal;
import ij.ImagePlus;
import ij.plugin.filter.GaussianBlur;
import ij.process.PolygonFiller;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.jai.ROI;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import plugins.TMARKERPluginManager;
import stainingestimation.StainingEstimation;
import tmarker.FileChooser;
import tmarker.TMAspot.TMALabel;
import tmarker.TMAspot.TMApoint;
import tmarker.TMAspot.TMAspot;
import tmarker.misc.Misc;
import tmarker.misc.StringToIntConverter;
import tmarker.tmarker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Peter J. Schueffler
 */
public class CytoplasmStaining extends javax.swing.JFrame implements TMARKERPluginInterface.Pluggable {

    // For Plugin handling
    PluginManager manager = null;
    private static final String PLUGINNAME = "Cytoplasm Staining Clustering";
    private static final String PLUGINVERSION = "1.0";
    
    private final StringToIntConverter stic = new StringToIntConverter();
    
    /**
     * Segmentations of nuclei for every TMAspot.
     */
    private final List<TMAspotSegmentations> TMAspotsegmentations = new ArrayList<>();
    
    JFrame clusterVisualizer = null; // for visualization of the hierarchical clusterer.
    
    /**
     * Creates new form CytoplasmStaining
     */
    public CytoplasmStaining() {
        initComponents();
        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(10);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(10);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onClose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jButton4 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jSlider3 = new javax.swing.JSlider();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jXCollapsiblePane1 = new org.jdesktop.swingx.JXCollapsiblePane();
        jXColorSelectionButton3 = new org.jdesktop.swingx.JXColorSelectionButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSlider4 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();

        setTitle(PLUGINNAME + " v1." + java.util.ResourceBundle.getBundle("cytoplasmstaining/Bundle").getString("build")); // NOI18N

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cytoplasmstaining/Bundle"); // NOI18N
        jLabel17.setText(bundle.getString("CancerNucleusClassification.jLabel17.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        jPanel2.add(jLabel17, gridBagConstraints);

        jTextField1.setColumns(3);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText(bundle.getString("CancerNucleusClassification.jTextField1.text")); // NOI18N
        jTextField1.setToolTipText("If no cell segmentation is possible, cells are approx. circles with this diameter.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jTextField1, gridBagConstraints);

        jSlider1.setMinimum(1);
        jSlider1.setSnapToTicks(true);
        jSlider1.setToolTipText("If no cell segmentation is possible, cells are approx. circles with this diameter.");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField1, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider1, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider1Binding");
        binding.setSourceNullValue(1);
        binding.setSourceUnreadableValue(1);
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jSlider1, gridBagConstraints);

        jButton4.setText(bundle.getString("CancerNucleusClassification.jButton4.text")); // NOI18N
        jButton4.setToolTipText(bundle.getString("CancerNucleusClassification.jButton4.toolTipText")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jButton4, gridBagConstraints);

        jLabel19.setText(bundle.getString("CancerNucleusClassification.jLabel19.text")); // NOI18N
        jLabel19.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        jPanel2.add(jLabel19, gridBagConstraints);

        jTextField2.setColumns(3);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("cancernucleusclassification/Bundle"); // NOI18N
        jTextField2.setText(bundle1.getString("CancerNucleusClassification.jTextField2.text")); // NOI18N
        jTextField2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jTextField2, gridBagConstraints);

        jSlider2.setMaximum(10);
        jSlider2.setSnapToTicks(true);
        jSlider2.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField2, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider2, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider2Binding");
        binding.setConverter(stic);
        bindingGroup.addBinding(binding);

        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jSlider2, gridBagConstraints);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText(bundle.getString("CancerNucleusClassification.jCheckBox2.text")); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText(bundle.getString("CancerNucleusClassification.jCheckBox3.text")); // NOI18N
        jCheckBox3.setToolTipText("");
        jCheckBox3.setEnabled(false);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox3, gridBagConstraints);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jSeparator5, gridBagConstraints);

        jLabel16.setText("<html>Cytoplasm staining is averaged within the given cell radius.<br>\nThe considered cells an the cell radius can be varied here.<br>\nAlso a decent blurring is recommended to smooth the cells.<br>\nA threshold can be used to exclude white background.<br>\nNuclei can be segmented and excluded, if needed.<br>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jLabel16, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("use gold standard cells");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("use automatically detected cells");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(jCheckBox4, gridBagConstraints);

        jButton1.setText("Compute Cytoplasm Staining");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jButton1, gridBagConstraints);

        jButton2.setText("Save as CSV...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButton2, gridBagConstraints);

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Image", "ROI", "Avg R", "Avg G", "Avg B", "% 0+ cells", "% 1+ cells", "% 2+ cells", "% 3+ cells", "Avg Gray", "Avg Channel 2", "H-Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setColumnSelectionAllowed(true);
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jXTable1);
        jXTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jScrollPane3, gridBagConstraints);

        jButton3.setText("Cluster Images");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel2.add(jButton3, gridBagConstraints);

        jLabel1.setText("Background threshold t ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField3.setText("230");
        jTextField3.setToolTipText("Pixels above t are considered as background.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jTextField3, gridBagConstraints);

        jSlider3.setMaximum(255);
        jSlider3.setToolTipText("Pixels above t are considered as background.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextField3, org.jdesktop.beansbinding.ELProperty.create("${text}"), jSlider3, org.jdesktop.beansbinding.BeanProperty.create("value"), "jSlider3Binding");
        bindingGroup.addBinding(binding);

        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jSlider3, gridBagConstraints);

        jCheckBox5.setSelected(true);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox5, gridBagConstraints);

        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jCheckBox7, gridBagConstraints);

        java.util.ResourceBundle bundle2 = java.util.ResourceBundle.getBundle("intensityclustering/Bundle"); // NOI18N
        jXColorSelectionButton3.setText(bundle2.getString("IntensityClustering.jXColorSelectionButton3.text")); // NOI18N
        jXColorSelectionButton3.setToolTipText("Background Color (area not considered as cytoplasm)");
        jXColorSelectionButton3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jXColorSelectionButton3StateChanged(evt);
            }
        });
        jXCollapsiblePane1.getContentPane().add(jXColorSelectionButton3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jXCollapsiblePane1, gridBagConstraints);

        jLabel2.setText("Preview");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Nucleus Segmentation"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Circular Shape");
        jLabel3.setToolTipText("More weight on circular objects");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel3.add(jLabel3, gridBagConstraints);

        jSlider4.setToolTipText(Integer.toString(jSlider4.getValue()));
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider4StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel3.add(jSlider4, gridBagConstraints);

        jLabel4.setText("Arbitrary Shape");
        jLabel4.setToolTipText("More weight on intensity information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel3.add(jLabel4, gridBagConstraints);

        jLabel5.setText("<html><p>Nucleus segmentation depends on the global <b>nucleus radius</b>,<br>\nand on the weight of circular or arbitrary objects.</p>\n<p>After segmenting the nuclei, they are excluded from the cytoplasm.</p>\n<p>Without segmentations, the nuclei are approximated by circles.</p></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jButton5.setText("Segment Nuclei");
        jButton5.setToolTipText("Segment Nuclei");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5, java.awt.BorderLayout.LINE_START);

        jButton6.setText("Clear Segmentation");
        jButton6.setToolTipText("Delete nuclei segmentations.");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6, java.awt.BorderLayout.LINE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel2.add(jPanel3, gridBagConstraints);

        jCheckBox8.setText("Consider single ROIs instead of whole images");
        jCheckBox8.setToolTipText("If selected, individual ROIs will be listed below. Otherwise, whole images will be listed.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanel2.add(jCheckBox8, gridBagConstraints);

        jCheckBox6.setText("Exclude Cell Nuclei");
        jCheckBox6.setToolTipText("Either circles with nuclei radius OR exact segmentation (if available) are excluded from cytosplasm.");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jCheckBox6, gridBagConstraints);

        jPanel1.add(jPanel2);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jSlider1.setValue(4*manager.getLabelRadius());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider2StateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        saveTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ComputeCytoplasmStaining();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clusterImages();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if (jXTable1.getSelectedColumn()==0) {
            String name = (String) (jXTable1.getValueAt(jXTable1.getSelectedRow(), jXTable1.getSelectedColumn()));
            TMAspot ts = manager.getTMAspot(name);
            if (ts!=null) {
                manager.selectAndShowTMAspot(ts);
            }
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        performSegmentation();
        setParam_ShowSegmentations(true);
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jSlider3StateChanged

    private void jXColorSelectionButton3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jXColorSelectionButton3StateChanged
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jXColorSelectionButton3StateChanged

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        TMAspotsegmentations.clear();
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.repaintVisibleTMAspot();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jSlider4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider4StateChanged
        jSlider4.setToolTipText(Integer.toString(jSlider4.getValue()));
    }//GEN-LAST:event_jSlider4StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CytoplasmStaining.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CytoplasmStaining().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private org.jdesktop.swingx.JXCollapsiblePane jXCollapsiblePane1;
    private org.jdesktop.swingx.JXColorSelectionButton jXColorSelectionButton3;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getAuthor() {
        return "Peter J. Schüffler";
    }
    
    @Override
    public String getVersion() {
        return PLUGINVERSION;
    }
    
    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        setVisible(false);
        return true;
    }

    @Override
    public void setPluginManager(PluginManager manager) {
        this.manager = manager;
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public String getPluginName() {
        return PLUGINNAME;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        this.setVisible(true);
        updateOptionsToTMAspot(manager.getVisibleTMAspot(), manager.getSelectedTMAspots());
    }

    @Override
    public void setParameterDefaults() {
        setParam_patchsize(10);
        setParam_blur(0);
        setParam_ShowPatches(true);
        setParam_ShowBlur(false);
        setParam_BackgroundThreshold(250);
        setParam_ShowBackgroundThreshold(true);
        setParam_ShowBackgroundThresholdColor(0);
        setParam_ShowSegmentations(false);
        setParam_excludeNuclei(false);
        setParam_SegmentationCircularWeight(50);
    }

    @Override
    public void setParameters(Properties parameters) {
        String value;
        value = parameters.getProperty("patchsize"); if (value!=null) { setParam_patchsize(Integer.parseInt(value)); }
        value = parameters.getProperty("blur"); if (value!=null) { setParam_blur(Integer.parseInt(value)); }
        value = parameters.getProperty("ShowPatches"); if (value!=null) { setParam_ShowPatches(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowBlur"); if (value!=null) { setParam_ShowBlur(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("BackgroundThreshold"); if (value!=null) { setParam_BackgroundThreshold(Integer.parseInt(value)); }
        value = parameters.getProperty("ShowBackgroundThreshold"); if (value!=null) { setParam_ShowBackgroundThreshold(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("ShowBackgroundThresholdColor"); if (value!=null) { setParam_ShowBackgroundThresholdColor(Integer.parseInt(value)); }
        value = parameters.getProperty("ShowSegmentations"); if (value!=null) { setParam_ShowSegmentations(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("useSegmentation"); if (value!=null) { setParam_excludeNuclei(Boolean.parseBoolean(value)); }
        value = parameters.getProperty("segmentationCircularWeight"); if (value!=null) { setParam_SegmentationCircularWeight(Integer.parseInt(value)); }
        
    }

    @Override
    public Properties getParameters() {
        Properties parameters = new Properties();
        parameters.setProperty("patchsize", Integer.toString(getParam_patchsize()));
        parameters.setProperty("blur", Integer.toString(getParam_blur()));
        parameters.setProperty("ShowPatches", Boolean.toString(getParam_ShowPatches()));
        parameters.setProperty("ShowBlur", Boolean.toString(getParam_ShowBlur()));
        parameters.setProperty("BackgroundThreshold", Integer.toString(getParam_BackgroundThreshold()));
        parameters.setProperty("ShowBackgroundThreshold", Boolean.toString(getParam_ShowBackgroundThreshold()));
        parameters.setProperty("ShowBackgroundThresholdColor", Integer.toString(getParam_ShowBackgroundThresholdColor()));
        parameters.setProperty("ShowSegmentations", Boolean.toString(getParam_ShowSegmentations()));
        parameters.setProperty("useSegmentation", Boolean.toString(getParam_excludeNuclei()));
        parameters.setProperty("segmentationCircularWeight", Integer.toString(getParam_SegmentationCircularWeight()));
        
        return parameters;
    }

    @Override
    public String getHTMLReport(String HTMLFolderPath) {
        String output = "<html>";
        if (jXTable1.getRowCount()>0) {
            char linebreak = '\n';
            String HTMLFolderName = new File(HTMLFolderPath).getName() + File.separator;

            output += "<script>" + linebreak
                        + "	$(function(){" + linebreak
                        + "		$('#tableCytoplasmStaining thead th').data(\"sorter\", true);" + linebreak
                        + "		$('#tableCytoplasmStaining').tablesorter({" + linebreak
                        + "			widgets        : ['zebra', 'columns']," + linebreak
                        + "			usNumberFormat : false," + linebreak
                        + "			sortReset      : true," + linebreak
                        + "			sortRestart    : true" + linebreak
                        + "		});" + linebreak
                        + "	});" + linebreak
                        + "</script>" + linebreak + linebreak;

            output += "<table><tr>" + linebreak
                    + "  <td colspan=2><i><u>Cytoplasm Staining Parameters</u></i></td>" + linebreak
                    + " </tr>" + linebreak

                    + " <tr>" + linebreak
                    + "  <td><b>Include gold-standard cells</b></td>" + linebreak
                    + "  <td>" + getParam_useGSTPoints() + "</td>" + linebreak
                    + " </tr>" + linebreak

                    + " <tr>" + linebreak
                    + "  <td><b>Include estimated cells</b></td>" + linebreak
                    + "  <td>" + getParam_useESTPoints() + "</td>" + linebreak
                    + " </tr>" + linebreak

                    + " <tr>" + linebreak
                    + "  <td><b>Cell diameter</b></td>" + linebreak
                    + "  <td>" + getParam_patchsize() + "</td>" + linebreak
                    + " </tr>" + linebreak

                    + " <tr>" + linebreak
                    + "  <td><b>Blurring</b></td>" + linebreak
                    + "  <td>" + getParam_blur() + "</td>" + linebreak
                    + " </tr>" + linebreak;

            output += "</table><br>" + linebreak;

            // write table
            output += "<table id=\"tableCytoplasmStaining\" class=\"sortable\"><thead><tr>" + linebreak;
            for (int i=0; i<jXTable1.getColumnCount(); i++) {
                output += "  <th><b>" + jXTable1.getColumnName(i) + "</b></th>" + linebreak;
            }
            output += " </tr></thead><tbody>" + linebreak;

            for (int j=0; j<jXTable1.getRowCount(); j++) {
                output += " <tr>" + linebreak;
                for (int i=0; i<jXTable1.getColumnCount(); i++) {
                    output += "  <td>" + jXTable1.getStringAt(j, i) + "</td>" + linebreak;
                }
                output += " </tr>" + linebreak;
            }
            output += "</tbody></table><br>" + linebreak;
        }        
        
        output += "</html>";
        return output;
    }

    @Override
    public void updateOptionsToTMAspot(TMAspot visible_TMAspot, List<TMAspot> selected_TMAspots) {
        if (manager!=null && manager.getVisibleTMAspot()!=null) {
            manager.updateTMAspot(manager.getVisibleTMAspot());
            manager.repaintVisibleTMAspot();
        }
    }

    @Override
    public void drawInformationPreNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
        if (isVisible()) {
            int r = getParam_patchsize()/2;
            
            // blur the image
            if (getParam_ShowBlur() && getParam_blur()>0) {
                GaussianBlur gb = new GaussianBlur();
                BufferedImage bi = ts.getBufferedImage();
                for (TMALabel tp: ts.getPoints_GoldStandard()) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        try {
                            BufferedImage patch = new BufferedImage(getParam_patchsize(), getParam_patchsize(), BufferedImage.TYPE_INT_ARGB);
                            patch.getGraphics().drawImage(bi.getSubimage((int)(tp.getX()-r), (int)(tp.getY()-r), getParam_patchsize(), getParam_patchsize()), 0, 0, null);
                            ImagePlus ip = new ImagePlus("Patch", patch);
                            gb.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
                            if ((int)(getParam_patchsize()*z)>0 && (int)(getParam_patchsize()*z)>0) {
                                g.drawImage(ip.getImage().getScaledInstance((int)(getParam_patchsize()*z), (int)(getParam_patchsize()*z), Image.SCALE_SMOOTH) , (int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), null);
                            }
                        } catch (Exception e) {

                        }
                    }
                }
            }
            
            
            
            // draw the background threshold
            if (getParam_ShowBackgroundThreshold()) {
                g.setColor(new Color(getParam_ShowBackgroundThresholdColor()));
                List<Object> points = new ArrayList<>();
                TMAspotSegmentations tsseg = getTMAspotSegmentations(ts);
                if (tsseg != null && !tsseg.segmentations.isEmpty()) {
                    for (LocalizedROI loci : tsseg.segmentations) {
                        if (loci.ts == ts) {
                            points.add(loci);
                        }
                    }
                } else {
                    if (getParam_useGSTPoints()) {
                        points.addAll(ts.getPoints_GoldStandard());
                    }
                    if (getParam_useESTPoints()) {
                        points.addAll(ts.getPoints_Estimated());
                    }
                }
                int t = getParam_BackgroundThreshold();
                BufferedImage bi = ts.getBufferedImage();
                
                for (int k = 0; k<points.size(); k++) {
                    TMALabel tp = tsseg != null && !tsseg.segmentations.isEmpty() ? ((LocalizedROI) points.get(k)).tp : (TMALabel) points.get(k);
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        try {
                            BufferedImage patch = new BufferedImage(getParam_patchsize(), getParam_patchsize(), BufferedImage.TYPE_BYTE_GRAY);
                            patch.getGraphics().drawImage(bi.getSubimage((int)(tp.getX()-r), (int)(tp.getY()-r), getParam_patchsize(), getParam_patchsize()), 0, 0, null);
                            ImagePlus ip = new ImagePlus("Patch", patch);
                            for (int i = 0; i < patch.getWidth(); i++) {
                                for (int j = 0; j < patch.getHeight(); j++) {
                                    double r_ = Math.sqrt(Math.pow(getParam_patchsize()/2-i, 2) + Math.pow(getParam_patchsize()/2-j, 2));
                                    if (r_ < getParam_patchsize()/2) {
                                        int[] p = ip.getPixel(i, j);
                                        if (p[0]>t || 
                                            (getParam_excludeNuclei() && ((tsseg == null || tsseg.segmentations.isEmpty()) && r_ <= ts.getCenter().getLabelRadius())) ||
                                            (getParam_excludeNuclei() && tsseg != null && !tsseg.segmentations.isEmpty() && ((LocalizedROI) points.get(k)).p.contains(i+tp.x-r, j+tp.y-r))) {
                                                g.fillRect((int)((i+tp.x-r)*z), (int)((j+tp.y-r)*z), Math.max(1, (int)Math.round(z)), Math.max(1, (int)Math.round(z)));
                                        }
                                    } 
                                }
                            } 
                        } catch (Exception e) {
                            // happens e.g. if the patch is too close at the image border.
                        }
                    }
                }
            }
            
            
            
            // Draw the patches around the gold standard nuclei
            if (getParam_ShowPatches()) {
                g.setColor(Color.BLUE);
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(3);
                ((Graphics2D)g).setStroke(bs);
                List<TMApoint> points = new ArrayList<>();
                if (getParam_useGSTPoints()) {
                    points.addAll(ts.getPoints_GoldStandard());
                }
                if (getParam_useESTPoints()) {
                    points.addAll(ts.getPoints_Estimated());
                }
                for (TMALabel tp: points) {
                    if (tp.x >= x_min && tp.y >= y_min && tp.x < x_max && tp.y < y_max) {
                        g.drawOval((int)((tp.getX()-r)*z), (int)((tp.getY()-r)*z), (int)(2*r*z), (int)(2*r*z));
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);
            }
            
            
            // draw the segmentations
            if (getParam_ShowSegmentations()) {
                Stroke old_stroke = ((Graphics2D)g).getStroke();
                BasicStroke bs = new BasicStroke(2);
                ((Graphics2D)g).setStroke(bs);
                AffineTransform scaling = AffineTransform.getScaleInstance(z, z);
                TMAspotSegmentations tsseg = getTMAspotSegmentations(ts);
                if (tsseg != null && !tsseg.segmentations.isEmpty()) {
                    for (LocalizedROI lroi: tsseg.segmentations) {
                        if (lroi.tp.x >= x_min && lroi.tp.y >= y_min && lroi.tp.x < x_max && lroi.tp.y < y_max) {
                            if (lroi.ts==ts) {
                                // draw the actual segmentation
                                /*g.setColor(Color.YELLOW);
                                for (int i=lroi.tp.x-r; i<lroi.tp.x+r; i++) {
                                    for (int j=lroi.tp.y-r; j<lroi.tp.y+r; j++) {
                                        if (lroi.roi.contains(i-lroi.tp.x+r, j-lroi.tp.y+r)) {
                                            ((Graphics2D)g).fillRect((int)(z*i), (int)(z*j), (int)Math.max(1,z), (int)Math.max(1, z));
                                        }
                                    }
                                }*/
                                // Draw the boundary
                                g.setColor(Color.RED);
                                Shape s = (Shape) scaling.createTransformedShape(lroi.p);
                                ((Graphics2D)g).draw(s);
                            }
                        }
                    }
                }
                ((Graphics2D)g).setStroke(old_stroke);
            }
            
            
            
        }
    }
    
    @Override
    public void drawInformationPostNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
    }
    
    @Override
    public BufferedImage showAlternativeImage(TMAspot ts) {
        return null;
    }
    
    @Override
    public void TMAspotMouseClicked(TMAspot ts, TMApoint tp, MouseEvent evt) {
        if (ts!=null && tp!=null) {
            // add the segmentation if the point is not yet segmented
            TMAspotSegmentations tsseg = getTMAspotSegmentations(ts);
            if (tsseg != null) {
                LocalizedROI lroi = tsseg.getLocalizedROI(tp);
                if (lroi==null) {
                    List<TMApoint> newPoints = new ArrayList();
                    newPoints.add(tp);
                    segmentMultipleNuclei(ts, newPoints, tsseg);
                }
            }
        }
    }
    
    /**
     * Defines what happens when the user clicks on the cross. This plugin is hidden
     * and the visible TMAspot is repainted (to remove the patch windows around the
     * training samples).
     * @return 0.
     */
    private int onClose() {
        setVisible(false);
        if (manager!=null) {
           manager.repaintVisibleTMAspot();
        }
        return 0;
    }
    
    /**
     * Returns the blurring radius for smoothing the images before feature creation.
     * @return The blurring radius for smoothing the images before feature creation.
     */
    int getParam_blur() {
        return jSlider2.getValue();
    }
    
    /**
     * Sets the blurring radius for smoothing the images before feature creation.
     * @param blur The blurring radius for smoothing the images before feature creation.
     */
    void setParam_blur(int blur) {
        jSlider2.setValue(blur);
    }
    
    /**
     * Returns whether or not the blurring should be drawn in TMARKER main window.
     * This might be slow if there are a lot of labels.
     * @return True, if the blurring should be drawn in TMARKER main window.
     */
    boolean getParam_ShowBlur() {
        return jCheckBox3.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the blurring should be drawn in TMARKER main window.
     * Showing blurring might be slow if there are a lot of labels.
     * @param b True, if the blurring should be drawn in TMARKER main window.
     */
    void setParam_ShowBlur(boolean b) {
        jCheckBox3.setSelected(b);
    }
    
    /**
     * Returns the patch size of the nucleus patches for feature creation.
     * @return The patch size of the nucleus patches for feature creation.
     */
    int getParam_patchsize() {
        return jSlider1.getValue();
    }
    
    /**
     * Sets the patch size of the nucleus patches for feature creation.
     * @param s The patch size of the nucleus patches for feature creation.
     */
    void setParam_patchsize(int s) {
        jSlider1.setValue(s);
    }
    
    /**
     * Returns whether or not the patches should be drawn in TMARKER main window.
     * @return True, if the patches should be drawn in TMARKER main window.
     */
    boolean getParam_ShowPatches() {
        return jCheckBox2.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the patches should be drawn in TMARKER main window.
     * @param b True, if the patches should be drawn in TMARKER main window.
     */
    void setParam_ShowPatches(boolean b) {
        jCheckBox2.setSelected(b);
    }
    
    /**
     * Return whether or not the user labeled gold-standard points should be used for calculation.
     * @return True, if the user labeled gold-standard points should be used for calculation.
     */
    boolean getParam_useGSTPoints() {
        return jCheckBox1.isSelected();
    }
    
    /**
     * Sets whether or not the user labeled gold-standard points should be used for calculation.
     * @param b True, if the user labeled gold-standard points should be used for calculation.
     */
    void setParam_useGSTPoints(boolean b) {
        jCheckBox1.setSelected(b);
    }
    
    /**
     * Return whether or not the computer estimated points (cells) should be used for calculation.
     * @return True, if the computer estimated points (cells) should be used for calculation.
     */
    boolean getParam_useESTPoints() {
        return jCheckBox4.isSelected();
    }
    
    /**
     * Sets whether or not the computer estimated points (cells) should be used for calculation.
     * @param b True, if the computer estimated points (cells) should be used for calculation.
     */
    void setParam_useESTPoints(boolean b) {
        jCheckBox4.setSelected(b);
    }
    
    /**
     * Whether or not nuclei should be excluded for cytoplasm staining calculation.
     * @return True, if nuclei should be excluded for cytoplasm staining calculation.
     */
    public boolean getParam_excludeNuclei() {
        return jCheckBox6.isSelected();
    }
    
    /**
     * Sets whether or not nuclei should be excluded for cytoplasm staining calculation.
     * @param b True, if nuclei should be excluded for cytoplasm staining calculation.
     */
    public void setParam_excludeNuclei(boolean b) {
        jCheckBox6.setSelected(b);
    }
    
    /**
     * Returns whether or not the segmentations should be drawn in TMARKER main window.
     * @return True, if the segmentations should be drawn in TMARKER main window.
     */
    boolean getParam_ShowSegmentations() {
        return jCheckBox7.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the segmentations should be drawn in TMARKER main window.
     * @param b True, if the segmentations should be drawn in TMARKER main window.
     */
    void setParam_ShowSegmentations(boolean b) {
        jCheckBox7.setSelected(b);
    }
    
    /**
     * Returns whether or not the background threshold should be painted in the image.
     * @return True, if the the background threshold should be painted in the image.
     */
    boolean getParam_ShowBackgroundThreshold() {
        return jCheckBox5.isSelected();
    }
    
    /**
     * Sets the parameter whether or not the background threshold should be painted in the image.
     * @param b True, if the background threshold should be painted in the image.
     */
    void setParam_ShowBackgroundThreshold(boolean b) {
        jCheckBox5.setSelected(b);
    }
    
    /**
     * Returns the color of the background (as int).
     * @return The color of the painted background.
     */
    int getParam_ShowBackgroundThresholdColor() {
        return jXColorSelectionButton3.getBackground().getRGB();
    }
    
    /**
     * Sets the color of the background (as int).
     * @param c The color of the painted background.
     */
    void setParam_ShowBackgroundThresholdColor(int c) {
        jXColorSelectionButton3.setBackground(new Color(c));
    }
    
    /**
     * Returns the threshold above which the image information is considered as background.
     * @return The background threshold (0-255, exclusive).
     */
    int getParam_BackgroundThreshold() {
        return jSlider3.getValue();
    }
    
    /**
     * Sets the threshold above which the image information is considered as background.
     * @param t The background threshold (0-255, exclusive).
     */
    void setParam_BackgroundThreshold(int t) {
        jSlider3.setValue(t);
    }
    
    /**
     * Returns the weight for circular or arbitrary objects for nucleus segmentation.
     * @return The weight for circular or arbitrary objects for nucleus segmentation (from 0-100).
     */
    int getParam_SegmentationCircularWeight() {
        return jSlider4.getValue();
    }
    
    /**
     * Sets the weight for circular or arbitrary objects for nucleus segmentation.
     * @param w The weight for circular or arbitrary objects for nucleus segmentation (from 0-100).
     */
    void setParam_SegmentationCircularWeight(int w) {
        jSlider4.setValue(w);
    }
    
    
    
    void ComputeCytoplasmStaining() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        int w = getParam_patchsize();
        int h = getParam_patchsize();
        int t = getParam_BackgroundThreshold();
        boolean splitROIs = jCheckBox8.isSelected();
        int c, r, g, b;
        
        ((DefaultTableModel) jXTable1.getModel()).setRowCount(0);
        
        for (TMAspot ts: manager.getSelectedTMAspots()) {
            double average_r = 0;
            double average_g = 0;
            double average_b = 0;
            double average_gray = 0;
            double average_ch2 = 0;
            BufferedImage img = ts.getBufferedImage();
            BufferedImage ch2 = getChannel2Image(ts);
            
            
            List<List<Object>> pointsets = new ArrayList();
            List<Polygon> rois = new ArrayList();
            TMAspotSegmentations tsseg = getTMAspotSegmentations(ts);
            
            if (!splitROIs || ts.getIncludingAreas().isEmpty()) {
                // One image is one point set, where all points are added.
                List<Object> points = new ArrayList<>();
                if (tsseg != null && !tsseg.segmentations.isEmpty()) {
                    for (LocalizedROI loci : tsseg.segmentations) {
                        if (loci.ts == ts) {
                            points.add(loci);
                        }
                    }
                } else {
                    if (getParam_useGSTPoints()) {
                        points.addAll(ts.getPoints_GoldStandard());
                    }
                    if (getParam_useESTPoints()) {
                        points.addAll(ts.getPoints_Estimated());
                    }
                }
                // Exclude points with excluding areas
                if (!points.isEmpty()) {
                    for (int k=points.size()-1; k>=0; k--) {
                        TMALabel tp = tsseg != null && !tsseg.segmentations.isEmpty() ? ((LocalizedROI) points.get(k)).tp : (TMALabel) points.get(k);
                        if (ts.getExcludingAreaOnPoint(tp.x, tp.y)!=null) {
                            points.remove(k);
                        }
                    }
                }
                pointsets.add(points);
            } else {
                // every including ROI is a pointset where only the corresponding points are added.
                // find the including ROIs
                rois = ts.getIncludingAreas();
                // for every ROI add a new pointset
                for (Polygon roi: rois) {
                    pointsets.add(new ArrayList<>());
                }
                // Consider all points in the image
                List<Object> allpoints = new ArrayList<>();
                if (tsseg != null && !tsseg.segmentations.isEmpty()) {
                    allpoints.addAll(tsseg.segmentations);
                } else {
                    if (getParam_useGSTPoints()) {
                        allpoints.addAll(ts.getPoints_GoldStandard());
                    }
                    if (getParam_useESTPoints()) {
                        allpoints.addAll(ts.getPoints_Estimated());
                    }
                }
                int ind;
                // for every point, find the ROIs it belongs to (or null). 
                // if there is one, add the point to the corresponding pointset.
                for (Object point: allpoints) {
                    TMALabel tp = tsseg != null && !tsseg.segmentations.isEmpty() ? ((LocalizedROI) point).tp : (TMALabel) point;
                    Polygon roi = ts.getIncludingAreaOnPoint(tp.x, tp.y);
                    if (roi!=null) {
                        ind = rois.indexOf(roi);
                        pointsets.get(ind).add(point);
                    }
                }
            }
            
            for (int i=0; i<pointsets.size(); i++) {
                List<Object> points = pointsets.get(i);
                int n = points.size();
                
               String roiDescription = "-";
                if (!rois.isEmpty()) {
                    Rectangle rect = rois.get(i).getBounds();
                    roiDescription = "ROI (x=" + (rect.x + rect.width/2) + ", y=" + (rect.y + rect.height/2) + ")";
                }

                for (int k = 0; k<points.size(); k++) {
                    TMALabel tp = tsseg != null && !tsseg.segmentations.isEmpty() ? ((LocalizedROI) points.get(k)).tp : (TMALabel) points.get(k);

                    double local_avg_r = 0;
                    double local_avg_g = 0;
                    double local_avg_b = 0;
                    double local_avg_gray = 0;
                    double local_avg_ch2 = 0;
                    double local_gray;
                    int j = 0;
                    // go through the point environment
                    for (int x=tp.x-w/2; x<tp.x+w/2; x++) {
                        for (int y=tp.y-h/2; y<tp.y+h/2; y++) {
                            // if the coordinates are within the image...
                            if (x>=0 && y>=0 && x<img.getWidth() && y<img.getHeight()) {
                                //... and the coordinates are within a circle...
                                double r_ = Math.sqrt(Math.pow(tp.x-x, 2) + Math.pow(tp.y-y, 2));
                                if (r_ < w/2) { 
                                    if (!getParam_excludeNuclei() || ((tsseg == null || tsseg.segmentations.isEmpty()) && r_ > ts.getCenter().getLabelRadius())
                                      || tsseg != null && !tsseg.segmentations.isEmpty() && !((LocalizedROI) points.get(k)).p.contains(x,y)) {
                                        
                                        c = img.getRGB(x, y);
                                        r = (c & 0x00FF0000) >> 16;
                                        g = (c & 0x0000FF00) >>  8;
                                        b = (c & 0x000000FF);

                                        local_gray = 0.2989 * r + 0.5870 * g + 0.1140 * b;

                                        // ... and if the gray value is below background threshold
                                        if (local_gray <= t) {
                                            local_avg_r += r;
                                            local_avg_g += g;
                                            local_avg_b += b;
                                            local_avg_gray += local_gray;
                                            local_avg_ch2 += (ch2 == null)? 0 : (ch2.getRGB(x, y) & 0x000000FF);
                                            j++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    local_avg_r /= j;
                    local_avg_g /= j;
                    local_avg_b /= j;
                    local_avg_gray /= j;
                    local_avg_ch2 /= j;
                    average_r += local_avg_r;
                    average_g += local_avg_g;
                    average_b += local_avg_b;
                    average_gray += local_avg_gray;
                    average_ch2 += local_avg_ch2;
                }
                if (n!=0) {
                    average_r /= 255*n;
                    average_g /= 255*n;
                    average_b /= 255*n;
                    average_gray /= 255*n;
                    average_ch2 /= 255*n;
                } else {
                    average_r = Double.NaN;
                    average_g = Double.NaN;
                    average_b = Double.NaN;
                    average_gray = Double.NaN;
                    average_ch2 = Double.NaN;
                }

                double perc_0cells = 0;
                double perc_1cells = 0;
                double perc_2cells = 0;
                double perc_3cells = 0;

                if (n>0) {
                    for (int k = 0; k<points.size(); k++) {
                        TMALabel tp = tsseg != null && !tsseg.segmentations.isEmpty() ? ((LocalizedROI) points.get(k)).tp : (TMALabel) points.get(k);
                        switch (((TMApoint) tp).getStaining()) {
                            case TMALabel.STAINING_0: perc_0cells++; break;
                            case TMALabel.STAINING_1: perc_1cells++; break;
                            case TMALabel.STAINING_2: perc_2cells++; break;
                            default: perc_3cells++; break;
                        }
                    }
                    perc_0cells /= n;
                    perc_1cells /= n;
                    perc_2cells /= n;
                    perc_3cells /= n;
                }

                // add the average of this TMAspot to the table
                ((DefaultTableModel) jXTable1.getModel()).addRow(new Object[]{ts.getName(), roiDescription, Double.toString(average_r), Double.toString(average_g), Double.toString(average_b), perc_0cells, perc_1cells, perc_2cells, perc_3cells, Double.toString(average_gray), Double.toString(average_ch2), Double.toString(ts.getHScore(rois.isEmpty() ? null : rois.get(i)))});
            }
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    /**
     * Opens a dialog to let the user choose a file in which the table of the cytoplasm staining is saved.
     */
    private void saveTable() {
        if (jXTable1.getRowCount()>0) {
            String sep = manager.getColumnSeparator();
            String currentDir = manager.getCurrentDir();
            File file;
            List<String> exts = new ArrayList<>(1); exts.add("csv");
            List<String> descrs = new ArrayList<>(1); descrs.add("Semicolon separated file");
            String filename = null;
            if (manager.getVisibleTMAspot()!=null) {
                filename = Misc.FilePathStringtoFilenameWOExtension(manager.getVisibleTMAspot().getName())+".csv";
            } 
            file = FileChooser.chooseSavingFile(this, currentDir, filename, exts, descrs);

            if (file != null) {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                // Save csv
                try {
                    BufferedWriter bfw = new BufferedWriter(new FileWriter(file));
                    for(int i=0 ; i<jXTable1.getModel().getColumnCount(); i++) {
                        bfw.write("\"" + jXTable1.getModel().getColumnName(i) + "\"");
                        if (i<jXTable1.getModel().getColumnCount()-1) bfw.write(sep);
                    }
                    for (int i=0 ; i<jXTable1.getRowCount(); i++) {
                        bfw.newLine();
                        for(int j=0 ; j<jXTable1.getModel().getColumnCount(); j++) {
                            Object o = jXTable1.getModel().getValueAt(i,j);
                            if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == Double.class) {
                                bfw.write((Double.toString((Double) o)));
                            } else if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == Integer.class) {
                                bfw.write((Integer.toString((Integer) o)));
                            } else if (((DefaultTableModel)jXTable1.getModel()).getColumnClass(j) == String.class) {
                                bfw.write("\"" + (String) o + "\"");
                            } else {
                                bfw.write(jXTable1.getModel().getValueAt(i,j).toString());
                            }
                            if (j<jXTable1.getModel().getColumnCount()-1) bfw.write(sep);
                        }
                    }
                    bfw.close();
                } catch (Exception e) {
                    Logger.getLogger(CytoplasmStaining.class.getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, "Could not save file " + file.getName() + "\n(Maybe it is in use?)", "Error writing file", JOptionPane.ERROR_MESSAGE);
                }
            
                manager.setCurrentDir(file.getAbsolutePath());
                setCursor(Cursor.getDefaultCursor());
            }
            
        }
    }
    
    public void clusterImages() {
        if (jXTable1.getRowCount() > 0) {
            try {
                // First, let the user select which features to use...
                List<String> avail_features = new ArrayList<>();
                for (int i=2; i<jXTable1.getColumnCount(); i++) {
                    avail_features.add(jXTable1.getModel().getColumnName(i));
                }
                List<String> selected_features = FeatureSelectionDialog.showDialog(this, true, avail_features);
                
                if (!selected_features.isEmpty()) {
                    // ... then do the clustering
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    List<Sample> samples = new ArrayList<>();
                    // fill with data
                    for (int i=0; i<jXTable1.getRowCount(); i++) {
                        double[] features = new double[selected_features.size()];
                        int k=0;
                        for (int j=2; j<jXTable1.getColumnCount(); j++) {
                            if (selected_features.contains(jXTable1.getModel().getColumnName(j))) {
                                if (Double.class.isInstance(jXTable1.getValueAt(i, j))) {
                                    features[k++] = (Double) (jXTable1.getValueAt(i, j));
                                } else {
                                    features[k++] = Double.parseDouble((String) jXTable1.getValueAt(i, j));
                                }
                            }
                        }
                        
                        // get the TMAspot
                        TMAspot tp = manager.getTMAspot(jXTable1.getStringAt(i, 0));
                        
                        // get the ROI
                        String roistring = jXTable1.getStringAt(i, 1);
                        Polygon roi = null;
                        if (!roistring.equals("-")) {
                            String[] split = roistring.split(", y=");
                            int x = Integer.parseInt(split[0].replace("ROI (x=", ""));
                            int y = Integer.parseInt(split[1].replace(")", ""));
                            roi = tp.getIncludingAreaOnPoint(x, y);
                        }
                        
                        
                        // add the instance
                        samples.add(new Sample(tp, roi, features));
                    }

                    HierarchicalClassifier hc = new HierarchicalClassifier(samples);
                    hc.doClustering(AVERAGE_LINKAGE, true);
                }
            } catch (Exception | OutOfMemoryError e) {
                java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "The clustering could not be performed.\n\n"
                        + "A possible reasons is:\n"
                        + "- Not enough memory (too many points), \n\n"
                        + "You might want to try a different clustering method or less TMAspots.\n\n"
                        + "The error message is: \n"
                        + e.getMessage(), "Error at Nucleus clustering", JOptionPane.WARNING_MESSAGE);
            } finally {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }
    
    /**
     * Returns the channel 2 image of a given TMAspot. The channel 2 images has to be
     * created by the Color Deconvolution plugin.
     * @param ts The TMAspot to be searched for.
     * @return The channel 2 image of ts. null if the plugin "Color Deconvolution" 
     * is not loaded or the channel 2 image has not been created.
     */
    BufferedImage getChannel2Image(TMAspot ts) {
        Pluggable p = manager.getPlugin("Color Deconvolution");
        if (p==null) {
            return null;
        } else {
            try {
                return ((StainingEstimation) p).getBufferedImage(ts, StainingEstimation.SHOW_CHANNEL2_IMAGE);
            } catch (Exception e) {
                return null;
            }
        }
    }

    private void performSegmentation() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        List<TMAspot> tss = manager.getSelectedTMAspots();
        for (TMAspot ts: tss) {
            TMAspotSegmentations tsseg = getTMAspotSegmentations(ts);
            if (tsseg!=null) {
                tsseg.segmentations.clear();
            } else {
                tsseg = new TMAspotSegmentations(ts);
                TMAspotsegmentations.add(tsseg);
            }
            
            //segmentMultipleNuclei(ts, ts.getPoints(), tsseg);
            SegmentNucleiThread snt = new SegmentNucleiThread((TMARKERPluginManager) manager, this, ts, ts.getPoints(), tsseg, null, null);
            snt.start();
            try {
                snt.join();
            } catch (InterruptedException ex) {
                manager.repaintVisibleTMAspot();
            }
            manager.repaintVisibleTMAspot();
            
        }
        manager.setStatusMessageLabel("");
        manager.setProgressbar(0);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    TMAspotSegmentations segmentMultipleNuclei(TMAspot ts, List<TMApoint> tps, TMAspotSegmentations tsseg) {
        if (tsseg == null) {
            tsseg = new TMAspotSegmentations(ts);
        }
        
        // I_col
        BufferedImage I = ts.getBufferedImage();
        BufferedImage I_col = new BufferedImage(I.getWidth(), I.getHeight(), BufferedImage.TYPE_INT_ARGB);  
        Graphics g = I_col.getGraphics();  
        g.drawImage(I, 0, 0, null);  
        g.dispose();

        //Blur the image for smoother features
        ImagePlus ip = new ImagePlus(" ", I_col);
        GaussianBlur blur = new GaussianBlur();
        blur.blurGaussian(ip.getProcessor(), getParam_blur(), getParam_blur(), 0.02);
        I_col = ip.getBufferedImage();

        // I_gray
        BufferedImage I_gray = new BufferedImage(I_col.getWidth(), I_col.getHeight(), BufferedImage.TYPE_BYTE_GRAY);  
        g = I_gray.getGraphics();  
        g.drawImage(I_col, 0, 0, null);  
        g.dispose();

        for (int i = 0; i < tps.size(); i++) {
            if (i%10==0) {
                manager.setStatusMessageLabel(getPluginName() + ": Transform Labels (" + Integer.toString(i) + "/" + Integer.toString(tps.size()) + ") ...");
                manager.setProgressbar(10 + (int)((1.0*i/tps.size())*70));
            }
            LocalizedROI lroi = segmentOneNucleus(ts, tps.get(i), I_col, I_gray);
            if (lroi != null) {
                tsseg.segmentations.add(lroi);
            }
        }
        return tsseg;
    }
    
    
    private LocalizedROI segmentOneNucleus(TMAspot ts, TMApoint tp, BufferedImage I_col, BufferedImage I_gray) {
        Rectangle rect = PatchRectangle(tp, getParam_patchsize());
        if (rect.x>=0 && rect.y>=0 && rect.x + rect.width<I_col.getWidth() && rect.y + rect.height<I_col.getHeight()) {
            BufferedImage bi_gray = I_gray.getSubimage(rect.x, rect.y, rect.width, rect.height);
            ROI roi; 
            roi = PatchToShape(bi_gray, ts, true, 0, ts.getParam_r(), (float) (getParam_SegmentationCircularWeight()/100.0));
            return new LocalizedROI(ts, tp, roi, getParam_patchsize()/2);
        }
        return null;
    }
    
    
    
    
    /**
     * Segments the object in the middle of the patch and returns its shape.
     * @param bi The image patch. The object (i.e. nucleus) is expected to be in the middle.
     * @param ts The TMAspot to which the patch belongs (only used for superpixel based segmentation and for accessing the temp directory if DEBUG>5).
     * @param graphcut If true, a graphcut based segmentation is used, otherwise a superpixel based.
     * @param blurring Blurring radius before processing for smoothing.
     * @return A ROI with same shape as the segmented shape. The ROI has the same bounding box size as bi.
     */
    private static ROI PatchToShape(BufferedImage bi, TMAspot ts, boolean graphcut, int blurring, int nucleus_r, float circleweight) {
        try {
            //// CREATE BLACK WHITE IMAGE
            BufferedImage BW = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
            
            // SEGMENTATION WITH GRAPHCUT
            if (true || graphcut) {
                /*
                Maxflow mf = new Maxflow();
                mf.inputImageCapacity(bi, blurring);
                int[] foreground = mf.runMF();
                if (foreground!=null) {
                    int[] sub = new int[2];
                    for (int i=1; i<foreground.length-1; i++) {
                        Misc.Ind2sub(sub, foreground[i]-1, bi.getWidth());
                        if (tmarker.DEBUG > 5) { System.out.println(sub[0] + " " + Integer.toString(sub[1])); }
                        BW.setRGB(sub[0], sub[1], 0xFFFFFFFF);
                    }
                /*/
                // Grayscale the image
                BufferedImage bi_bw = Misc.convertToGrayscale(bi);
                ImagePlus ip = new ImagePlus(" ", bi_bw);
                // blur the image
                if (blurring>0) {
                    GaussianBlur gb = new GaussianBlur();
                    gb.blurGaussian(ip.getProcessor(), blurring, blurring, 0.02);
                }
                // normalize
                ip.getProcessor().setMinAndMax(ip.getStatistics().min, ip.getStatistics().max);
                int w = bi_bw.getWidth();
                int h = bi_bw.getHeight();

                GraphCut gc = new GraphCut(w*h, (w-1)*(h-1)*2+w+h-2);
                // set the terminal weights
                int i=0;
                float factor; // The factor for roundish shape: the more in the middle of the patch, the higher the factor
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        
                        //E = (w)*P + (1-w)*r*P = P(w+(1-f)*(1-w))
                        
                        factor = Math.min(1,(float) Math.pow(Math.sqrt(Math.pow(w / 2 - x, 2) + Math.pow(h / 2 - y, 2)) / nucleus_r, 2));
                        //gc.setTerminalWeights(i++, (1-factor)*(255-ip.getPixel(x, y)[0]), factor*ip.getPixel(x, y)[0]);
                        gc.setTerminalWeights(i++, (circleweight+(1-factor)*(1-circleweight))*(255-ip.getPixel(x, y)[0]), (circleweight+(factor)*(1-circleweight))*ip.getPixel(x, y)[0]);
                        
                        //int rgb = 0x000000FF & (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //rgb = rgb << 8;
                        //rgb += (int) (255*(1-factor));
                        //BW.setRGB(x, y, rgb);
                    }
                }
                //Misc.writeImage(ip.getBufferedImage(), ts.getTmpDir() + File.separator + "PatchROItmp.PNG");
                
                // set the internal weights (=differences of neighour pixels). Nodes are incrementally counted column by column.
                i=0;
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        if (x<w-1) {
                            gc.setEdgeWeight(i, i+h, Math.abs(ip.getPixel(x, y)[0]-ip.getPixel(x+1, y)[0]));
                        }
                        if (y<h-1) {
                            gc.setEdgeWeight(i, i+1, Math.abs(ip.getPixel(x, y)[0]-ip.getPixel(x, y+1)[0]));
                        }
                        i++;
                    }
                }
                
                gc.computeMaximumFlow(true, null);
                
                int[] sub = new int[2];
                for (i=0; i<gc.getNumNodes(); i++) {
                    if (gc.getTerminal(i) == Terminal.FOREGROUND) {
                        Misc.Ind2sub(sub, i, bi.getHeight());
                        BW.setRGB(sub[1], sub[0], 0xFFFFFFFF);
                    }
                }
                //Misc.writeImage(BW, ts.getTmpDir() + File.separator + "PatchROI_graphcut.PNG");
                //*/
                
                ConnectComponent cc = new ConnectComponent();
                int[] img = new int[w*h];
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        img[Misc.Sub2ind(x, y, w)] = BW.getRGB(x, y);
                    }
                }
                int[] labels = cc.labeling(img, new Dimension(w, h), true);
                int label_center = labels[Misc.Sub2ind(w/2, h/2, w)];
                for (int x=0; x<w; x++) {
                    for (int y=0; y<h; y++) {
                        if (labels[Misc.Sub2ind(x, y, w)]!=label_center) {
                            BW.setRGB(x, y, 0x0);
                        }
                    }
                }
            } 
            
            // Black White Image to ROI
            ROI roi = new ROI(BW, 1);
            System.setProperty("com.sun.media.jai.disableMediaLib", "true");
            // run this otherwise roi.contains() returns true always.
            for (int i=0; i<BW.getWidth(); i++) {
                for (int j=0; j<BW.getHeight(); j++) {
                    if (roi.contains(i,j)) {
                    }
                }            
            }
            // END run this
            
            if (tmarker.DEBUG>5) {
                for (int j=0; j<bi.getHeight(); j++) {
                    System.out.println("");
                    for (int i=0; i<bi.getWidth(); i++) {
                        if (roi.contains(i,j)) {
                                System.out.print("1");
                            } else {
                                System.out.print(".");
                            }
                    }
                }
                Misc.writeImage(BW, ts.getTmpDir() + File.separator + "PatchROI.PNG");
                Misc.writeImage(bi, ts.getTmpDir() + File.separator + "Patch.PNG");
            }
            
            return roi;
        } catch (Exception ex) {
            if (tmarker.DEBUG>0) {
                Logger.getLogger(TMAspot.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;
        }
    }
    
    /**
     * Returns a new Rectangle with center on the middle of tp and with and height of patchsize.
     * @param tp The nucleus over which a patch should be created.
     * @param patchsize The size of the patch.
     * @return A new quadratic Rectangle.
     */
    private static Rectangle PatchRectangle(TMALabel tp, int patchsize) {
        int p_half = patchsize/2;
        return (new Rectangle(tp.x-p_half, tp.y-p_half, patchsize, patchsize));
    }
    
    private TMAspotSegmentations getTMAspotSegmentations(TMAspot ts) {
        for (TMAspotSegmentations tsseg : TMAspotsegmentations) {
            if (tsseg.ts == ts) {
                return tsseg;
            }
        }
        return null;
    }
    
}
