/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package survivalanalysis;

import TMARKERPluginInterface.PluginManager;
import com.boxysystems.jgoogleanalytics.FocusPoint;
import com.boxysystems.jgoogleanalytics.JGoogleAnalyticsTracker;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javastat.survival.regression.CoxRegression;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartPanel;
import plugins.TMARKERPluginManager;
import tmarker.TMAspot.TMApoint;
import tmarker.TMAspot.TMAspot;
import tmarker.misc.Misc;
import tmarker.misc.SortedProperties;
import tmarker.tmarker;

/**
 *
 * @author Peter J. Schueffler
 */
public class SurvivalAnalysisFrame extends javax.swing.JFrame implements TMARKERPluginInterface.Pluggable {

    // for the Plugin
    private final static String PLUGINNAME = "Survival Analysis";
    private static final String PLUGINVERSION = "1.0";
    private TMARKERPluginManager manager = null;
    
    /**
     * Creates new form SurvivalAnalysisFrame
     */
    public SurvivalAnalysisFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setTitle(PLUGINNAME + " v1." + java.util.ResourceBundle.getBundle("survivalanalysis/Bundle").getString("build")); // NOI18N

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField1, gridBagConstraints);

        jTextField2.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 0, 10);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel1.setText("<html>Available Properties</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("<html>Time Variable</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 5);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("<html>Event Variable (1=event, 0=censored)</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 0, 5);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("<html>Covariates</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jList2.setModel(new SortedListModel());
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jScrollPane4, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_right_16x16.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_left_16x16.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton2, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_right_16x16.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(22, 10, 0, 10);
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_left_16x16.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton4, gridBagConstraints);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_right_16x16.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton5, gridBagConstraints);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tmarker/img/buttons/move_left_16x16.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton6, gridBagConstraints);

        jButton7.setText("categorize");
        jButton7.setToolTipText("For Kaplan Meier estimates, categorize continuous variables.");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(13, 10, 0, 0);
        jPanel1.add(jButton7, gridBagConstraints);

        jButton8.setText("Survival Analysis");
        jButton8.setToolTipText("Calculate Survival Statistics (Kaplan Meier estimates and Cox Regression).");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(jButton8, gridBagConstraints);

        jScrollPane2.setBorder(null);

        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setOpaque(false);
        jScrollPane2.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jList1.setModel(new SortedListModel());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("Properties can be loaded as .csv file to TMARKER.");
        jScrollPane3.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jScrollPane3, gridBagConstraints);

        jButton9.setText("Load Properties from .CSV Table...");
        jButton9.setToolTipText("Properties can be loaded as .csv file to TMARKER.");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel1.add(jButton9, gridBagConstraints);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.WEST);

        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportView(jTabbedPane1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addPropertyToTime();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        removePropertyFromTime();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        addPropertyToEvent();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        removePropertyFromEvent();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        addPropertyToCovariate();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        removePropertyFromCovariate();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        categorizeSelectedCovariate();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        doSurvivalAnalysis();
        JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker("TMARKER","UA-61194283-1");
        FocusPoint focusPoint = new FocusPoint("SurvivalAnalysisUsage");
        tracker.trackAsynchronously(focusPoint);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        if (evt.getClickCount()==2) {
            categorizeSelectedCovariate();
        }
    }//GEN-LAST:event_jList2MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        manager.LoadFilesWithChooser(manager.getCurrentDir());
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SurvivalAnalysisFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public String getAuthor() {
        return "Peter J. Schüffler";
    }
    
    @Override
    public String getVersion() {
        return PLUGINVERSION;
    }
    
    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        setVisible(false);
        return true;
    }

    @Override
    public void setPluginManager(PluginManager manager) {
        this.manager = (TMARKERPluginManager) manager;
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public String getPluginName() {
        return PLUGINNAME;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        updateOptionsToTMAspot(manager.getVisibleTMAspot(), manager.getSelectedTMAspots());
        setVisible(true);
    }

    @Override
    public void setParameterDefaults() {
        
    }

    @Override
    public void setParameters(Properties parameters) {
        
    }

    @Override
    public Properties getParameters() {
        Properties prop = new Properties();
        return prop;
    }

    @Override
    public String getHTMLReport(String HTMLFolderName) {
        String report = "<table>\n  "
                + "<tr><td colspan=2><i><u>Survival Analysis Parameters</u></i></td></tr>\n"
                + "<tr><td><b>" + jLabel2.getText() + ":</b></td><td>" + getTimeVariable() + "</td></tr>\n";
        report += "  <tr><td><b>" + jLabel3.getText() + ":</b></td><td>" + getEventVariable() + "</td></tr>\n";
        report += "  <tr><td><b>" + jLabel4.getText() + ":</b></td>";
        for (String covariate: getCovariates(true)) {
            report += "<td>" + covariate + "</td></tr>\n  <tr><td></td>";
        }
        report += "<td></td></tr>\n</table><br>\n";
  
        report += jTextPane1.getText().replace("<html>", "").replace("</html>", "").replace("<head>", "").replace("</head>", "")
                .replace("<body>", "").replace("</body>", "").replaceAll("<h1>", "<h3>").replaceAll("</h1>", "</h3>")
                .replace("You can change the layout of the plot(s) on the right with right mouse click.", "");
        for (int i=0; i<jTabbedPane1.getComponentCount(); i++) {
            ChartPanel chartpanel = (ChartPanel) jTabbedPane1.getComponent(i);
            
            // Save the Kaplan Meier Plot as Image
            try {
                File file_tmp = new File(HTMLFolderName + jTabbedPane1.getTitleAt(i) + "_KMPlot.png");
                BufferedImage bi = Misc.getScreenShot(chartpanel);
                ImageIO.write(bi, "png", file_tmp);
            } catch (IOException ex) {
                Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            // link the image to the HTML report
            report += "<br><br>\n"
                    + "<img src=\"" + HTMLFolderName + jTabbedPane1.getTitleAt(i) + "_KMPlot.png" + "\">";
        }
            
        return report;
    }

    @Override
    public void updateOptionsToTMAspot(TMAspot visible_TMAspot, List<TMAspot> selected_TMAspots) {
        initAvailableProperties();
    }

    @Override
    public void drawInformationPreNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
    }
    
    @Override
    public void drawInformationPostNuclei(TMAspot ts, Graphics g, double z, int x_min, int y_min, int x_max, int y_max) {
    }

    @Override
    public BufferedImage showAlternativeImage(TMAspot ts) {
        return null;
    }
    
    @Override
    public void TMAspotMouseClicked(TMAspot ts, TMApoint tp, MouseEvent evt) {
        
    }
    
    /**
     * Reads out all available properties of the TMAspots and puts them into the
     * tables.
     */
    public void initAvailableProperties() {
        final Set<String> props = tmarker.getProperties(manager.getTMAspots());
        // Remove properties from List 1 which are not existing anymore
        for (int i = jList1.getModel().getSize()-1; i>=0; i--) {
            String value = (String) ((SortedListModel)jList1.getModel()).getElementAt(i);
            if (!props.contains(value)) {
                ((SortedListModel)jList1.getModel()).remove(i);
            }
        }
        // Remove properties from List 2 which are not existing anymore
        for (int i = jList2.getModel().getSize()-1; i>=0; i--) {
            String value = (String) ((SortedListModel)jList2.getModel()).getElementAt(i);
            if (!props.contains(value)) {
                ((SortedListModel)jList2.getModel()).remove(i);
            }
        }
        // Remove Time and Event variables if they are not existing anymore
        String time = jTextField1.getText();
        String event = jTextField2.getText();
        if (!props.contains(time)) {
            time = "";
            jTextField1.setText(time);
        }
        if (!props.contains(event)) {
            event = "";
            jTextField2.setText(event);
        }
        // Add properties which are not already in List1, List2, Time field or Event field to List1.
        for (String s: props) {
            if (!((SortedListModel)jList1.getModel()).contains(s) && !((SortedListModel)jList2.getModel()).contains(s) && !s.equals(time) && !s.equals(event)) {
                ((SortedListModel)jList1.getModel()).addElement(s);
            }
        }
        this.pack();
    }

		/**
     * Adds a selected property to the time variable and removes it from the main list.
     */
    private void addPropertyToTime() {
        int selection = jList1.getSelectedIndex();
        if (selection >= 0) {
            String value_new = (String) jList1.getSelectedValue();
            String value_before = jTextField1.getText();
            jTextField1.setText(value_new);
            ((SortedListModel)jList1.getModel()).remove(selection);
            if (!value_before.isEmpty() && !((SortedListModel)jList1.getModel()).contains(value_before)) {
                ((SortedListModel)jList1.getModel()).addElement(value_before);
            }
        }
    }
    
    /**
     * Removes the time variable and puts it back to the main list.
     */
    private void removePropertyFromTime() {
        String value_before = jTextField1.getText();
        if (!value_before.isEmpty() && !((SortedListModel)jList1.getModel()).contains(value_before)) {
            ((SortedListModel)jList1.getModel()).addElement(value_before);
        }
        jTextField1.setText("");
    }
        
    /**
     * Adds a selected property to the event variable and removes it from the main list.
     */
    private void addPropertyToEvent() {
        int selection = jList1.getSelectedIndex();
        if (selection >= 0) {
            String value_new = (String) jList1.getSelectedValue();
            String value_before = jTextField2.getText();
            jTextField2.setText(value_new);
            ((SortedListModel)jList1.getModel()).remove(selection);
            if (!value_before.isEmpty() && !((SortedListModel)jList1.getModel()).contains(value_before)) {
                ((SortedListModel)jList1.getModel()).addElement(value_before);
            }
        }
    }

		/**
     * Removes the event variable and puts it back to the main list.
     */
    private void removePropertyFromEvent() {
        String value_before = jTextField2.getText();
        if (!value_before.isEmpty() && !((SortedListModel)jList1.getModel()).contains(value_before)) {
            ((SortedListModel)jList1.getModel()).addElement(value_before);
        }
        jTextField2.setText("");
    }

		/**
     * Adds a selected property to the covariates list and removes it from the main list.
     */
    private void addPropertyToCovariate() {
        int selection = jList1.getSelectedIndex();
        if (selection >= 0) {
            String value = (String) ((SortedListModel)jList1.getModel()).getElementAt(selection);
            boolean categorized = false;
            if (!value.isEmpty() && !((SortedListModel)jList2.getModel()).containsString(value)) {
                    ((SortedListModel)jList2.getModel()).addElement(value);
                    categorized = categorizeSelectedCovariate(value);
            }
            if (categorized) {
                ((SortedListModel)jList1.getModel()).remove(selection);
            } else {
                ((SortedListModel)jList2.getModel()).removeElement(value);
            }
        }
    }

		/**
     * Removes a selected covariate variable and puts it back to the main list.
     */
    private void removePropertyFromCovariate() {
        int selection = jList2.getSelectedIndex();
        if (selection >= 0) {
            String value = (String) ((SortedListModel)jList2.getModel()).getElementAt(selection);
            value = value.substring(0, (value.contains(",") ? value.indexOf(",") : value.length()));
            if (!value.isEmpty() && !((SortedListModel)jList1.getModel()).contains(value)) {
                ((SortedListModel)jList1.getModel()).addElement(value);
            }
            ((SortedListModel)jList2.getModel()).remove(selection);
        }
    }
    
    /**
     * Returns the property names which are currently in the covariates list.
     * @param full If true, they are returned as they appear in the list. If false
     * the extensions (such as ", numerical" or ", categorical") are removed.
     * @return The property names which are currently in the covariates list.
     */
    private String[] getCovariates(boolean full) {
        String[] strings = new String[((SortedListModel)jList2.getModel()).getSize()];
        for (int i=0; i< strings.length; i++) {
            String s = (String) ((SortedListModel)jList2.getModel()).getElementAt(i);
            if (!full) {
                s = s.substring(0, (s.contains(", numerical") ? s.indexOf(", numerical") : (s.contains(", categorial") ? s.indexOf(", categorial") : s.length())));
            }
            strings[i] = s;
        }
        return strings;
    }
    
    /**
     * Returns the property name which is currently in the time field.
     * @return The property name which is currently in the time field.
     */
    private String getTimeVariable() {
        return jTextField1.getText();
    }
    
    /**
     * Returns the property name which is currently in the event field.
     * @return The property name which is currently in the event field.
     */
    private String getEventVariable() {
        return jTextField2.getText();
    }
    
    /**
     * Categorizes one selected variable in the covariates list.
     * @return True if the categorization was successful.
     */
    private boolean categorizeSelectedCovariate() {
        int selection = jList2.getSelectedIndex();
        if (selection >= 0) {
            return categorizeSelectedCovariate((String) ((SortedListModel)jList2.getModel()).getElementAt(selection));
        } else {
            JOptionPane.showMessageDialog(this, "Please select a covariate in the table below.", "No Covariate Selected", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
    }
    
    /**
     * Categorizes a given property (opens a dialog and lets the user choose a good threshold).
     * @return True if the categorization was successful.
     */
    private boolean categorizeSelectedCovariate(String covariate_full) {
        String covariate = covariate_full.substring(0, (covariate_full.contains(", numerical") ? covariate_full.indexOf(", numerical") : (covariate_full.contains(", categorial") ? covariate_full.indexOf(", categorial") : covariate_full.length())));
        if (!covariate.isEmpty() ) {
            List<TMAspot> tss = manager.getTMAspots();
            // test if target Propertiy is numerical. Then, a threshold is needed.
            String value = "";
            for (TMAspot ts:tss) {
                if (ts.getProperties() != null) {
                    value = ts.getProperties().getProperty(covariate);
                    if (value!=null && !value.isEmpty()) {
                        break;
                    }
                }
            }
            boolean numeric = false;
            Double[] th = new Double[]{-1.0};
            // find the "old" threshold if there is one
            if (covariate_full.contains(", categorial")) {
                th[0] = Double.NaN;
            } else if (covariate_full.contains(", t=")) {
                try {
                    th[0] = Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t=")+4));
                } catch (Exception e) {
                }
            } else if (covariate_full.contains(", t1=")) {
                try {
                    double t1 = Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t1=")+5, covariate_full.indexOf(", t2=")));
                    double t2 = Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t2=")+5));
                    th = new Double[]{t1, t2};
                } catch (Exception e) {
                }
            }
            try {
                Double.parseDouble(value.replaceAll(",", ".").trim()); // test for numerical. If this fails, everything is alright. If this succeeds, the Threshold is found.
                Double[] input = ThresholdFinderDialog.showThresholdFinderDialog(this, covariate, tss, th);
                if (input == null) {
                    return false;
                } else if (Double.isNaN(input[0])) {
                    numeric = false;
                } else {
                    numeric = true;
                    th = input;
                }
            } catch (Exception e) {
                //java.util.logging.Logger.getLogger(SurvivalAnalysisFrame.class.getName()).log(java.util.logging.Level.WARNING, e.getMessage());
            }

            String covariate_full_new;
            if (numeric) {
                if (th.length==1) {
                    covariate_full_new = covariate + ", numerical, t=" + Double.toString(th[0]);
                } else {//if (th.length==2) {
                    covariate_full_new = covariate + ", numerical, t1=" + Double.toString(th[0]) + ", t2=" + Double.toString(th[1]);
                }
            } else {
                covariate_full_new = covariate + ", categorial";
            }
            ((SortedListModel) jList2.getModel()).changeElement(covariate_full, covariate_full_new);
            jList2.update(jList2.getGraphics());
        }
        return true;
    }

		/**
     * First does cox-regression, then, if successful, plots the Kaplan Meier curve.
     */
    void doSurvivalAnalysis() {
        boolean success = doCoxRegression();
        if (success) {
            success = doKaplanMeierEstimates();
        }
    }
    
    /**
     * Does cox regression with the covariates, time and event variables specified in the plugin window.
     * The result is written in the window.
     * @return True, if successful, false otherwise.
     */
    boolean doCoxRegression() {
        List<TMAspot> tss = manager.getTMAspots();
        if (!tss.isEmpty()) {
            // define the separating targets
            String[] covariates = getCovariates(false);
            if (covariates.length == 0) {
                JOptionPane.showMessageDialog(this, "Please add at least one covariate to the table above.", "Missing Covariates.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            
            // define the time and event variable
            String time_variable_name = getTimeVariable();
            String event_variable_name  = getEventVariable();
            if (time_variable_name==null || time_variable_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select the time variable.", "Missing Time Variable.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (event_variable_name==null || event_variable_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select the event variable.", "Missing Event Variable.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            
            // which covariates are categorial?
            String[] covariates_full = getCovariates(true);
            boolean[] isCategorial = new boolean[covariates_full.length];
            ArrayList<ArrayList<String>> categories = new ArrayList<>();
            for (int i=0; i<covariates_full.length; i++) {
                isCategorial[i] = covariates_full[i].contains("categorial");
                // also collect the categories
                ArrayList<String> group_levels = new ArrayList<>();
                if (isCategorial[i]) {
                    String value;
                    for (int k=0; k<tss.size(); k++) {
                        SortedProperties prop = tss.get(k).getProperties();
                        if (prop!=null) {
                            try {
                                value = ((String) prop.get(covariates[i])).replaceAll(",", ".").trim();
                            } catch (Exception e2) {
                                value = null;
                            }
                            if (value !=null && !value.isEmpty() && !group_levels.contains(value)) {
                                group_levels.add(value);
                            }
                        }
                    }
                }
                Collections.sort(group_levels);
                categories.add(group_levels);
            }
            
            ArrayList<Double> times_linear = new ArrayList<>(); // For Cox Regression
            ArrayList<Double> censored_linear = new ArrayList<>(); // For Cox Regression, 1: death, 0: censored
            ArrayList<Double>[] covariates_linear = new ArrayList[covariates.length]; // For Cox Regression
            for (int i=0; i<covariates.length; i++) {
                covariates_linear[i] = new ArrayList<>();
            }
            int skipped=0;
            for (int i=0; i<tss.size(); i++) {
                SortedProperties prop = tss.get(i).getProperties();
                if (prop!=null) {
                    double timevalue;
                    double eventvalue;
                    boolean covariatevaluesIsNaN = false;
                    String covariatevalue;
                    try {
                        // find the time variable of this sample
                        try {
                            timevalue = Double.parseDouble((((String)prop.get(time_variable_name))).replaceAll(",", ".").trim());
                        } catch (Exception e) {
                            timevalue = Double.NaN;
                            skipped++;
                            continue;
                        } 
                        
                        // find the event variable of this sample
                        String eventvaluestring = null;
                        try {
                            eventvaluestring = ((String) prop.get(event_variable_name)).replaceAll(",", ".").trim();
                            eventvalue = Double.parseDouble(eventvaluestring);
                            eventvalue = eventvalue > 0 ? 1: 0;
                        } catch (Exception e) {
                            if (eventvaluestring != null && (eventvaluestring.equalsIgnoreCase("true") || eventvaluestring.equalsIgnoreCase("yes"))) {
                                eventvalue = 1;
                            } else if (eventvaluestring != null && (eventvaluestring.equalsIgnoreCase("false") || eventvaluestring.equalsIgnoreCase("no"))) {
                                eventvalue = 0;
                            } else {
                                eventvalue = Double.NaN;
                                skipped++;
                                continue;
                            }
                        } 
                        
                        // find the covariates of this sample
                        for (int j=0; j<covariates.length; j++) {
                            try {
                                covariatevalue = ((String)prop.get(covariates[j])).replaceAll(",", ".").trim();
                                if (!isCategorial[j]) {
                                    Double.parseDouble(covariatevalue);
                                } else if (covariatevalue==null || covariatevalue.isEmpty() || covariatevalue.equalsIgnoreCase("na") || covariatevalue.equalsIgnoreCase("nan")) {
                                    covariatevaluesIsNaN = true;
                                    break;
                                }
                            }
                            catch(Exception e) {
                                covariatevaluesIsNaN = true;
                                break;
                            }
                        }
                        
                        // only if none of time, event or covariates is NaN, add all together to the dataset
                        if (timevalue!=(double)Double.NaN && eventvalue!=(double)Double.NaN && !covariatevaluesIsNaN) {
                            times_linear.add(timevalue);
                            censored_linear.add(eventvalue);
                            for (int j=0; j<covariates.length; j++) {
                                covariatevalue = ((String)prop.get(covariates[j])).replaceAll(",", ".").trim();
                                try {
                                    if (isCategorial[j]) {
                                        covariates_linear[j].add((double) categories.get(j).indexOf(covariatevalue));
                                    } else {
                                        covariates_linear[j].add(Double.parseDouble(covariatevalue));
                                    }
                                } catch (Exception e) {
                                    
                                }
                            }
                        } else {
                            skipped++;
                        }
                    } catch (Exception e) {
                    }
                }
            }
            
            // convert the covariates to a double[][]
            double[][] covariates_linear_array = new double[covariates.length][covariates_linear[0].size()];
            for (int i=0; i<covariates.length; i++) {
                covariates_linear_array[i] =  Misc.DoubleListToArray(covariates_linear[i]);
            }
            
            // Cox Regression P-Value Cox Regression Wald Test (Feature Significance)
            String coxstr = null;
            try {
                CoxRegression cox = new CoxRegression(Misc.DoubleListToArray(times_linear), Misc.DoubleListToArray(censored_linear), covariates_linear_array);
                coxstr = KaplanMeierSurvival.CoxRegressionSummary(cox, covariates, skipped);
            } catch (Exception e) {
                coxstr = "Could not calculate Cox regression: " + e.getMessage();
            }
            jTextPane1.setText(coxstr);
        }
        return true;
    }
    
    /**
     * Calculates the Kaplan Meier survival curves and plots them into the window.
     * @return True, if everything was successful.
     */
    boolean doKaplanMeierEstimates() {
        List<TMAspot> tss = manager.getTMAspots();
        if (!tss.isEmpty()) {
            jTabbedPane1.removeAll();
            
            // define the separating targets
            String[] covariates = getCovariates(true);
            if (covariates.length == 0) {
                JOptionPane.showMessageDialog(this, "Please add at least one covariate to the table above.", "Missing Covariates.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            
            // define the time and censor variable
            String time_variable_name = getTimeVariable();
            String event_variable_name  = getEventVariable();
            if (time_variable_name==null || time_variable_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select the time variable.", "Missing Time Variable.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (event_variable_name==null || event_variable_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select the event variable.", "Missing Event Variable.", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
                
            for (String covariate_full: covariates) {
                boolean numeric = covariate_full.contains("numerical");
                double[] th = null;
                if (numeric && covariate_full.contains("t=")) {
                    th = new double[]{Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t=")+4))};
                } else if (numeric && covariate_full.contains("t1=")) {
                    th = new double[]{Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t1=")+5, covariate_full.indexOf(", t2="))), Double.parseDouble(covariate_full.substring(covariate_full.indexOf(", t2=")+5))};
                }
                String covariate = covariate_full.substring(0, (covariate_full.contains(", numerical") ? covariate_full.indexOf(", numerical") : (covariate_full.contains(", categorial") ? covariate_full.indexOf(", categorial") : covariate_full.length())));
        
                
                // prepare the groups and data
                String value;
                List<String> group_levels = new ArrayList<>();
                for (TMAspot ts : tss) {
                    SortedProperties prop = ts.getProperties();
                    if (prop!=null) {
                        try {
                            value = (String) prop.get(covariate);
                            if (value != null) {
                                if (numeric && th!=null && th.length==1) {
                                    value = (Double.parseDouble(value.replaceAll(",", ".").trim())) < th[0] ? "< " + th[0] : ">= " + th[0];
                                } else if (numeric && th!=null && th.length==2) {
                                    value = (Double.parseDouble(value.replaceAll(",", ".").trim())) < th[0] ? "< " + th[0] : ((Double.parseDouble(value.replaceAll(",", ".").trim())) < th[1] ? th[0] + "<= x <" + th[1] : ">= " + th[1]);
                                }
                            }
                        } catch (NumberFormatException e) {
                            value = null;
                        }
                        if (value !=null && !value.isEmpty() && !group_levels.contains(value)) {
                            group_levels.add(value);
                        }
                    }
                }
                Collections.sort(group_levels);
                List<List<Double>> times_groups = new ArrayList<>(group_levels.size());
                List<List<Boolean>> censored_groups = new ArrayList<>(group_levels.size());
                for (String group_level : group_levels) {
                    times_groups.add(new ArrayList<Double>());
                    censored_groups.add(new ArrayList<Boolean>());
                }
                for (TMAspot ts : tss) {
                    SortedProperties prop = ts.getProperties();
                    if (prop!=null) {
                        String targetvalue;
                        double timevalue = 0;
                        boolean censorvalue = false; // true: death/event, false: censored
                        String eventvaluestring = null;
                        try {
                            targetvalue = (String) prop.get(covariate);
                            if (targetvalue != null) {
                                if (numeric && th!=null && th.length==1) {
                                    targetvalue = (Double.parseDouble(targetvalue.replaceAll(",", ".").trim())) < th[0] ? "< " + th[0] : ">= " + th[0];
                                } else if (numeric && th!=null && th.length==2) {
                                    targetvalue = (Double.parseDouble(targetvalue.replaceAll(",", ".").trim())) < th[0] ? "< " + th[0] : ((Double.parseDouble(targetvalue.replaceAll(",", ".").trim())) < th[1] ? th[0] + "<= x <" + th[1] : ">= " + th[1]);
                                }
                                timevalue = Double.parseDouble((((String)prop.get(time_variable_name))).replaceAll(",", ".").trim());
                                try {
                                    eventvaluestring = ((String) prop.get(event_variable_name)).replaceAll(",", ".").trim();
                                    censorvalue = Double.parseDouble(eventvaluestring) > 0;
                                } catch (NumberFormatException e) {
                                    if (eventvaluestring != null && (eventvaluestring.equalsIgnoreCase("true") || eventvaluestring.equalsIgnoreCase("yes"))) {
                                        censorvalue = true;
                                    } else if (eventvaluestring != null && (eventvaluestring.equalsIgnoreCase("false") || eventvaluestring.equalsIgnoreCase("no"))) {
                                        censorvalue = false;
                                    } else {
                                        targetvalue = null;
                                    }
                                }
                            }
                        } catch (NumberFormatException e) {
                            targetvalue = null;
                        }
                        if (targetvalue !=null && !targetvalue.isEmpty()) {
                            int group_ind = group_levels.indexOf(targetvalue);
                            times_groups.get(group_ind).add(timevalue);
                            censored_groups.get(group_ind).add(censorvalue);
                        }
                    }
                }
                
                // add number samples to group levels
                for (int i=0; i<group_levels.size(); i++) {
                    group_levels.set(i, covariate + " " + group_levels.get(i) + " (n=" + censored_groups.get(i).size() + ")");
                }
                
                ChartPanel chartPanel = (ChartPanel) KaplanMeierSurvival.createSurvivalChart(group_levels, times_groups, censored_groups, time_variable_name);
                chartPanel.getChart().setTitle("Kaplan Meier Est for " + covariate);
                
                // Paint the chartPanel
                jTabbedPane1.addTab(covariate, chartPanel);
                pack();
            }
        }
        return true;
    }


}
