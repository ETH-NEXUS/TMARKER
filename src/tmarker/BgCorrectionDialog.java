/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BackgroundChooserDialog.java
 *
 * Created on 17.10.2011, 17:45:10
 */
package tmarker;

import java.awt.Cursor;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tmarker.TMAspot.TMAspot;
import tmarker.misc.Misc;

/**
 *
 * @author Peter J. Schueffler
 */
public class BgCorrectionDialog extends javax.swing.JDialog {

    /** Creates new form BackgroundChooserDialog */
    public BgCorrectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(400, 300);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("White Balance");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("use selected color for all selected images");
        jCheckBox1.setToolTipText("If selected, the depicted color will be used for all images.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        jButton2.setText("Automatic WB Correction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        jPanel1.add(jButton2, gridBagConstraints);

        jLabel1.setText("<html>To achieve a higher quality in the result of staining estimation, it is<br>\nrecommended to remove the grayish background from the TMA images.<br><br>\n\nFor <b>manual white balance</b>, please click on a typical background pixel<br>\non the TMA image while this window is open. The captured color will<br>\nthen be defined as \"white\".</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("<html>For <b>automatic white balance</b>, please click on \"Automatic WB Correction\".<br>\nThe program will then guess the background based on color and entropy.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 5);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton3.setText("Save BG corrected images...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        jPanel1.add(jButton3, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ((tmarker)(super.getParent())).performBGCorrectionAutomatic(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        saveBGcorrectedImages();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BgCorrectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BgCorrectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BgCorrectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BgCorrectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                BgCorrectionDialog dialog = new BgCorrectionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    /**
     * Whether or not the manually depicted color should be used for all images.
     * @return True, if the manually depicted color should be used for all images. False otherwise.
     */
    public boolean getUseColor() {
        return jCheckBox1.isSelected();
    }
    
    /**
     * Set whether or not the manually depicted color should be used for all images.
     * @param useColor True, if the manually depicted color should be used for all images. False otherwise.
     */
    public void setUseColor(boolean useColor) {
        jCheckBox1.setSelected(useColor);
    }
    
    /**
     * Lets the user choose a folder in which the BG corrected images of selected images are saved.
     * I a selected image does not have a BG corrected image, it is skipped.
     */
    public void saveBGcorrectedImages() {
        List<TMAspot> tss = ((tmarker)(super.getParent())).getSelectedTMAspots();
        if (!tss.isEmpty()) {
            // Let the user chose a folder
            File file = FileChooser.chooseSavingFolder(((tmarker)(super.getParent())), ((tmarker)(super.getParent())).getCurrentDir());

            String noBGversion = "";
            if (file != null) {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                ((tmarker)(super.getParent())).setCurrentDir(file.getPath());
                for (TMAspot ts : tss) {
                    try {
                        if (ts.hasBGCorrection()) {
                            Files.copy((new File(ts.getImagename())).toPath(), (new File(file.getPath() + File.separator + ts.getName() + "_BGcorrected." + Misc.FilePathStringtoExtension(ts.getImagename()))).toPath(), StandardCopyOption.REPLACE_EXISTING);
                        } else {
                            noBGversion += "\n"+ts.getImagename();
                        }
                    } catch (Exception ex) {
                        if (tmarker.DEBUG > 0) {
                            Logger.getLogger(BgCorrectionDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                
                if (!noBGversion.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Following image(s) did not have a BG correction\n" + noBGversion, "No BG correction found", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
