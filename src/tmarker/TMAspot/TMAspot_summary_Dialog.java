/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tmarker.TMAspot;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import tmarker.FileChooser;
import tmarker.delaunay.ArraySet;
import tmarker.misc.Misc;
import tmarker.tmarker;

/**
 * This summary dialog belongs to a TMARKER session. It shows additional or detailed information about a TMAspot to the user.
 * This might be disabled in the TMARKER Light version.
 * @author Peter J. Schueffler
 */
public class TMAspot_summary_Dialog extends javax.swing.JDialog {

    private tmarker t = null;
    private Dimension smallPlotDim = new Dimension(300, 300);
    private int nbins = 256;
    
    /**
     * Creates new form TMAspot_summary_Dialog
     * @param parent The TMARKER program frame.
     * @param modal If true, this dialog is modal. Should be false.
     */
    public TMAspot_summary_Dialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setSize(new Dimension(1000, 1000));
        jScrollPane2.getHorizontalScrollBar().setUnitIncrement(10);
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(10);
        jScrollPane3.getHorizontalScrollBar().setUnitIncrement(10);
        jScrollPane3.getVerticalScrollBar().setUnitIncrement(10);
        
        this.t = (tmarker) parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        jMenuItem1.setText("Set selected property as target");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Save as Table");
        jMenuItem2.setToolTipText("Saves properties of selected TMAspots as table. Estimated values are integrated.");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel12.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(null);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jPanel1, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), jScrollPane2, org.jdesktop.beansbinding.BeanProperty.create("preferredSize"), "jScrollPane2Binding");
        bindingGroup.addBinding(binding);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Staining Info"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("No Image Selected"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 1);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel3.setToolTipText("<html>The accuracy, sensitivity and specificity are calculated between \"gold-standard\" points and \"estimated\" points with respect of their class.<br>\nIt is a measure of how many positive and negative \"gold-standard\" points could have been matched by the classification.<br>\nThis measure only considers \"gold-standard\" points and \"estimated\" points that are matched to each other.<br><br>\n\nThe Precision, Recall and F-score are calculated between \"gold-standard\" points and \"estimated\" points regardless of their class.<br>\nIt is a measure of how many \"gold-standard\" points could have been matched by the estimation.<br>\nThe higher the scores (0-1) the better.<br><br>\n\nTwo points are matched, if they lay beside each other in a radius r. r can be defined in the Tools-> Options menu.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jXTable1.setComponentPopupMenu(jPopupMenu1);
        jXTable1.setEditable(false);
        jXTable1.setHighlighters(HighlighterFactory.createAlternateStriping());
        jScrollPane3.setViewportView(jXTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jScrollPane3, gridBagConstraints);

        jLabel6.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        jPanel14.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        jPanel1.add(jPanel14, gridBagConstraints);

        jScrollPane2.setViewportView(jPanel1);

        jPanel12.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Summary", jPanel12);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel5.setText("No Superpixels Available."); // NOI18N
        jPanel17.add(jLabel5);

        jPanel5.add(jPanel17, java.awt.BorderLayout.WEST);

        jPanel13.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jPanel13, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Superpixels", jPanel5);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jPanel6, new java.awt.GridBagConstraints());

        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jPanel7, new java.awt.GridBagConstraints());

        jPanel8.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jPanel8, gridBagConstraints);

        jPanel9.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jPanel9, gridBagConstraints);

        jPanel10.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel4.add(jPanel10, gridBagConstraints);

        jPanel11.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel4.add(jPanel11, gridBagConstraints);

        jButton1.setText("Refresh Whole Image Histogram");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 3, 5);
        jPanel4.add(jButton1, gridBagConstraints);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Histograms", jPanel3);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jButton3.setText("Close");
        jButton3.setToolTipText("Close TMA Summary");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton3);

        getContentPane().add(jPanel16, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateWholeImageHistogram(t.getVisibleTMAspot());
        pack();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int selectedRow = jXTable1.getSelectedRow();
        if (selectedRow >=0) {
            selectedRow = jXTable1.getRowSorter().convertRowIndexToModel(selectedRow);
            String prop = (String) jXTable1.getModel().getValueAt(selectedRow, 0);
            t.setTargetProperty(prop);
        }        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // update histograms window if shown
        if (jTabbedPane1.getSelectedComponent() == jPanel3) {
            if (t!=null) {
                updateStainingEstimation(t.getVisibleTMAspot());
                pack();
            }
        }
        // update summary window if shown
        else if (jTabbedPane1.getSelectedComponent() == jPanel12) {
            if (t!=null) {
                updateStainingEstimation(t.getVisibleTMAspot());
                pack();
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        List<String> extensions = new ArrayList<String>();
        List<String> descriptions = new ArrayList<String>();
        extensions.add("csv");
        descriptions.add("CSV file for selected images with their property table");
        File file = FileChooser.chooseSavingFile(t, t.getCurrentDir(), Misc.FilePathStringtoFilenameWOExtension(t.getVisibleTMAspot().getName()), extensions, descriptions);
        tmarker.SaveAsCSV_Properties(t, file);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Updates the information in this dialog.
     * @param ts The TMAspot from which the information is taken.
     */
    public void updateStainingEstimation(TMAspot ts) {
        if (ts!=null) {
            if (jPanel12.isShowing()) {
                String text;
                String col_pos = Integer.toHexString(ts.getCenter().getLabelsColorWOAlpha(TMALabel.LABEL_POS, TMALabel.STAINING_0).getRGB()).substring(2).toUpperCase();
                String col_pos_st = Integer.toHexString(ts.getCenter().getLabelsColorWOAlpha(TMALabel.LABEL_POS, TMALabel.STAINING_3).getRGB()).substring(2).toUpperCase();
                String col_neg = Integer.toHexString(ts.getCenter().getLabelsColorWOAlpha(TMALabel.LABEL_NEG, TMALabel.STAINING_0).getRGB()).substring(2).toUpperCase();
                int pos_est = ts.getNumPos_estimated();
                int neg_est = ts.getNumNeg_estimated();
                int pos_gst = ts.getNumPos_goldst();
                int neg_gst = ts.getNumNeg_goldst();
                int pos_tot = ts.getNumPos_total();
                int neg_tot = ts.getNumNeg_total();

                Color cp = ts.getAverageColor(TMALabel.LABEL_POS, true);
                Color cn = ts.getAverageColor(TMALabel.LABEL_NEG, true);

                text  = "<html><table border=\"0\">";
                text += "<tr><td></td> <td align=\"center\">neg</td> <td align=\"center\">pos</td> <td align=\"center\">pos [%]</td> <td align=\"center\">Stained<br>pos</td></tr>";
                text += "<tr><th align=\"left\">gold<br>standard:</th> <th><font color=\"#" + col_neg + "\">" + Integer.toString(neg_gst) + "</font></th> <th><font color=\"#" + col_pos + "\">" + Integer.toString(pos_gst) + "</font></th> <th align=\"right\"><b>" + Integer.toString((int)Math.round(100.0*pos_gst/(pos_gst+neg_gst))) + " %</b></th> <th align=\"right\"><font size=\"5\" color=\"#" + col_pos_st + "\"><b>" + Integer.toString(TMAspot.getStainingEstimation(ts.getPoints_GoldStandard(TMALabel.LABEL_POS))) + " %</b></font></th></tr>";
                text += "<tr><th align=\"left\">estimated:</th> <th><font color=\"#" + col_neg + "\">" + Integer.toString(neg_est) + "</font></th> <th><font color=\"#" + col_pos + "\">" + Integer.toString(pos_est) + "</font></th> <th align=\"right\"><b>" + Integer.toString((int)Math.round(100.0*pos_est/(pos_est+neg_est))) + " %</b></th> <th align=\"right\"><font size=\"5\" color=\"#" + col_pos_st + "\"><b>" + Integer.toString(TMAspot.getStainingEstimation(ts.getPoints_Estimated(TMALabel.LABEL_POS))) + " %</b></font></th></tr>";
                text += "<tr><th align=\"left\">total:</th> <th><font color=\"#" + col_neg + "\">" + Integer.toString(neg_tot) + "</font></th> <th><font color=\"#" + col_pos + "\">" + Integer.toString(pos_tot) + "</font></th> <th align=\"right\"><b>" + Integer.toString((int)Math.round(100.0*pos_tot/(pos_tot+neg_tot))) + " %</b></th> <th align=\"right\"><font size=\"5\" color=\"#" + col_pos_st + "\"><b>" + Integer.toString(TMAspot.getStainingEstimation(ts.getPoints(TMALabel.LABEL_POS))) + " %</b></font></th></tr>";
                if (tmarker.DEBUG>1) text += "<tr><th align=\"left\">avg color<br>pos:</th> <th>" + Integer.toString(cp.getRed()) + "</th> <th>" + Integer.toString(cp.getGreen()) + "</th> <th>" + Integer.toString(cp.getBlue()) + "</th> <th>(R/G/B)</th></tr>";
                if (tmarker.DEBUG>1) text += "<tr><th align=\"left\">avg color<br>neg:</th> <th>" + Integer.toString(cn.getRed()) + "</th> <th>" + Integer.toString(cn.getGreen()) + "</th> <th>" + Integer.toString(cn.getBlue()) + "</th> <th>(R/G/B)</th></tr>";
                text += "</table></html>";

                jLabel2.setText(text);
            }

            if (jPanel3.isShowing()) {
                // draw pos gray and col histogram
                double[][] value = ts.getIntensities(TMALabel.LABEL_POS, false);
                //gray
                if (((java.awt.BorderLayout)(jPanel6.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                    JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel6.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                    chart.getXYPlot().setDataset(dataset);
                } else {
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                    String plotTitle = "Gray Histogram of Pos"; 
                    String xaxis = "Gray Value";
                    String yaxis = "Frequency [%]"; 
                    PlotOrientation orientation = PlotOrientation.VERTICAL; 
                    boolean showLengend = true; 
                    boolean toolTips = true;
                    boolean urls = false; 
                    JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                                dataset, orientation, showLengend, toolTips, urls);
                    chart.setBackgroundPaint(null);
                    //chart.getXYPlot().getDomainAxis().setRange(0, 255);
                    chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                    XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                    las.setSeriesPaint(0, Color.BLACK);
                    XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                    las.setBaseToolTipGenerator(ttg);
                    chart.getXYPlot().setRenderer(0, las);
                    ChartPanel chartPanel = new ChartPanel(chart);
                    chart.getPlot().setBackgroundPaint(null);
                    chartPanel.setPreferredSize(smallPlotDim);
                    chartPanel.setBackground(getBackground());
                    jPanel6.add(chartPanel, java.awt.BorderLayout.CENTER);
                }
                //col
                if (((java.awt.BorderLayout)(jPanel7.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                    JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel7.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                    if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                    if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                    chart.getXYPlot().setDataset(dataset);
                } else {
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                    if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                    if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                    String plotTitle = "Color Histogram of Pos"; 
                    String xaxis = "Color Value";
                    String yaxis = "Frequency [%]"; 
                    PlotOrientation orientation = PlotOrientation.VERTICAL; 
                    boolean showLengend = true; 
                    boolean toolTips = true;
                    boolean urls = false; 
                    JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                                dataset, orientation, showLengend, toolTips, urls);
                    chart.setBackgroundPaint(null);
                    chart.getXYPlot().getDomainAxis().setRange(0, 255);
                    chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                    XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                    las.setSeriesPaint(0, Color.RED);
                    las.setSeriesPaint(1, Color.GREEN);
                    las.setSeriesPaint(2, Color.BLUE);
                    XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                    las.setBaseToolTipGenerator(ttg);
                    chart.getXYPlot().setRenderer(0, las);
                    ChartPanel chartPanel = new ChartPanel(chart);
                    chart.getPlot().setBackgroundPaint(null);
                    chartPanel.setPreferredSize(smallPlotDim);
                    chartPanel.setBackground(getBackground());
                    jPanel7.add(chartPanel, java.awt.BorderLayout.CENTER);
                }

                // draw neg gray and col histogram
                value = ts.getIntensities(TMALabel.LABEL_NEG, false);
                //gray
                if (((java.awt.BorderLayout)(jPanel8.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                    JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel8.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                    chart.getXYPlot().setDataset(dataset);
                } else {
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                    String plotTitle = "Gray Histogram of Neg"; 
                    String xaxis = "Gray Value";
                    String yaxis = "Frequency [%]"; 
                    PlotOrientation orientation = PlotOrientation.VERTICAL; 
                    boolean showLengend = true; 
                    boolean toolTips = true;
                    boolean urls = false; 
                    JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                                dataset, orientation, showLengend, toolTips, urls);
                    chart.setBackgroundPaint(null);
                    //chart.getXYPlot().getDomainAxis().setRange(0, 255);
                    chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                    XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                    las.setSeriesPaint(0, Color.BLACK);
                    XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                    las.setBaseToolTipGenerator(ttg);
                    chart.getXYPlot().setRenderer(0, las);
                    ChartPanel chartPanel = new ChartPanel(chart);
                    chart.getPlot().setBackgroundPaint(null);
                    chartPanel.setPreferredSize(smallPlotDim);
                    chartPanel.setBackground(getBackground());
                    jPanel8.add(chartPanel, java.awt.BorderLayout.CENTER);
                }
                //col
                if (((java.awt.BorderLayout)(jPanel9.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                    JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel9.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                    if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                    if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                    chart.getXYPlot().setDataset(dataset);
                } else {
                    HistogramDataset dataset = new HistogramDataset();
                    dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                    if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                    if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                    if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                    String plotTitle = "Color Histogram of Neg"; 
                    String xaxis = "Color Value";
                    String yaxis = "Frequency [%]"; 
                    PlotOrientation orientation = PlotOrientation.VERTICAL; 
                    boolean showLengend = true; 
                    boolean toolTips = true;
                    boolean urls = false; 
                    JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                                dataset, orientation, showLengend, toolTips, urls);
                    chart.setBackgroundPaint(null);
                    //chart.getXYPlot().getDomainAxis().setRange(0, 255);
                    chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                    XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                    las.setSeriesPaint(0, Color.RED);
                    las.setSeriesPaint(1, Color.GREEN);
                    las.setSeriesPaint(2, Color.BLUE);
                    XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                    las.setBaseToolTipGenerator(ttg);
                    chart.getXYPlot().setRenderer(0, las);
                    ChartPanel chartPanel = new ChartPanel(chart);
                    chart.getPlot().setBackgroundPaint(null);
                    chartPanel.setPreferredSize(smallPlotDim);
                    chartPanel.setBackground(getBackground());
                    jPanel9.add(chartPanel, java.awt.BorderLayout.CENTER);
                }
            }

            updateWholeImageHistogram(ts);
        }
    } 
    
    /**
     * Updates the histogram over the given TMAspot image.
     * @param ts The TMAspot from which the image is taken.
     */
    private void updateWholeImageHistogram(TMAspot ts) {
        if (ts!=null && jPanel3.isShowing()) {
            //*
            double[][] value = ts.getHistograms(nbins, true);
            //gray
            if (((java.awt.BorderLayout)(jPanel10.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel10.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                XYSeriesCollection dataset = new XYSeriesCollection();
                if (value[3].length>0) {
                    XYSeries s0 = new XYSeries("Gray");
                    for (int i=0; i<nbins; i++) {
                        s0.add(i, value[3][i]);
                    }
                    dataset.addSeries(s0);
                }
                chart.getXYPlot().setDataset(dataset);
            } else {
                XYSeriesCollection dataset = new XYSeriesCollection();
                if (value[3].length>0) {
                    XYSeries s0 = new XYSeries("Gray");
                    for (int i=0; i<nbins; i++) {
                        s0.add(i, value[3][i]);
                    }
                    dataset.addSeries(s0);
                }
                String plotTitle = "Gray Histogram of Image"; 
                String xaxis = "Gray Value";
                String yaxis = "Frequency [%]"; 
                PlotOrientation orientation = PlotOrientation.VERTICAL; 
                boolean showLengend = true; 
                boolean toolTips = true;
                boolean urls = false; 
                JFreeChart chart = ChartFactory.createXYLineChart(plotTitle, xaxis, yaxis, 
                            dataset, orientation, showLengend, toolTips, urls);
                chart.setBackgroundPaint(null);
                chart.getXYPlot().getDomainAxis().setRange(0, 255);
                chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                las.setSeriesPaint(0, Color.BLACK);
                XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                las.setBaseToolTipGenerator(ttg);
                chart.getXYPlot().setRenderer(0, las);
                ChartPanel chartPanel = new ChartPanel(chart);
                chart.getPlot().setBackgroundPaint(null);
                chartPanel.setPreferredSize(smallPlotDim);
                chartPanel.setBackground(getBackground());
                jPanel10.add(chartPanel, java.awt.BorderLayout.CENTER);
            }
            //col
            if (((java.awt.BorderLayout)(jPanel11.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel11.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                XYSeriesCollection dataset = new XYSeriesCollection();
                if (value[0].length>0) {
                    XYSeries s1 = new XYSeries("R");
                    XYSeries s2 = new XYSeries("G");
                    XYSeries s3 = new XYSeries("B");
                    for (int i=0; i<nbins; i++) {
                        s1.add(i, value[0][i]);
                        s2.add(i, value[1][i]);
                        s3.add(i, value[2][i]);
                    }
                    dataset.addSeries(s1);
                    dataset.addSeries(s2);
                    dataset.addSeries(s3);
                }
                chart.getXYPlot().setDataset(dataset);
            } else {
                XYSeriesCollection dataset = new XYSeriesCollection();
                if (value[0].length>0) {
                    XYSeries s1 = new XYSeries("R");
                    XYSeries s2 = new XYSeries("G");
                    XYSeries s3 = new XYSeries("B");
                    for (int i=0; i<nbins; i++) {
                        s1.add(i, value[0][i]);
                        s2.add(i, value[1][i]);
                        s3.add(i, value[2][i]);
                    }
                    dataset.addSeries(s1);
                    dataset.addSeries(s2);
                    dataset.addSeries(s3);
                }
                String plotTitle = "Color Histogram of Image"; 
                String xaxis = "Color Value";
                String yaxis = "Frequency [%]"; 
                PlotOrientation orientation = PlotOrientation.VERTICAL; 
                boolean showLengend = true; 
                boolean toolTips = true;
                boolean urls = false; 
                JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                            dataset, orientation, showLengend, toolTips, urls);
                chart.setBackgroundPaint(null);
                chart.getXYPlot().getDomainAxis().setRange(0, 255);
                chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                las.setSeriesPaint(0, Color.RED);
                las.setSeriesPaint(1, Color.GREEN);
                las.setSeriesPaint(2, Color.BLUE);
                XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                las.setBaseToolTipGenerator(ttg);
                chart.getXYPlot().setRenderer(0, las);
                ChartPanel chartPanel = new ChartPanel(chart);
                chart.getPlot().setBackgroundPaint(null);
                chartPanel.setPreferredSize(smallPlotDim);
                chartPanel.setBackground(getBackground());
                jPanel11.add(chartPanel, java.awt.BorderLayout.CENTER);
            }
            /*/
            double[][] value = ts.getIntensities();
            //gray
            if (((java.awt.BorderLayout)(jPanel10.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel10.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                HistogramDataset dataset = new HistogramDataset();
                dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                chart.getXYPlot().setDataset(dataset);
            } else {
                HistogramDataset dataset = new HistogramDataset();
                dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                if (value[3].length>0) {dataset.addSeries("Gray",value[3],nbins, 0, 256);}
                String plotTitle = "Gray Histogram of Image"; 
                String xaxis = "Gray Value";
                String yaxis = "Frequency [%]"; 
                PlotOrientation orientation = PlotOrientation.VERTICAL; 
                boolean showLengend = true; 
                boolean toolTips = true;
                boolean urls = false; 
                JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                            dataset, orientation, showLengend, toolTips, urls);
                chart.setBackgroundPaint(null);
                chart.getXYPlot().getDomainAxis().setRange(0, 255);
                chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                las.setSeriesPaint(0, Color.BLACK);
                XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                las.setBaseToolTipGenerator(ttg);
                chart.getXYPlot().setRenderer(0, las);
                ChartPanel chartPanel = new ChartPanel(chart);
                chart.getPlot().setBackgroundPaint(null);
                chartPanel.setPreferredSize(smallPlotDim);
                chartPanel.setBackground(getBackground());
                jPanel10.add(chartPanel, java.awt.BorderLayout.CENTER);
            }
            //col
            if (((java.awt.BorderLayout)(jPanel11.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                JFreeChart chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel11.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();
                HistogramDataset dataset = new HistogramDataset();
                dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                chart.getXYPlot().setDataset(dataset);
            } else {
                HistogramDataset dataset = new HistogramDataset();
                dataset.setType(HistogramType.RELATIVE_FREQUENCY);
                if (value[0].length>0) {dataset.addSeries("R",value[0],nbins, 0, 256);}
                if (value[1].length>0) {dataset.addSeries("G",value[1],nbins, 0, 256);}
                if (value[2].length>0) {dataset.addSeries("B",value[2],nbins, 0, 256);}
                String plotTitle = "Color Histogram of Image"; 
                String xaxis = "Color Value";
                String yaxis = "Frequency [%]"; 
                PlotOrientation orientation = PlotOrientation.VERTICAL; 
                boolean showLengend = true; 
                boolean toolTips = true;
                boolean urls = false; 
                JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis, 
                            dataset, orientation, showLengend, toolTips, urls);
                chart.setBackgroundPaint(null);
                chart.getXYPlot().getDomainAxis().setRange(0, 255);
                chart.getXYPlot().getRangeAxis().setRange(0, 0.1);
                XYLineAndShapeRenderer las = new XYLineAndShapeRenderer(true, false);
                las.setSeriesPaint(0, Color.RED);
                las.setSeriesPaint(1, Color.GREEN);
                las.setSeriesPaint(2, Color.BLUE);
                XYToolTipGenerator ttg = new StandardXYToolTipGenerator();
                las.setBaseToolTipGenerator(ttg);
                chart.getXYPlot().setRenderer(0, las);
                ChartPanel chartPanel = new ChartPanel(chart);
                chart.getPlot().setBackgroundPaint(null);
                chartPanel.setPreferredSize(smallPlotDim);
                chartPanel.setBackground(getBackground());
                jPanel11.add(chartPanel, java.awt.BorderLayout.CENTER);
            }
             //*/
            validate();
        }
    }
    
    /**
     * Sets the Background of this dialog form.
     * @param color The new background color. 
     */
    void setBG(Color color) {
        setBackground(color);
    }
    
    /**
     * Sets the title of this dialog.
     * @param original_filename The TMAspot image name should be the title of this dialog.
     */
    void setImagename(String original_filename) {
        this.setTitle(Misc.FilePathStringtoFilename(original_filename));
        jLabel1.setText(Misc.FilePathStringtoFilename(original_filename));
    }
    
    /**
     * Updates this summary dialog.
     * @param ts The TMAspot from which the information is taken.
     */
    public void updateSummary(TMAspot ts){
        if (ts!=null && isShowing()) {
            if (jLabel4.getText().equalsIgnoreCase("") || ts.getCenter().getTMAView().getImage()!=null) {
                jLabel4.setText("size: " + Integer.toString(ts.getCenter().getTMAView().getImageWidth()) + " x " + Integer.toString(ts.getCenter().getTMAView().getImageHeight()));
            }
            setImagename(ts.getOriginalImagename());
            updateStainingEstimation(ts);
            updateAccuracyInfo();
            updatePropertiesTable(ts);
            updateTargetProperty(ts);
            repaint();
        }
    }

    /**
     * Updates Accuracy information of the TMAspot.
     */
    private void updateAccuracyInfo() {
        TMAspot ts = t.getVisibleTMAspot();
        if (ts!=null && isShowing()) {
            List<TMApoint> es = ts.getPoints_Estimated(TMALabel.LABEL_NEG);
            es.addAll(ts.getPoints_Estimated(TMALabel.LABEL_POS));
            es.addAll(ts.getPoints_Estimated(TMALabel.LABEL_UNK));
            ArraySet<Byte> labelers = (ArraySet<Byte>) ts.getLabelers();
            
            DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset();
            if ((labelers.size()==1 && !es.isEmpty()) || (labelers.size()>1)) {
                // Accuracy/F-Score Info for Algorithm
                Double[][] list = new Double[6][];
                for (int i=0; i<6; i++) {
                    list[i] = new Double[labelers.size()];
                }
                int j=0;
                for (Byte gsnum:labelers) {
                    List<TMApoint> gs = ts.getPoints_GoldStandard(gsnum, TMALabel.LABEL_NEG);
                    gs.addAll(ts.getPoints_GoldStandard(gsnum, TMALabel.LABEL_POS));
                    gs.addAll(ts.getPoints_GoldStandard(gsnum, TMALabel.LABEL_UNK));
                    double[] stats = ts.calculateMatchStatistics(gs, es, ts.getParam_r());
                    if (tmarker.DEBUG>3) {
                        double[] statst = ts.calculateMatchStatistics(es, gs, ts.getParam_r());
                        java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "PC / labelers:");
                        java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "  Matchstatistics gs vs. es");
                        java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "    " + Arrays.toString(stats));
                        java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "  Matchstatistics es vs. gs");
                        java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "    " + Arrays.toString(statst));
                    }

                    list[0][j] = stats[0]; // acc
                    list[1][j] = stats[1]; // sens
                    list[2][j] = stats[2]; // spec
                    list[3][j] = stats[7]; // f-score
                    list[4][j] = stats[8]; // prec
                    list[5][j] = stats[9]; // rec
                    j++;
                }
                dataset.add(Arrays.asList(list[0]), "Accuracy", "PC");
                dataset.add(Arrays.asList(list[1]), "Sensitivity", "PC");
                dataset.add(Arrays.asList(list[2]), "Specificity", "PC");
                dataset.add(Arrays.asList(list[3]), "F-Score", "PC");
                dataset.add(Arrays.asList(list[4]), "Precision", "PC");
                dataset.add(Arrays.asList(list[5]), "Recall", "PC");
                
                // Accuracy/F-Score Info for Inter-Labelers
                list = new Double[6][];
                for (int i=0; i<6; i++) {
                    list[i] = new Double[(labelers.size()*(labelers.size()-1))/2];
                }
                int z=0;
                for (int i=0; i<labelers.size(); i++) {
                    List<TMApoint> gs1 = ts.getPoints_GoldStandard(labelers.get(i), TMALabel.LABEL_NEG);
                    gs1.addAll(ts.getPoints_GoldStandard(labelers.get(i), TMALabel.LABEL_POS));
                    gs1.addAll(ts.getPoints_GoldStandard(labelers.get(i), TMALabel.LABEL_UNK));
                    for (j=i+1; j<labelers.size(); j++) {
                        List<TMApoint> gs2 = ts.getPoints_GoldStandard(labelers.get(j), TMALabel.LABEL_NEG);
                        gs2.addAll(ts.getPoints_GoldStandard(labelers.get(j), TMALabel.LABEL_POS));
                        gs2.addAll(ts.getPoints_GoldStandard(labelers.get(j), TMALabel.LABEL_UNK));
                        double[] stats = ts.calculateMatchStatistics(gs1, gs2, ts.getParam_r());
                        if (tmarker.DEBUG>3) {
                            double[] statst = ts.calculateMatchStatistics(gs2, gs1, ts.getParam_r());
                            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "Inter labelers:");
                            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "  Matchstatistics g1 vs. g2");
                            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "    " + Arrays.toString(stats));
                            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "  Matchstatistics g2 vs. g1");
                            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.INFO, "    " + Arrays.toString(statst));
                        }
                        
                        list[0][z] = stats[0]; // acc
                        list[1][z] = stats[1]; // sens
                        list[2][z] = stats[2]; // spec
                        list[3][z] = stats[7]; // f-score
                        list[4][z] = stats[8]; // prec
                        list[5][z] = stats[9]; // rec
                        z++;
                    }
                }
                dataset.add(Arrays.asList(list[0]), "Accuracy", "inter labelers");
                dataset.add(Arrays.asList(list[1]), "Sensitivity", "inter labelers");
                dataset.add(Arrays.asList(list[2]), "Specificity", "inter labelers");
                dataset.add(Arrays.asList(list[3]), "F-Score", "inter labelers");
                dataset.add(Arrays.asList(list[4]), "Precision", "inter labelers");
                dataset.add(Arrays.asList(list[5]), "Recall", "inter labelers");
 
                JFreeChart chart;
                if (((java.awt.BorderLayout)(jPanel14.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                    chart = ((ChartPanel)((java.awt.BorderLayout)(jPanel14.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER)).getChart();            
                    try {
                        chart.getCategoryPlot().setDataset(dataset);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    chart = ChartFactory.createBoxAndWhiskerChart("Match Statistics", "", "Performance", dataset, true);
                    chart.getCategoryPlot().getRangeAxis().setRange(0, 1);
                    chart.setBackgroundPaint(null);
                    chart.getPlot().setBackgroundPaint(null);
                    ChartPanel chartPanel = new ChartPanel(chart);
                    if (((java.awt.BorderLayout)(jPanel14.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) {
                        jPanel14.remove(((java.awt.BorderLayout)(jPanel14.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER));
                    }
                    jPanel14.add(chartPanel, java.awt.BorderLayout.CENTER);
                    //validate();
                    pack();
                    jPanel14.setPreferredSize(new Dimension(jScrollPane2.getWidth()-20, 300));
                    jPanel14.update(jPanel14.getGraphics());
            
                }
            }
                
                
            /*    
            double stats[] = ts.calculateMatchStatistics();
            double stats_interobs[];
            if (ts.getLabelerNum()>1) {
                List<TMApoint> gs = ts.getPoints_GoldStandard((byte)1, TMAspot.LABEL_NEG);
                gs.addAll(ts.getPoints_GoldStandard((byte)1, TMAspot.LABEL_POS));
                List<TMApoint> es = ts.getPoints_GoldStandard((byte)2, TMAspot.LABEL_NEG);
                es.addAll(ts.getPoints_GoldStandard((byte)2, TMAspot.LABEL_POS));
                stats_interobs = ts.calculateMatchStatistics(gs, es);
            }
                
            String text = "<html><table border=\"0\">";
            if (stats[0]<0) {
                text += "<tr><th align=\"left\"></th> <th align=\"left\">Inter<br>Observer</th><th>Computer</th></tr>"
                        + "<tr><th align=\"left\">Accuracy:</th> <th align=\"left\">-</th></tr>"
                        + "<tr><th align=\"left\">Sensitivity:</th> <th align=\"left\">-</th></tr>"
                        + "<tr><th align=\"left\">Specificity:</th> <th align=\"left\">-</th></tr>";
            } else {
                text += "<tr><th align=\"left\"></th> <th align=\"left\">Inter<br>Observer</th><th>Computer</th></tr>"
                        + "<tr><th align=\"left\">Accuracy:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[0])/100.0) + "</th></tr>"
                        + "<tr><th align=\"left\">Sensitivity:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[1])/100.0) + "</th></tr>"
                        + "<tr><th align=\"left\">Specificity:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[2])/100.0) + "</th></tr>";
            }
            //if (((java.awt.BorderLayout)(jPanel2.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER) != null) jPanel2.remove(((java.awt.BorderLayout)(jPanel2.getLayout())).getLayoutComponent(java.awt.BorderLayout.CENTER));
            if (stats[0+7]<0) {
                text += "<tr><th align=\"left\">Precision:</th> <th align=\"left\">-</th></tr>"
                        + "<tr><th align=\"left\">Recall:</th> <th align=\"left\">-</th></tr>"
                        + "<tr><th align=\"left\">F-Score:</th> <th align=\"left\">-</th></tr>";
            } else {
                text += "<tr><th align=\"left\">Precision:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[1+7])/100.0) + "</th></tr>"
                        + "<tr><th align=\"left\">Recall:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[2+7])/100.0) + "</th></tr>"
                        + "<tr><th align=\"left\">F-Score:</th> <th align=\"left\">" + Double.toString(Math.round(100.0*stats[0+7])/100.0) + "</th></tr>";
            }
            */
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the Properties Table.
     * @param ts The TMAspot of which the information is taken.
     */
    public void updatePropertiesTable(TMAspot ts) {
        if (jPanel12.isShowing()) {
        DefaultTableModel dtm = new DefaultTableModel(new String[]{"Property", "Value"}, 0);
        if (ts.getProperties()!=null && !ts.getProperties().isEmpty()) {
            Enumeration keysEnum = ts.getProperties().keys();
            while (keysEnum.hasMoreElements()) {
                String key = (String)keysEnum.nextElement();
                dtm.addRow(new String[] {key, ts.getProperties().getProperty(key)});
            }
        }
        jXTable1.setModel(dtm);
        }
    }

    /**
     * Updates the target property. The target property is used for survival analysis.
     * @param ts The TMAspot of which the information is taken.
     */
    public void updateTargetProperty(TMAspot ts) {
        if (t.getTargetProperty()!= null && !t.getTargetProperty().equals("") && jPanel12.isShowing()) {
            String prop = t.getTargetProperty();
            String p;
            try {
                p = ts.getProperties().getProperty(prop).replace("<", "&lt;");
            } catch (Exception ex) {
                p = "";            
            }
            String txt = "<html>Target: <b><i>" + prop + " </i></b> = " + p + "</html>";
            jLabel6.setText(txt);
        }   
    }

}
